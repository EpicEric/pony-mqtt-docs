{
    "docs": [
        {
            "location": "/",
            "text": "Packages\n\n\n\n\nmqtt",
            "title": "mqtt"
        },
        {
            "location": "/mqtt--index/",
            "text": "Pony-MQTT\n\u00b6\n\n\nPony-MQTT is a library implementing an MQTT client. It allows you to connect to\nan MQTT broker and exchange messages through TCP. It complies with the MQTT 3.1\nand 3.1.1 protocols.\n\n\nUsage\n\u00b6\n\n\nFollow this guide to get started on using Pony-MQTT:\n\n\n\n\n\n\nInstall \npony-stable\n.\n\n\n\n\n\n\nUpdate your \nbundle.json\n:\n\n\n\n\n\n\n{\n  \"type\": \"github\",\n  \"repo\": \"epiceric/pony-mqtt\"\n}\n\n\n\n\n\n\n\n\nstable fetch\n to fetch your dependencies.\n\n\n\n\n\n\nWrite an application with \nuse \"mqtt\"\n that creates an MQTTConnection actor\nwith a class implementing the MQTTConnectionNotify interface:\n\n\n\n\n\n\nuse \"mqtt\"\n\nclass iso MyNotify is MQTTConnectionNotify\n  new iso create(...) =>\n    // ...\n\n  fun ref on_connect(conn: MQTTConnection ref, session_present: Bool) =>\n    // ...\n\nactor Main\n  new create(env: Env) =>\n    try\n      MQTTConnection(\n        env.root as AmbientAuth,\n        MyNotify(...),\n        \"localhost\",\n        \"1883\")\n    end\n\n\n\n\n\n\nstable env ponyc\n to compile your application.\n\n\n\n\nExamples\n\u00b6\n\n\nThese are a few simple examples to help you take a look at what you can do with\nPony-MQTT.\n\n\nHello world\n\u00b6\n\n\nSimple enough, this program connects to an MQTT broker, sends a message and\ndisconnects.\n\n\nuse \"mqtt\"\n\nclass iso MQTTHelloWorldNotify is MQTTConnectionNotify\n  // Connects to the broker, sends a message and disconnects.\n  fun ref on_connect(conn: MQTTConnection ref, session_present: Bool) =>\n    conn.publish(MQTTPacket(\"pony\", \"Hello, world!\".array()))\n    conn.disconnect()\n\nactor Main\n  new create(env: Env) =>\n    try\n      MQTTConnection(\n        env.root as AmbientAuth,\n        MQTTHelloWorldNotify,\n        \"localhost\",\n        \"1883\")\n    end\n\n\n\n\nSubscribe\n\u00b6\n\n\nConnect to a broker and print every message on the \n$SYS/#\n topics.\n\n\nuse \"mqtt\"\n\nclass iso MQTTSubNotify is MQTTConnectionNotify\n  // Subscribe to the $SYS topic and print every message received.\n  let _env: Env\n\n  new iso create(env: Env) =>\n    _env = env\n\n  fun ref on_connect(conn: MQTTConnection ref, session_present: Bool) =>\n    // Subscribe to $SYS/# topic upon connecting.\n    _env.out.print(\"> Connected.\")\n    conn.subscribe(\"$SYS/#\")\n\n  fun ref on_message(conn: MQTTConnection ref, packet: MQTTPacket) =>\n    // Print received messages.\n    _env.out.print(packet.topic + \" -- \" + String.from_array(packet.message))\n\n  fun ref on_subscribe(conn: MQTTConnection ref, topic: String, qos: U8) =>\n    // Confirm subscription.\n    _env.out.print(\"> Subscribed to topic '\" + topic + \"'.\")\n\n  fun ref on_error(\n    conn: MQTTConnection ref, err: MQTTError, info: Array[U8] val)\n  =>\n    // Print error.\n    _env.out.print(\"MqttError: \" + err.string())\n\nactor Main\n  new create(env: Env) =>\n    try\n      MQTTConnection(\n        env.root as AmbientAuth,\n        MQTTSubNotify(env),\n        \"localhost\",\n        \"1883\")\n    end\n\n\n\n\nPublic Types\n\u00b6\n\n\n\n\nprimitive MQTTv31\n\n\nprimitive MQTTv311\n\n\ntype MQTTVersion\n\n\nprimitive MQTTUtils\n\n\nprimitive MQTTTopic\n\n\nclass MQTTPacket\n\n\nprimitive MQTTErrorConnectConnected\n\n\nprimitive MQTTErrorConnectSocket\n\n\nprimitive MQTTErrorDisconnectDisconnected\n\n\nprimitive MQTTErrorSubscribeTopic\n\n\nprimitive MQTTErrorSubscribeQoS\n\n\nprimitive MQTTErrorSubscribeConnected\n\n\nprimitive MQTTErrorUnsubscribeTopic\n\n\nprimitive MQTTErrorUnsubscribeConnected\n\n\nprimitive MQTTErrorPublishTopic\n\n\nprimitive MQTTErrorPublishConnected\n\n\nprimitive MQTTErrorConnectFailedRetry\n\n\nprimitive MQTTErrorConnectFailed\n\n\nprimitive MQTTErrorSocketRetry\n\n\nprimitive MQTTErrorSocket\n\n\nprimitive MQTTErrorTLSConfiguration\n\n\nprimitive MQTTErrorTLSAuthentication\n\n\nprimitive MQTTErrorConnectProtocolRetry\n\n\nprimitive MQTTErrorConnectProtocol\n\n\nprimitive MQTTErrorConnectID\n\n\nprimitive MQTTErrorConnectServerRetry\n\n\nprimitive MQTTErrorConnectServer\n\n\nprimitive MQTTErrorConnectAuthentication\n\n\nprimitive MQTTErrorConnectAuthorization\n\n\nprimitive MQTTErrorSubscribeFailure\n\n\nprimitive MQTTErrorServerCode\n\n\nprimitive MQTTErrorUnknownCode\n\n\nprimitive MQTTErrorUnexpectedFormat\n\n\ntype MQTTError\n\n\ninterface MQTTConnectionNotify\n\n\nactor MQTTConnection\n\n\n\n\nPrivate Types\n\u00b6\n\n\n\n\ntrait _MQTTVersionDowngradable\n\n\nclass _MQTTPingTimer\n\n\nclass _MQTTResendTimer\n\n\nclass _MQTTReconnectTimer\n\n\nclass _MQTTConnectionHandler",
            "title": "Package"
        },
        {
            "location": "/mqtt--index/#pony-mqtt",
            "text": "Pony-MQTT is a library implementing an MQTT client. It allows you to connect to\nan MQTT broker and exchange messages through TCP. It complies with the MQTT 3.1\nand 3.1.1 protocols.",
            "title": "Pony-MQTT"
        },
        {
            "location": "/mqtt--index/#usage",
            "text": "Follow this guide to get started on using Pony-MQTT:    Install  pony-stable .    Update your  bundle.json :    {\n  \"type\": \"github\",\n  \"repo\": \"epiceric/pony-mqtt\"\n}    stable fetch  to fetch your dependencies.    Write an application with  use \"mqtt\"  that creates an MQTTConnection actor\nwith a class implementing the MQTTConnectionNotify interface:    use \"mqtt\"\n\nclass iso MyNotify is MQTTConnectionNotify\n  new iso create(...) =>\n    // ...\n\n  fun ref on_connect(conn: MQTTConnection ref, session_present: Bool) =>\n    // ...\n\nactor Main\n  new create(env: Env) =>\n    try\n      MQTTConnection(\n        env.root as AmbientAuth,\n        MyNotify(...),\n        \"localhost\",\n        \"1883\")\n    end   stable env ponyc  to compile your application.",
            "title": "Usage"
        },
        {
            "location": "/mqtt--index/#examples",
            "text": "These are a few simple examples to help you take a look at what you can do with\nPony-MQTT.",
            "title": "Examples"
        },
        {
            "location": "/mqtt--index/#hello-world",
            "text": "Simple enough, this program connects to an MQTT broker, sends a message and\ndisconnects.  use \"mqtt\"\n\nclass iso MQTTHelloWorldNotify is MQTTConnectionNotify\n  // Connects to the broker, sends a message and disconnects.\n  fun ref on_connect(conn: MQTTConnection ref, session_present: Bool) =>\n    conn.publish(MQTTPacket(\"pony\", \"Hello, world!\".array()))\n    conn.disconnect()\n\nactor Main\n  new create(env: Env) =>\n    try\n      MQTTConnection(\n        env.root as AmbientAuth,\n        MQTTHelloWorldNotify,\n        \"localhost\",\n        \"1883\")\n    end",
            "title": "Hello world"
        },
        {
            "location": "/mqtt--index/#subscribe",
            "text": "Connect to a broker and print every message on the  $SYS/#  topics.  use \"mqtt\"\n\nclass iso MQTTSubNotify is MQTTConnectionNotify\n  // Subscribe to the $SYS topic and print every message received.\n  let _env: Env\n\n  new iso create(env: Env) =>\n    _env = env\n\n  fun ref on_connect(conn: MQTTConnection ref, session_present: Bool) =>\n    // Subscribe to $SYS/# topic upon connecting.\n    _env.out.print(\"> Connected.\")\n    conn.subscribe(\"$SYS/#\")\n\n  fun ref on_message(conn: MQTTConnection ref, packet: MQTTPacket) =>\n    // Print received messages.\n    _env.out.print(packet.topic + \" -- \" + String.from_array(packet.message))\n\n  fun ref on_subscribe(conn: MQTTConnection ref, topic: String, qos: U8) =>\n    // Confirm subscription.\n    _env.out.print(\"> Subscribed to topic '\" + topic + \"'.\")\n\n  fun ref on_error(\n    conn: MQTTConnection ref, err: MQTTError, info: Array[U8] val)\n  =>\n    // Print error.\n    _env.out.print(\"MqttError: \" + err.string())\n\nactor Main\n  new create(env: Env) =>\n    try\n      MQTTConnection(\n        env.root as AmbientAuth,\n        MQTTSubNotify(env),\n        \"localhost\",\n        \"1883\")\n    end",
            "title": "Subscribe"
        },
        {
            "location": "/mqtt--index/#public-types",
            "text": "primitive MQTTv31  primitive MQTTv311  type MQTTVersion  primitive MQTTUtils  primitive MQTTTopic  class MQTTPacket  primitive MQTTErrorConnectConnected  primitive MQTTErrorConnectSocket  primitive MQTTErrorDisconnectDisconnected  primitive MQTTErrorSubscribeTopic  primitive MQTTErrorSubscribeQoS  primitive MQTTErrorSubscribeConnected  primitive MQTTErrorUnsubscribeTopic  primitive MQTTErrorUnsubscribeConnected  primitive MQTTErrorPublishTopic  primitive MQTTErrorPublishConnected  primitive MQTTErrorConnectFailedRetry  primitive MQTTErrorConnectFailed  primitive MQTTErrorSocketRetry  primitive MQTTErrorSocket  primitive MQTTErrorTLSConfiguration  primitive MQTTErrorTLSAuthentication  primitive MQTTErrorConnectProtocolRetry  primitive MQTTErrorConnectProtocol  primitive MQTTErrorConnectID  primitive MQTTErrorConnectServerRetry  primitive MQTTErrorConnectServer  primitive MQTTErrorConnectAuthentication  primitive MQTTErrorConnectAuthorization  primitive MQTTErrorSubscribeFailure  primitive MQTTErrorServerCode  primitive MQTTErrorUnknownCode  primitive MQTTErrorUnexpectedFormat  type MQTTError  interface MQTTConnectionNotify  actor MQTTConnection",
            "title": "Public Types"
        },
        {
            "location": "/mqtt--index/#private-types",
            "text": "trait _MQTTVersionDowngradable  class _MQTTPingTimer  class _MQTTResendTimer  class _MQTTReconnectTimer  class _MQTTConnectionHandler",
            "title": "Private Types"
        },
        {
            "location": "/mqtt-MQTTv31/",
            "text": "MQTTv31\n\u00b6\n\n\n[Source]\n\n\nThird version of the MQTT protocol.\n\n\nprimitive val MQTTv31\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTv31 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTv31\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTv31 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTv31\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTv31 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTv31\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTv31"
        },
        {
            "location": "/mqtt-MQTTv31/#mqttv31",
            "text": "[Source]  Third version of the MQTT protocol.  primitive val MQTTv31",
            "title": "MQTTv31"
        },
        {
            "location": "/mqtt-MQTTv31/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTv31/#create",
            "text": "[Source]  new val create()\n: MQTTv31 val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTv31/#returns",
            "text": "MQTTv31  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTv31/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTv31/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTv31 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTv31/#parameters",
            "text": "that:  MQTTv31  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTv31/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTv31/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTv31 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTv31/#parameters_1",
            "text": "that:  MQTTv31  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTv31/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTv311/",
            "text": "MQTTv311\n\u00b6\n\n\n[Source]\n\n\nFourth version of the MQTT protocol. It is also the default version.\n\n\nprimitive val MQTTv311 is\n  _MQTTVersionDowngradable val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_MQTTVersionDowngradable\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTv311 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTv311\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\ndowngrade\n\u00b6\n\n\n[Source]\n\n\nIf this version is unsupported by the broker, try the third version of\nthe protocol.\n\n\nfun box downgrade()\n: (MQTTv31 val | MQTTv311 val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nMQTTv31\n val | \nMQTTv311\n val)\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTv311 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTv311\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTv311 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTv311\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTv311"
        },
        {
            "location": "/mqtt-MQTTv311/#mqttv311",
            "text": "[Source]  Fourth version of the MQTT protocol. It is also the default version.  primitive val MQTTv311 is\n  _MQTTVersionDowngradable val",
            "title": "MQTTv311"
        },
        {
            "location": "/mqtt-MQTTv311/#implements",
            "text": "_MQTTVersionDowngradable  val",
            "title": "Implements"
        },
        {
            "location": "/mqtt-MQTTv311/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTv311/#create",
            "text": "[Source]  new val create()\n: MQTTv311 val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTv311/#returns",
            "text": "MQTTv311  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTv311/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTv311/#downgrade",
            "text": "[Source]  If this version is unsupported by the broker, try the third version of\nthe protocol.  fun box downgrade()\n: (MQTTv31 val | MQTTv311 val)",
            "title": "downgrade"
        },
        {
            "location": "/mqtt-MQTTv311/#returns_1",
            "text": "( MQTTv31  val |  MQTTv311  val)",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTv311/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTv311 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTv311/#parameters",
            "text": "that:  MQTTv311  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTv311/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTv311/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTv311 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTv311/#parameters_1",
            "text": "that:  MQTTv311  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTv311/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTVersion/",
            "text": "MQTTVersion\n\u00b6\n\n\n[Source]\n\n\nA type with all implemented versions of the MQTT protocol as primitives. It\ncan be set by the user when creating a connection with MQTTConnection.\n\n\nUpon receiving an \"invalid version\" CONNACK error from the server with the\n\nretry_connection\n flag set, the connection will automatically try\nreconnection with an older version. If already at the oldest version\n(currently, MQTTv31), it will stop reconnection.\n\n\ntype MQTTVersion is\n  (MQTTv31 val | MQTTv311 val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nMQTTv31\n val | \nMQTTv311\n val)",
            "title": "type MQTTVersion"
        },
        {
            "location": "/mqtt-MQTTVersion/#mqttversion",
            "text": "[Source]  A type with all implemented versions of the MQTT protocol as primitives. It\ncan be set by the user when creating a connection with MQTTConnection.  Upon receiving an \"invalid version\" CONNACK error from the server with the retry_connection  flag set, the connection will automatically try\nreconnection with an older version. If already at the oldest version\n(currently, MQTTv31), it will stop reconnection.  type MQTTVersion is\n  (MQTTv31 val | MQTTv311 val)",
            "title": "MQTTVersion"
        },
        {
            "location": "/mqtt-MQTTVersion/#type-alias-for",
            "text": "( MQTTv31  val |  MQTTv311  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/mqtt-_MQTTVersionDowngradable/",
            "text": "_MQTTVersionDowngradable\n\u00b6\n\n\n[Source]\n\n\nPrivate trait to determine that an MQTT version can be downgraded to a\nprevious version of the protocol.\n\n\ntrait val _MQTTVersionDowngradable\n\n\n\n\nPublic Functions\n\u00b6\n\n\ndowngrade\n\u00b6\n\n\n[Source]\n\n\nReturns the previous version of the MQTT protocol.\n\n\nfun box downgrade()\n: (MQTTv31 val | MQTTv311 val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nMQTTv31\n val | \nMQTTv311\n val)",
            "title": "trait _MQTTVersionDowngradable"
        },
        {
            "location": "/mqtt-_MQTTVersionDowngradable/#_mqttversiondowngradable",
            "text": "[Source]  Private trait to determine that an MQTT version can be downgraded to a\nprevious version of the protocol.  trait val _MQTTVersionDowngradable",
            "title": "_MQTTVersionDowngradable"
        },
        {
            "location": "/mqtt-_MQTTVersionDowngradable/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-_MQTTVersionDowngradable/#downgrade",
            "text": "[Source]  Returns the previous version of the MQTT protocol.  fun box downgrade()\n: (MQTTv31 val | MQTTv311 val)",
            "title": "downgrade"
        },
        {
            "location": "/mqtt-_MQTTVersionDowngradable/#returns",
            "text": "( MQTTv31  val |  MQTTv311  val)",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTUtils/",
            "text": "MQTTUtils\n\u00b6\n\n\n[Source]\n\n\nAn utility to generate intermediate values in MQTTConnection.\n\n\nprimitive val MQTTUtils\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTUtils val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTUtils\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nrandom_string\n\u00b6\n\n\n[Source]\n\n\nGenerates a random string of the specified length with the\nprovided characters.\n\n\nfun box random_string(\n  length: USize val = seq,\n  letters: String val = seq)\n: String iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlength: \nUSize\n val = seq\n\n\nletters: \nString\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nremaining_length\n\u00b6\n\n\n[Source]\n\n\nGenerates an array of bytes in the format specified by the MQTT protocol\nfor the \"Remaining Length\" field, encoding the provided integer.\n\n\nfun box remaining_length(\n  length: USize val)\n: Array[U8 val] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlength: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[\nU8\n val] val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTUtils val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTUtils\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTUtils val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTUtils\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTUtils"
        },
        {
            "location": "/mqtt-MQTTUtils/#mqttutils",
            "text": "[Source]  An utility to generate intermediate values in MQTTConnection.  primitive val MQTTUtils",
            "title": "MQTTUtils"
        },
        {
            "location": "/mqtt-MQTTUtils/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTUtils/#create",
            "text": "[Source]  new val create()\n: MQTTUtils val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTUtils/#returns",
            "text": "MQTTUtils  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTUtils/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTUtils/#random_string",
            "text": "[Source]  Generates a random string of the specified length with the\nprovided characters.  fun box random_string(\n  length: USize val = seq,\n  letters: String val = seq)\n: String iso^",
            "title": "random_string"
        },
        {
            "location": "/mqtt-MQTTUtils/#parameters",
            "text": "length:  USize  val = seq  letters:  String  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTUtils/#returns_1",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTUtils/#remaining_length",
            "text": "[Source]  Generates an array of bytes in the format specified by the MQTT protocol\nfor the \"Remaining Length\" field, encoding the provided integer.  fun box remaining_length(\n  length: USize val)\n: Array[U8 val] val",
            "title": "remaining_length"
        },
        {
            "location": "/mqtt-MQTTUtils/#parameters_1",
            "text": "length:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTUtils/#returns_2",
            "text": "Array [ U8  val] val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTUtils/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTUtils val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTUtils/#parameters_2",
            "text": "that:  MQTTUtils  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTUtils/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTUtils/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTUtils val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTUtils/#parameters_3",
            "text": "that:  MQTTUtils  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTUtils/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTTopic/",
            "text": "MQTTTopic\n\u00b6\n\n\n[Source]\n\n\nAn utility to validate topics upon publishing or subscribing.\n\n\nprimitive val MQTTTopic\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTTopic val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTTopic\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalidate_publish\n\u00b6\n\n\n[Source]\n\n\nValidates a PUBLISH topic, by verifying if it has no wildcard (\n#\n or \n+\n)\nor null characters. Returns \ntrue\n if the topic is valid and \nfalse\n\notherwise.\n\n\nfun tag validate_publish(\n  topic: String val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntopic: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nvalidate_subscribe\n\u00b6\n\n\n[Source]\n\n\nValidates a SUBSCRIBE/UNSUBSCRIBE filter, by verifying if it has wildcards\nproperly positioned between dashes (\n#\n or \n+\n) and no null characters.\nReturns \ntrue\n if the topic is valid and \nfalse\n otherwise.\n\n\nfun tag validate_subscribe(\n  topic: String val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntopic: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmatch_topic\n\u00b6\n\n\n[Source]\n\n\nChecks if the provided PUBLISH topic in \nname\n matches the provided\nSUBSCRIBE/UNSUBSCRIBE filter in \nfilter\n and if they are both valid.\nReturns \ntrue\n if the topic matches the filter and \nfalse\n otherwise.\n\n\nfun tag match_topic(\n  topic: String val,\n  filter: String val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntopic: \nString\n val\n\n\nfilter: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTTopic val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTTopic\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTTopic val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTTopic\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTTopic"
        },
        {
            "location": "/mqtt-MQTTTopic/#mqtttopic",
            "text": "[Source]  An utility to validate topics upon publishing or subscribing.  primitive val MQTTTopic",
            "title": "MQTTTopic"
        },
        {
            "location": "/mqtt-MQTTTopic/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTTopic/#create",
            "text": "[Source]  new val create()\n: MQTTTopic val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTTopic/#returns",
            "text": "MQTTTopic  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTTopic/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTTopic/#validate_publish",
            "text": "[Source]  Validates a PUBLISH topic, by verifying if it has no wildcard ( #  or  + )\nor null characters. Returns  true  if the topic is valid and  false \notherwise.  fun tag validate_publish(\n  topic: String val)\n: Bool val",
            "title": "validate_publish"
        },
        {
            "location": "/mqtt-MQTTTopic/#parameters",
            "text": "topic:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTTopic/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTTopic/#validate_subscribe",
            "text": "[Source]  Validates a SUBSCRIBE/UNSUBSCRIBE filter, by verifying if it has wildcards\nproperly positioned between dashes ( #  or  + ) and no null characters.\nReturns  true  if the topic is valid and  false  otherwise.  fun tag validate_subscribe(\n  topic: String val)\n: Bool val",
            "title": "validate_subscribe"
        },
        {
            "location": "/mqtt-MQTTTopic/#parameters_1",
            "text": "topic:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTTopic/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTTopic/#match_topic",
            "text": "[Source]  Checks if the provided PUBLISH topic in  name  matches the provided\nSUBSCRIBE/UNSUBSCRIBE filter in  filter  and if they are both valid.\nReturns  true  if the topic matches the filter and  false  otherwise.  fun tag match_topic(\n  topic: String val,\n  filter: String val)\n: Bool val",
            "title": "match_topic"
        },
        {
            "location": "/mqtt-MQTTTopic/#parameters_2",
            "text": "topic:  String  val  filter:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTTopic/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTTopic/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTTopic val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTTopic/#parameters_3",
            "text": "that:  MQTTTopic  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTTopic/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTTopic/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTTopic val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTTopic/#parameters_4",
            "text": "that:  MQTTTopic  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTTopic/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTPacket/",
            "text": "MQTTPacket\n\u00b6\n\n\n[Source]\n\n\nAn immutable, sendable packet, which can be published by the client or\nreceived from the server in PUBLISH messages, and if a Will is set upon\nconnection.\n\n\nclass val MQTTPacket\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreates a packet.\n\n\nnew val create(\n  topic': String val,\n  message': Array[U8 val] val,\n  retain': Bool val = seq,\n  qos': U8 val = seq,\n  id': U16 val = seq)\n: MQTTPacket val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntopic': \nString\n val\n\n\nmessage': \nArray\n[\nU8\n val] val\n\n\nretain': \nBool\n val = seq\n\n\nqos': \nU8\n val = seq\n\n\nid': \nU16\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTPacket\n val^\n\n\n\n\n\n\nPublic fields\n\u00b6\n\n\nlet topic: \nString\n val\n\u00b6\n\n\n[Source]\n\n\nThe topic the packet is associated with. Be aware that user-defined topics\nmay not follow the topic name rules of the protocol.\n\n\n\n\nlet message: \nArray\n[\nU8\n val] val\n\u00b6\n\n\n[Source]\n\n\nThe packet's payload.\n\n\n\n\nlet retain: \nBool\n val\n\u00b6\n\n\n[Source]\n\n\nThe RETAIN flag in packets. If set to \ntrue\n, the server must retain the\npacket, sending it to late client subscriptions to the corresponding topic.\n\n\n\n\nlet qos: \nU8\n val\n\u00b6\n\n\n[Source]\n\n\nThe QoS of the packet, i.e. how the protocol guarantees dispatching. There are three possible values:\n\n\n\n\n0 (at most once): The packet is sent only one time, and may be lost.\n\n\n1 (at least once): The package is sent repeatedly until the receiver\nsuccessfully acknowledges it.\n\n\n2 (exactly once): The packet will reach its destination thanks to an MQTT\nhandshake, without loss or duplication.\n\n\n\n\nInvalid values will be automatically set to 0.\n\n\n\n\nlet id: \nU16\n val\n\u00b6\n\n\n[Source]\n\n\nThe packet identifier, used for control between the client and the server.\nIt should not be set by the user when sending a packet, since the value will\nbe overwritten before being sent to the broker.",
            "title": "class MQTTPacket"
        },
        {
            "location": "/mqtt-MQTTPacket/#mqttpacket",
            "text": "[Source]  An immutable, sendable packet, which can be published by the client or\nreceived from the server in PUBLISH messages, and if a Will is set upon\nconnection.  class val MQTTPacket",
            "title": "MQTTPacket"
        },
        {
            "location": "/mqtt-MQTTPacket/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTPacket/#create",
            "text": "[Source]  Creates a packet.  new val create(\n  topic': String val,\n  message': Array[U8 val] val,\n  retain': Bool val = seq,\n  qos': U8 val = seq,\n  id': U16 val = seq)\n: MQTTPacket val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTPacket/#parameters",
            "text": "topic':  String  val  message':  Array [ U8  val] val  retain':  Bool  val = seq  qos':  U8  val = seq  id':  U16  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTPacket/#returns",
            "text": "MQTTPacket  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTPacket/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/mqtt-MQTTPacket/#let-topic-string-val",
            "text": "[Source]  The topic the packet is associated with. Be aware that user-defined topics\nmay not follow the topic name rules of the protocol.",
            "title": "let topic: String val"
        },
        {
            "location": "/mqtt-MQTTPacket/#let-message-array91u8-val93-val",
            "text": "[Source]  The packet's payload.",
            "title": "let message: Array[U8 val] val"
        },
        {
            "location": "/mqtt-MQTTPacket/#let-retain-bool-val",
            "text": "[Source]  The RETAIN flag in packets. If set to  true , the server must retain the\npacket, sending it to late client subscriptions to the corresponding topic.",
            "title": "let retain: Bool val"
        },
        {
            "location": "/mqtt-MQTTPacket/#let-qos-u8-val",
            "text": "[Source]  The QoS of the packet, i.e. how the protocol guarantees dispatching. There are three possible values:   0 (at most once): The packet is sent only one time, and may be lost.  1 (at least once): The package is sent repeatedly until the receiver\nsuccessfully acknowledges it.  2 (exactly once): The packet will reach its destination thanks to an MQTT\nhandshake, without loss or duplication.   Invalid values will be automatically set to 0.",
            "title": "let qos: U8 val"
        },
        {
            "location": "/mqtt-MQTTPacket/#let-id-u16-val",
            "text": "[Source]  The packet identifier, used for control between the client and the server.\nIt should not be set by the user when sending a packet, since the value will\nbe overwritten before being sent to the broker.",
            "title": "let id: U16 val"
        },
        {
            "location": "/mqtt-MQTTErrorConnectConnected/",
            "text": "MQTTErrorConnectConnected\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when a connection is attempted when already connected.\n\n\nprimitive val MQTTErrorConnectConnected\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorConnectConnected val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorConnectConnected\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorConnectConnected val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectConnected\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorConnectConnected val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectConnected\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorConnectConnected"
        },
        {
            "location": "/mqtt-MQTTErrorConnectConnected/#mqtterrorconnectconnected",
            "text": "[Source]  This error is triggered when a connection is attempted when already connected.  primitive val MQTTErrorConnectConnected",
            "title": "MQTTErrorConnectConnected"
        },
        {
            "location": "/mqtt-MQTTErrorConnectConnected/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorConnectConnected/#create",
            "text": "[Source]  new val create()\n: MQTTErrorConnectConnected val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorConnectConnected/#returns",
            "text": "MQTTErrorConnectConnected  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectConnected/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorConnectConnected/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorConnectConnected/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectConnected/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorConnectConnected val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorConnectConnected/#parameters",
            "text": "that:  MQTTErrorConnectConnected  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectConnected/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectConnected/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorConnectConnected val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorConnectConnected/#parameters_1",
            "text": "that:  MQTTErrorConnectConnected  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectConnected/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectSocket/",
            "text": "MQTTErrorConnectSocket\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when a connection is attempted without a previous TCP\nconnection.\n\n\nprimitive val MQTTErrorConnectSocket\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorConnectSocket val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorConnectSocket\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorConnectSocket val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectSocket\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorConnectSocket val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectSocket\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorConnectSocket"
        },
        {
            "location": "/mqtt-MQTTErrorConnectSocket/#mqtterrorconnectsocket",
            "text": "[Source]  This error is triggered when a connection is attempted without a previous TCP\nconnection.  primitive val MQTTErrorConnectSocket",
            "title": "MQTTErrorConnectSocket"
        },
        {
            "location": "/mqtt-MQTTErrorConnectSocket/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorConnectSocket/#create",
            "text": "[Source]  new val create()\n: MQTTErrorConnectSocket val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorConnectSocket/#returns",
            "text": "MQTTErrorConnectSocket  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectSocket/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorConnectSocket/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorConnectSocket/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectSocket/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorConnectSocket val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorConnectSocket/#parameters",
            "text": "that:  MQTTErrorConnectSocket  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectSocket/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectSocket/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorConnectSocket val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorConnectSocket/#parameters_1",
            "text": "that:  MQTTErrorConnectSocket  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectSocket/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorDisconnectDisconnected/",
            "text": "MQTTErrorDisconnectDisconnected\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when a disconnection is attempted without a previous\nTCP connection.\n\n\nprimitive val MQTTErrorDisconnectDisconnected\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorDisconnectDisconnected val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorDisconnectDisconnected\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorDisconnectDisconnected val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorDisconnectDisconnected\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorDisconnectDisconnected val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorDisconnectDisconnected\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorDisconnectDisconnected"
        },
        {
            "location": "/mqtt-MQTTErrorDisconnectDisconnected/#mqtterrordisconnectdisconnected",
            "text": "[Source]  This error is triggered when a disconnection is attempted without a previous\nTCP connection.  primitive val MQTTErrorDisconnectDisconnected",
            "title": "MQTTErrorDisconnectDisconnected"
        },
        {
            "location": "/mqtt-MQTTErrorDisconnectDisconnected/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorDisconnectDisconnected/#create",
            "text": "[Source]  new val create()\n: MQTTErrorDisconnectDisconnected val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorDisconnectDisconnected/#returns",
            "text": "MQTTErrorDisconnectDisconnected  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorDisconnectDisconnected/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorDisconnectDisconnected/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorDisconnectDisconnected/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorDisconnectDisconnected/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorDisconnectDisconnected val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorDisconnectDisconnected/#parameters",
            "text": "that:  MQTTErrorDisconnectDisconnected  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorDisconnectDisconnected/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorDisconnectDisconnected/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorDisconnectDisconnected val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorDisconnectDisconnected/#parameters_1",
            "text": "that:  MQTTErrorDisconnectDisconnected  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorDisconnectDisconnected/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeTopic/",
            "text": "MQTTErrorSubscribeTopic\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when subscribing with an invalid topic filter.\n\n\nprimitive val MQTTErrorSubscribeTopic\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorSubscribeTopic val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorSubscribeTopic\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorSubscribeTopic val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorSubscribeTopic\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorSubscribeTopic val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorSubscribeTopic\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorSubscribeTopic"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeTopic/#mqtterrorsubscribetopic",
            "text": "[Source]  This error is triggered when subscribing with an invalid topic filter.  primitive val MQTTErrorSubscribeTopic",
            "title": "MQTTErrorSubscribeTopic"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeTopic/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeTopic/#create",
            "text": "[Source]  new val create()\n: MQTTErrorSubscribeTopic val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeTopic/#returns",
            "text": "MQTTErrorSubscribeTopic  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeTopic/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeTopic/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeTopic/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeTopic/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorSubscribeTopic val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeTopic/#parameters",
            "text": "that:  MQTTErrorSubscribeTopic  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeTopic/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeTopic/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorSubscribeTopic val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeTopic/#parameters_1",
            "text": "that:  MQTTErrorSubscribeTopic  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeTopic/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeQoS/",
            "text": "MQTTErrorSubscribeQoS\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when subscribing with an invalid QoS value.\n\n\nprimitive val MQTTErrorSubscribeQoS\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorSubscribeQoS val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorSubscribeQoS\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorSubscribeQoS val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorSubscribeQoS\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorSubscribeQoS val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorSubscribeQoS\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorSubscribeQoS"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeQoS/#mqtterrorsubscribeqos",
            "text": "[Source]  This error is triggered when subscribing with an invalid QoS value.  primitive val MQTTErrorSubscribeQoS",
            "title": "MQTTErrorSubscribeQoS"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeQoS/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeQoS/#create",
            "text": "[Source]  new val create()\n: MQTTErrorSubscribeQoS val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeQoS/#returns",
            "text": "MQTTErrorSubscribeQoS  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeQoS/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeQoS/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeQoS/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeQoS/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorSubscribeQoS val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeQoS/#parameters",
            "text": "that:  MQTTErrorSubscribeQoS  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeQoS/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeQoS/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorSubscribeQoS val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeQoS/#parameters_1",
            "text": "that:  MQTTErrorSubscribeQoS  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeQoS/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeConnected/",
            "text": "MQTTErrorSubscribeConnected\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when subscribing without a previous TCP connection.\n\n\nprimitive val MQTTErrorSubscribeConnected\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorSubscribeConnected val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorSubscribeConnected\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorSubscribeConnected val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorSubscribeConnected\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorSubscribeConnected val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorSubscribeConnected\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorSubscribeConnected"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeConnected/#mqtterrorsubscribeconnected",
            "text": "[Source]  This error is triggered when subscribing without a previous TCP connection.  primitive val MQTTErrorSubscribeConnected",
            "title": "MQTTErrorSubscribeConnected"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeConnected/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeConnected/#create",
            "text": "[Source]  new val create()\n: MQTTErrorSubscribeConnected val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeConnected/#returns",
            "text": "MQTTErrorSubscribeConnected  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeConnected/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeConnected/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeConnected/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeConnected/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorSubscribeConnected val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeConnected/#parameters",
            "text": "that:  MQTTErrorSubscribeConnected  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeConnected/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeConnected/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorSubscribeConnected val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeConnected/#parameters_1",
            "text": "that:  MQTTErrorSubscribeConnected  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeConnected/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeTopic/",
            "text": "MQTTErrorUnsubscribeTopic\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when unsubscribing with an invalid topic filter.\n\n\nprimitive val MQTTErrorUnsubscribeTopic\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorUnsubscribeTopic val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorUnsubscribeTopic\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorUnsubscribeTopic val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorUnsubscribeTopic\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorUnsubscribeTopic val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorUnsubscribeTopic\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorUnsubscribeTopic"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeTopic/#mqtterrorunsubscribetopic",
            "text": "[Source]  This error is triggered when unsubscribing with an invalid topic filter.  primitive val MQTTErrorUnsubscribeTopic",
            "title": "MQTTErrorUnsubscribeTopic"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeTopic/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeTopic/#create",
            "text": "[Source]  new val create()\n: MQTTErrorUnsubscribeTopic val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeTopic/#returns",
            "text": "MQTTErrorUnsubscribeTopic  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeTopic/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeTopic/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeTopic/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeTopic/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorUnsubscribeTopic val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeTopic/#parameters",
            "text": "that:  MQTTErrorUnsubscribeTopic  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeTopic/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeTopic/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorUnsubscribeTopic val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeTopic/#parameters_1",
            "text": "that:  MQTTErrorUnsubscribeTopic  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeTopic/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeConnected/",
            "text": "MQTTErrorUnsubscribeConnected\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when unsubscribing without a previous TCP connection.\n\n\nprimitive val MQTTErrorUnsubscribeConnected\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorUnsubscribeConnected val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorUnsubscribeConnected\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorUnsubscribeConnected val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorUnsubscribeConnected\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorUnsubscribeConnected val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorUnsubscribeConnected\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorUnsubscribeConnected"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeConnected/#mqtterrorunsubscribeconnected",
            "text": "[Source]  This error is triggered when unsubscribing without a previous TCP connection.  primitive val MQTTErrorUnsubscribeConnected",
            "title": "MQTTErrorUnsubscribeConnected"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeConnected/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeConnected/#create",
            "text": "[Source]  new val create()\n: MQTTErrorUnsubscribeConnected val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeConnected/#returns",
            "text": "MQTTErrorUnsubscribeConnected  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeConnected/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeConnected/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeConnected/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeConnected/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorUnsubscribeConnected val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeConnected/#parameters",
            "text": "that:  MQTTErrorUnsubscribeConnected  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeConnected/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeConnected/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorUnsubscribeConnected val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeConnected/#parameters_1",
            "text": "that:  MQTTErrorUnsubscribeConnected  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorUnsubscribeConnected/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorPublishTopic/",
            "text": "MQTTErrorPublishTopic\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when publishing with an invalid topic filter.\n\n\nprimitive val MQTTErrorPublishTopic\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorPublishTopic val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorPublishTopic\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorPublishTopic val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorPublishTopic\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorPublishTopic val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorPublishTopic\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorPublishTopic"
        },
        {
            "location": "/mqtt-MQTTErrorPublishTopic/#mqtterrorpublishtopic",
            "text": "[Source]  This error is triggered when publishing with an invalid topic filter.  primitive val MQTTErrorPublishTopic",
            "title": "MQTTErrorPublishTopic"
        },
        {
            "location": "/mqtt-MQTTErrorPublishTopic/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorPublishTopic/#create",
            "text": "[Source]  new val create()\n: MQTTErrorPublishTopic val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorPublishTopic/#returns",
            "text": "MQTTErrorPublishTopic  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorPublishTopic/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorPublishTopic/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorPublishTopic/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorPublishTopic/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorPublishTopic val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorPublishTopic/#parameters",
            "text": "that:  MQTTErrorPublishTopic  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorPublishTopic/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorPublishTopic/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorPublishTopic val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorPublishTopic/#parameters_1",
            "text": "that:  MQTTErrorPublishTopic  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorPublishTopic/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorPublishConnected/",
            "text": "MQTTErrorPublishConnected\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when publishing without a previous TCP connection.\n\n\nprimitive val MQTTErrorPublishConnected\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorPublishConnected val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorPublishConnected\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorPublishConnected val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorPublishConnected\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorPublishConnected val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorPublishConnected\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorPublishConnected"
        },
        {
            "location": "/mqtt-MQTTErrorPublishConnected/#mqtterrorpublishconnected",
            "text": "[Source]  This error is triggered when publishing without a previous TCP connection.  primitive val MQTTErrorPublishConnected",
            "title": "MQTTErrorPublishConnected"
        },
        {
            "location": "/mqtt-MQTTErrorPublishConnected/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorPublishConnected/#create",
            "text": "[Source]  new val create()\n: MQTTErrorPublishConnected val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorPublishConnected/#returns",
            "text": "MQTTErrorPublishConnected  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorPublishConnected/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorPublishConnected/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorPublishConnected/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorPublishConnected/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorPublishConnected val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorPublishConnected/#parameters",
            "text": "that:  MQTTErrorPublishConnected  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorPublishConnected/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorPublishConnected/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorPublishConnected val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorPublishConnected/#parameters_1",
            "text": "that:  MQTTErrorPublishConnected  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorPublishConnected/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailedRetry/",
            "text": "MQTTErrorConnectFailedRetry\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when there was a TCP connection error.\n\n\nThe connection actor will automatically try to reconnect.\n\n\nprimitive val MQTTErrorConnectFailedRetry\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorConnectFailedRetry val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorConnectFailedRetry\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorConnectFailedRetry val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectFailedRetry\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorConnectFailedRetry val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectFailedRetry\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorConnectFailedRetry"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailedRetry/#mqtterrorconnectfailedretry",
            "text": "[Source]  This error is triggered when there was a TCP connection error.  The connection actor will automatically try to reconnect.  primitive val MQTTErrorConnectFailedRetry",
            "title": "MQTTErrorConnectFailedRetry"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailedRetry/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailedRetry/#create",
            "text": "[Source]  new val create()\n: MQTTErrorConnectFailedRetry val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailedRetry/#returns",
            "text": "MQTTErrorConnectFailedRetry  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailedRetry/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailedRetry/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailedRetry/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailedRetry/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorConnectFailedRetry val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailedRetry/#parameters",
            "text": "that:  MQTTErrorConnectFailedRetry  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailedRetry/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailedRetry/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorConnectFailedRetry val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailedRetry/#parameters_1",
            "text": "that:  MQTTErrorConnectFailedRetry  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailedRetry/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailed/",
            "text": "MQTTErrorConnectFailed\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when there was a TCP connection error.\n\n\nThe connection actor will automatically end execution.\n\n\nprimitive val MQTTErrorConnectFailed\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorConnectFailed val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorConnectFailed\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorConnectFailed val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectFailed\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorConnectFailed val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectFailed\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorConnectFailed"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailed/#mqtterrorconnectfailed",
            "text": "[Source]  This error is triggered when there was a TCP connection error.  The connection actor will automatically end execution.  primitive val MQTTErrorConnectFailed",
            "title": "MQTTErrorConnectFailed"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailed/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailed/#create",
            "text": "[Source]  new val create()\n: MQTTErrorConnectFailed val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailed/#returns",
            "text": "MQTTErrorConnectFailed  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailed/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailed/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailed/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailed/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorConnectFailed val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailed/#parameters",
            "text": "that:  MQTTErrorConnectFailed  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailed/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailed/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorConnectFailed val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailed/#parameters_1",
            "text": "that:  MQTTErrorConnectFailed  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectFailed/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSocketRetry/",
            "text": "MQTTErrorSocketRetry\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when the TCP connection was closed by the remote\nserver.\n\n\nThe connection actor will automatically try to reconnect.\n\n\nprimitive val MQTTErrorSocketRetry\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorSocketRetry val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorSocketRetry\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorSocketRetry val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorSocketRetry\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorSocketRetry val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorSocketRetry\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorSocketRetry"
        },
        {
            "location": "/mqtt-MQTTErrorSocketRetry/#mqtterrorsocketretry",
            "text": "[Source]  This error is triggered when the TCP connection was closed by the remote\nserver.  The connection actor will automatically try to reconnect.  primitive val MQTTErrorSocketRetry",
            "title": "MQTTErrorSocketRetry"
        },
        {
            "location": "/mqtt-MQTTErrorSocketRetry/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorSocketRetry/#create",
            "text": "[Source]  new val create()\n: MQTTErrorSocketRetry val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorSocketRetry/#returns",
            "text": "MQTTErrorSocketRetry  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSocketRetry/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorSocketRetry/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorSocketRetry/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSocketRetry/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorSocketRetry val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorSocketRetry/#parameters",
            "text": "that:  MQTTErrorSocketRetry  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorSocketRetry/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSocketRetry/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorSocketRetry val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorSocketRetry/#parameters_1",
            "text": "that:  MQTTErrorSocketRetry  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorSocketRetry/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSocket/",
            "text": "MQTTErrorSocket\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when the TCP connection was closed by the remote\nserver.\n\n\nThe connection actor will automatically end execution.\n\n\nprimitive val MQTTErrorSocket\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorSocket val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorSocket\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorSocket val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorSocket\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorSocket val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorSocket\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorSocket"
        },
        {
            "location": "/mqtt-MQTTErrorSocket/#mqtterrorsocket",
            "text": "[Source]  This error is triggered when the TCP connection was closed by the remote\nserver.  The connection actor will automatically end execution.  primitive val MQTTErrorSocket",
            "title": "MQTTErrorSocket"
        },
        {
            "location": "/mqtt-MQTTErrorSocket/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorSocket/#create",
            "text": "[Source]  new val create()\n: MQTTErrorSocket val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorSocket/#returns",
            "text": "MQTTErrorSocket  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSocket/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorSocket/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorSocket/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSocket/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorSocket val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorSocket/#parameters",
            "text": "that:  MQTTErrorSocket  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorSocket/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSocket/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorSocket val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorSocket/#parameters_1",
            "text": "that:  MQTTErrorSocket  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorSocket/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorTLSConfiguration/",
            "text": "MQTTErrorTLSConfiguration\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when an SSL client could not be created due to bad\nconfiguration.\n\n\nThe connection actor will automatically end execution.\n\n\nprimitive val MQTTErrorTLSConfiguration\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorTLSConfiguration val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorTLSConfiguration\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorTLSConfiguration val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorTLSConfiguration\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorTLSConfiguration val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorTLSConfiguration\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorTLSConfiguration"
        },
        {
            "location": "/mqtt-MQTTErrorTLSConfiguration/#mqtterrortlsconfiguration",
            "text": "[Source]  This error is triggered when an SSL client could not be created due to bad\nconfiguration.  The connection actor will automatically end execution.  primitive val MQTTErrorTLSConfiguration",
            "title": "MQTTErrorTLSConfiguration"
        },
        {
            "location": "/mqtt-MQTTErrorTLSConfiguration/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorTLSConfiguration/#create",
            "text": "[Source]  new val create()\n: MQTTErrorTLSConfiguration val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorTLSConfiguration/#returns",
            "text": "MQTTErrorTLSConfiguration  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorTLSConfiguration/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorTLSConfiguration/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorTLSConfiguration/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorTLSConfiguration/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorTLSConfiguration val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorTLSConfiguration/#parameters",
            "text": "that:  MQTTErrorTLSConfiguration  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorTLSConfiguration/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorTLSConfiguration/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorTLSConfiguration val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorTLSConfiguration/#parameters_1",
            "text": "that:  MQTTErrorTLSConfiguration  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorTLSConfiguration/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorTLSAuthentication/",
            "text": "MQTTErrorTLSAuthentication\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when the SSL credentials for authentication are\ninvalid.\n\n\nThe connection actor will automatically end execution.\n\n\nprimitive val MQTTErrorTLSAuthentication\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorTLSAuthentication val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorTLSAuthentication\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorTLSAuthentication val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorTLSAuthentication\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorTLSAuthentication val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorTLSAuthentication\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorTLSAuthentication"
        },
        {
            "location": "/mqtt-MQTTErrorTLSAuthentication/#mqtterrortlsauthentication",
            "text": "[Source]  This error is triggered when the SSL credentials for authentication are\ninvalid.  The connection actor will automatically end execution.  primitive val MQTTErrorTLSAuthentication",
            "title": "MQTTErrorTLSAuthentication"
        },
        {
            "location": "/mqtt-MQTTErrorTLSAuthentication/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorTLSAuthentication/#create",
            "text": "[Source]  new val create()\n: MQTTErrorTLSAuthentication val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorTLSAuthentication/#returns",
            "text": "MQTTErrorTLSAuthentication  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorTLSAuthentication/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorTLSAuthentication/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorTLSAuthentication/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorTLSAuthentication/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorTLSAuthentication val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorTLSAuthentication/#parameters",
            "text": "that:  MQTTErrorTLSAuthentication  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorTLSAuthentication/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorTLSAuthentication/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorTLSAuthentication val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorTLSAuthentication/#parameters_1",
            "text": "that:  MQTTErrorTLSAuthentication  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorTLSAuthentication/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocolRetry/",
            "text": "MQTTErrorConnectProtocolRetry\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when the broker does not accept the current protocol\nversion.\n\n\nThe connection actor will automatically downgrade to a lower protocol version\nand try to reconnect.\n\n\nprimitive val MQTTErrorConnectProtocolRetry\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorConnectProtocolRetry val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorConnectProtocolRetry\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorConnectProtocolRetry val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectProtocolRetry\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorConnectProtocolRetry val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectProtocolRetry\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorConnectProtocolRetry"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocolRetry/#mqtterrorconnectprotocolretry",
            "text": "[Source]  This error is triggered when the broker does not accept the current protocol\nversion.  The connection actor will automatically downgrade to a lower protocol version\nand try to reconnect.  primitive val MQTTErrorConnectProtocolRetry",
            "title": "MQTTErrorConnectProtocolRetry"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocolRetry/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocolRetry/#create",
            "text": "[Source]  new val create()\n: MQTTErrorConnectProtocolRetry val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocolRetry/#returns",
            "text": "MQTTErrorConnectProtocolRetry  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocolRetry/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocolRetry/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocolRetry/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocolRetry/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorConnectProtocolRetry val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocolRetry/#parameters",
            "text": "that:  MQTTErrorConnectProtocolRetry  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocolRetry/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocolRetry/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorConnectProtocolRetry val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocolRetry/#parameters_1",
            "text": "that:  MQTTErrorConnectProtocolRetry  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocolRetry/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocol/",
            "text": "MQTTErrorConnectProtocol\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when the broker does not accept the current protocol\nversion.\n\n\nThe connection actor will automatically end execution.\n\n\nprimitive val MQTTErrorConnectProtocol\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorConnectProtocol val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorConnectProtocol\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorConnectProtocol val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectProtocol\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorConnectProtocol val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectProtocol\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorConnectProtocol"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocol/#mqtterrorconnectprotocol",
            "text": "[Source]  This error is triggered when the broker does not accept the current protocol\nversion.  The connection actor will automatically end execution.  primitive val MQTTErrorConnectProtocol",
            "title": "MQTTErrorConnectProtocol"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocol/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocol/#create",
            "text": "[Source]  new val create()\n: MQTTErrorConnectProtocol val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocol/#returns",
            "text": "MQTTErrorConnectProtocol  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocol/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocol/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocol/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocol/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorConnectProtocol val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocol/#parameters",
            "text": "that:  MQTTErrorConnectProtocol  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocol/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocol/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorConnectProtocol val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocol/#parameters_1",
            "text": "that:  MQTTErrorConnectProtocol  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectProtocol/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectID/",
            "text": "MQTTErrorConnectID\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when the client ID is invalid.\n\n\nThe connection actor will automatically end execution.\n\n\nprimitive val MQTTErrorConnectID\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorConnectID val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorConnectID\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorConnectID val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectID\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorConnectID val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectID\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorConnectID"
        },
        {
            "location": "/mqtt-MQTTErrorConnectID/#mqtterrorconnectid",
            "text": "[Source]  This error is triggered when the client ID is invalid.  The connection actor will automatically end execution.  primitive val MQTTErrorConnectID",
            "title": "MQTTErrorConnectID"
        },
        {
            "location": "/mqtt-MQTTErrorConnectID/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorConnectID/#create",
            "text": "[Source]  new val create()\n: MQTTErrorConnectID val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorConnectID/#returns",
            "text": "MQTTErrorConnectID  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectID/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorConnectID/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorConnectID/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectID/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorConnectID val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorConnectID/#parameters",
            "text": "that:  MQTTErrorConnectID  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectID/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectID/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorConnectID val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorConnectID/#parameters_1",
            "text": "that:  MQTTErrorConnectID  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectID/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServerRetry/",
            "text": "MQTTErrorConnectServerRetry\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when the MQTT server is currently unavailable.\n\n\nThe connection actor will automatically try to reconnect.\n\n\nprimitive val MQTTErrorConnectServerRetry\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorConnectServerRetry val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorConnectServerRetry\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorConnectServerRetry val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectServerRetry\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorConnectServerRetry val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectServerRetry\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorConnectServerRetry"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServerRetry/#mqtterrorconnectserverretry",
            "text": "[Source]  This error is triggered when the MQTT server is currently unavailable.  The connection actor will automatically try to reconnect.  primitive val MQTTErrorConnectServerRetry",
            "title": "MQTTErrorConnectServerRetry"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServerRetry/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServerRetry/#create",
            "text": "[Source]  new val create()\n: MQTTErrorConnectServerRetry val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServerRetry/#returns",
            "text": "MQTTErrorConnectServerRetry  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServerRetry/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServerRetry/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServerRetry/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServerRetry/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorConnectServerRetry val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServerRetry/#parameters",
            "text": "that:  MQTTErrorConnectServerRetry  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServerRetry/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServerRetry/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorConnectServerRetry val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServerRetry/#parameters_1",
            "text": "that:  MQTTErrorConnectServerRetry  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServerRetry/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServer/",
            "text": "MQTTErrorConnectServer\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when the MQTT server is currently unavailable.\n\n\nThe connection actor will automatically end execution.\n\n\nprimitive val MQTTErrorConnectServer\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorConnectServer val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorConnectServer\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorConnectServer val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectServer\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorConnectServer val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectServer\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorConnectServer"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServer/#mqtterrorconnectserver",
            "text": "[Source]  This error is triggered when the MQTT server is currently unavailable.  The connection actor will automatically end execution.  primitive val MQTTErrorConnectServer",
            "title": "MQTTErrorConnectServer"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServer/#create",
            "text": "[Source]  new val create()\n: MQTTErrorConnectServer val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServer/#returns",
            "text": "MQTTErrorConnectServer  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServer/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServer/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServer/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServer/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorConnectServer val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServer/#parameters",
            "text": "that:  MQTTErrorConnectServer  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServer/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServer/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorConnectServer val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServer/#parameters_1",
            "text": "that:  MQTTErrorConnectServer  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectServer/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthentication/",
            "text": "MQTTErrorConnectAuthentication\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when either the username or the password for the MQTT\nconnection are invalid.\n\n\nThe connection actor will automatically end execution.\n\n\nprimitive val MQTTErrorConnectAuthentication\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorConnectAuthentication val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorConnectAuthentication\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorConnectAuthentication val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectAuthentication\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorConnectAuthentication val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectAuthentication\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorConnectAuthentication"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthentication/#mqtterrorconnectauthentication",
            "text": "[Source]  This error is triggered when either the username or the password for the MQTT\nconnection are invalid.  The connection actor will automatically end execution.  primitive val MQTTErrorConnectAuthentication",
            "title": "MQTTErrorConnectAuthentication"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthentication/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthentication/#create",
            "text": "[Source]  new val create()\n: MQTTErrorConnectAuthentication val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthentication/#returns",
            "text": "MQTTErrorConnectAuthentication  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthentication/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthentication/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthentication/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthentication/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorConnectAuthentication val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthentication/#parameters",
            "text": "that:  MQTTErrorConnectAuthentication  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthentication/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthentication/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorConnectAuthentication val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthentication/#parameters_1",
            "text": "that:  MQTTErrorConnectAuthentication  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthentication/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthorization/",
            "text": "MQTTErrorConnectAuthorization\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when either the client is unauthorized by the broker.\n\n\nThe connection actor will automatically end execution.\n\n\nprimitive val MQTTErrorConnectAuthorization\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorConnectAuthorization val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorConnectAuthorization\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorConnectAuthorization val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectAuthorization\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorConnectAuthorization val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorConnectAuthorization\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorConnectAuthorization"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthorization/#mqtterrorconnectauthorization",
            "text": "[Source]  This error is triggered when either the client is unauthorized by the broker.  The connection actor will automatically end execution.  primitive val MQTTErrorConnectAuthorization",
            "title": "MQTTErrorConnectAuthorization"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthorization/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthorization/#create",
            "text": "[Source]  new val create()\n: MQTTErrorConnectAuthorization val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthorization/#returns",
            "text": "MQTTErrorConnectAuthorization  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthorization/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthorization/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthorization/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthorization/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorConnectAuthorization val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthorization/#parameters",
            "text": "that:  MQTTErrorConnectAuthorization  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthorization/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthorization/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorConnectAuthorization val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthorization/#parameters_1",
            "text": "that:  MQTTErrorConnectAuthorization  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorConnectAuthorization/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeFailure/",
            "text": "MQTTErrorSubscribeFailure\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when the subscription to a certain topic filter is\ndenied by the server.\n\n\nThe additional info array will contain the failed subscription topic.\n\n\nprimitive val MQTTErrorSubscribeFailure\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorSubscribeFailure val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorSubscribeFailure\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorSubscribeFailure val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorSubscribeFailure\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorSubscribeFailure val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorSubscribeFailure\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorSubscribeFailure"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeFailure/#mqtterrorsubscribefailure",
            "text": "[Source]  This error is triggered when the subscription to a certain topic filter is\ndenied by the server.  The additional info array will contain the failed subscription topic.  primitive val MQTTErrorSubscribeFailure",
            "title": "MQTTErrorSubscribeFailure"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeFailure/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeFailure/#create",
            "text": "[Source]  new val create()\n: MQTTErrorSubscribeFailure val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeFailure/#returns",
            "text": "MQTTErrorSubscribeFailure  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeFailure/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeFailure/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeFailure/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeFailure/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorSubscribeFailure val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeFailure/#parameters",
            "text": "that:  MQTTErrorSubscribeFailure  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeFailure/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeFailure/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorSubscribeFailure val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeFailure/#parameters_1",
            "text": "that:  MQTTErrorSubscribeFailure  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorSubscribeFailure/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorServerCode/",
            "text": "MQTTErrorServerCode\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when a server control code (such as CONNECT or\nSUBSCRIBE) is sent to the client.\n\n\nThe connection actor will automatically end execution.\n\n\nThe additional info array will contain the control code string bytes.\n\n\nprimitive val MQTTErrorServerCode\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorServerCode val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorServerCode\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorServerCode val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorServerCode\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorServerCode val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorServerCode\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorServerCode"
        },
        {
            "location": "/mqtt-MQTTErrorServerCode/#mqtterrorservercode",
            "text": "[Source]  This error is triggered when a server control code (such as CONNECT or\nSUBSCRIBE) is sent to the client.  The connection actor will automatically end execution.  The additional info array will contain the control code string bytes.  primitive val MQTTErrorServerCode",
            "title": "MQTTErrorServerCode"
        },
        {
            "location": "/mqtt-MQTTErrorServerCode/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorServerCode/#create",
            "text": "[Source]  new val create()\n: MQTTErrorServerCode val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorServerCode/#returns",
            "text": "MQTTErrorServerCode  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorServerCode/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorServerCode/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorServerCode/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorServerCode/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorServerCode val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorServerCode/#parameters",
            "text": "that:  MQTTErrorServerCode  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorServerCode/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorServerCode/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorServerCode val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorServerCode/#parameters_1",
            "text": "that:  MQTTErrorServerCode  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorServerCode/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorUnknownCode/",
            "text": "MQTTErrorUnknownCode\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when an unknown control code is sent to the client.\n\n\nThe connection actor will automatically end execution.\n\n\nThe additional info array will contain the control code byte.\n\n\nprimitive val MQTTErrorUnknownCode\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorUnknownCode val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorUnknownCode\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorUnknownCode val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorUnknownCode\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorUnknownCode val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorUnknownCode\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorUnknownCode"
        },
        {
            "location": "/mqtt-MQTTErrorUnknownCode/#mqtterrorunknowncode",
            "text": "[Source]  This error is triggered when an unknown control code is sent to the client.  The connection actor will automatically end execution.  The additional info array will contain the control code byte.  primitive val MQTTErrorUnknownCode",
            "title": "MQTTErrorUnknownCode"
        },
        {
            "location": "/mqtt-MQTTErrorUnknownCode/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorUnknownCode/#create",
            "text": "[Source]  new val create()\n: MQTTErrorUnknownCode val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorUnknownCode/#returns",
            "text": "MQTTErrorUnknownCode  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorUnknownCode/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorUnknownCode/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorUnknownCode/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorUnknownCode/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorUnknownCode val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorUnknownCode/#parameters",
            "text": "that:  MQTTErrorUnknownCode  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorUnknownCode/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorUnknownCode/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorUnknownCode val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorUnknownCode/#parameters_1",
            "text": "that:  MQTTErrorUnknownCode  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorUnknownCode/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorUnexpectedFormat/",
            "text": "MQTTErrorUnexpectedFormat\n\u00b6\n\n\n[Source]\n\n\nThis error is triggered when there is an error when parsing a packet.\n\n\nThe connection actor will automatically end execution.\n\n\nThe additional info array will contain the bytes of the failed parsed packet.\n\n\nprimitive val MQTTErrorUnexpectedFormat\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MQTTErrorUnexpectedFormat val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTErrorUnexpectedFormat\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MQTTErrorUnexpectedFormat val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorUnexpectedFormat\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MQTTErrorUnexpectedFormat val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMQTTErrorUnexpectedFormat\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MQTTErrorUnexpectedFormat"
        },
        {
            "location": "/mqtt-MQTTErrorUnexpectedFormat/#mqtterrorunexpectedformat",
            "text": "[Source]  This error is triggered when there is an error when parsing a packet.  The connection actor will automatically end execution.  The additional info array will contain the bytes of the failed parsed packet.  primitive val MQTTErrorUnexpectedFormat",
            "title": "MQTTErrorUnexpectedFormat"
        },
        {
            "location": "/mqtt-MQTTErrorUnexpectedFormat/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTErrorUnexpectedFormat/#create",
            "text": "[Source]  new val create()\n: MQTTErrorUnexpectedFormat val^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTErrorUnexpectedFormat/#returns",
            "text": "MQTTErrorUnexpectedFormat  val^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorUnexpectedFormat/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTErrorUnexpectedFormat/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/mqtt-MQTTErrorUnexpectedFormat/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorUnexpectedFormat/#eq",
            "text": "[Source]  fun box eq(\n  that: MQTTErrorUnexpectedFormat val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/mqtt-MQTTErrorUnexpectedFormat/#parameters",
            "text": "that:  MQTTErrorUnexpectedFormat  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorUnexpectedFormat/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTErrorUnexpectedFormat/#ne",
            "text": "[Source]  fun box ne(\n  that: MQTTErrorUnexpectedFormat val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/mqtt-MQTTErrorUnexpectedFormat/#parameters_1",
            "text": "that:  MQTTErrorUnexpectedFormat  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTErrorUnexpectedFormat/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTError/",
            "text": "MQTTError\n\u00b6\n\n\n[Source]\n\n\nA type for all the possible errors raised by the connection to the notify\nclass. Depending on the type of error, the user may choose to handle or ignore\nthem.\n\n\ntype MQTTError is\n  (MQTTErrorConnectConnected val | MQTTErrorConnectSocket val | MQTTErrorDisconnectDisconnected val | MQTTErrorSubscribeTopic val | MQTTErrorSubscribeQoS val | MQTTErrorSubscribeConnected val | MQTTErrorUnsubscribeTopic val | MQTTErrorUnsubscribeConnected val | MQTTErrorPublishTopic val | MQTTErrorPublishConnected val | MQTTErrorConnectFailedRetry val | MQTTErrorConnectFailed val | MQTTErrorSocketRetry val | MQTTErrorSocket val | MQTTErrorTLSConfiguration val | MQTTErrorTLSAuthentication val | MQTTErrorConnectProtocolRetry val | MQTTErrorConnectProtocol val | MQTTErrorConnectID val | MQTTErrorConnectServerRetry val | MQTTErrorConnectServer val | MQTTErrorConnectAuthentication val | MQTTErrorConnectAuthorization val | MQTTErrorSubscribeFailure val | MQTTErrorServerCode val | MQTTErrorUnknownCode val | MQTTErrorUnexpectedFormat val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nMQTTErrorConnectConnected\n val | \nMQTTErrorConnectSocket\n val | \nMQTTErrorDisconnectDisconnected\n val | \nMQTTErrorSubscribeTopic\n val | \nMQTTErrorSubscribeQoS\n val | \nMQTTErrorSubscribeConnected\n val | \nMQTTErrorUnsubscribeTopic\n val | \nMQTTErrorUnsubscribeConnected\n val | \nMQTTErrorPublishTopic\n val | \nMQTTErrorPublishConnected\n val | \nMQTTErrorConnectFailedRetry\n val | \nMQTTErrorConnectFailed\n val | \nMQTTErrorSocketRetry\n val | \nMQTTErrorSocket\n val | \nMQTTErrorTLSConfiguration\n val | \nMQTTErrorTLSAuthentication\n val | \nMQTTErrorConnectProtocolRetry\n val | \nMQTTErrorConnectProtocol\n val | \nMQTTErrorConnectID\n val | \nMQTTErrorConnectServerRetry\n val | \nMQTTErrorConnectServer\n val | \nMQTTErrorConnectAuthentication\n val | \nMQTTErrorConnectAuthorization\n val | \nMQTTErrorSubscribeFailure\n val | \nMQTTErrorServerCode\n val | \nMQTTErrorUnknownCode\n val | \nMQTTErrorUnexpectedFormat\n val)",
            "title": "type MQTTError"
        },
        {
            "location": "/mqtt-MQTTError/#mqtterror",
            "text": "[Source]  A type for all the possible errors raised by the connection to the notify\nclass. Depending on the type of error, the user may choose to handle or ignore\nthem.  type MQTTError is\n  (MQTTErrorConnectConnected val | MQTTErrorConnectSocket val | MQTTErrorDisconnectDisconnected val | MQTTErrorSubscribeTopic val | MQTTErrorSubscribeQoS val | MQTTErrorSubscribeConnected val | MQTTErrorUnsubscribeTopic val | MQTTErrorUnsubscribeConnected val | MQTTErrorPublishTopic val | MQTTErrorPublishConnected val | MQTTErrorConnectFailedRetry val | MQTTErrorConnectFailed val | MQTTErrorSocketRetry val | MQTTErrorSocket val | MQTTErrorTLSConfiguration val | MQTTErrorTLSAuthentication val | MQTTErrorConnectProtocolRetry val | MQTTErrorConnectProtocol val | MQTTErrorConnectID val | MQTTErrorConnectServerRetry val | MQTTErrorConnectServer val | MQTTErrorConnectAuthentication val | MQTTErrorConnectAuthorization val | MQTTErrorSubscribeFailure val | MQTTErrorServerCode val | MQTTErrorUnknownCode val | MQTTErrorUnexpectedFormat val)",
            "title": "MQTTError"
        },
        {
            "location": "/mqtt-MQTTError/#type-alias-for",
            "text": "( MQTTErrorConnectConnected  val |  MQTTErrorConnectSocket  val |  MQTTErrorDisconnectDisconnected  val |  MQTTErrorSubscribeTopic  val |  MQTTErrorSubscribeQoS  val |  MQTTErrorSubscribeConnected  val |  MQTTErrorUnsubscribeTopic  val |  MQTTErrorUnsubscribeConnected  val |  MQTTErrorPublishTopic  val |  MQTTErrorPublishConnected  val |  MQTTErrorConnectFailedRetry  val |  MQTTErrorConnectFailed  val |  MQTTErrorSocketRetry  val |  MQTTErrorSocket  val |  MQTTErrorTLSConfiguration  val |  MQTTErrorTLSAuthentication  val |  MQTTErrorConnectProtocolRetry  val |  MQTTErrorConnectProtocol  val |  MQTTErrorConnectID  val |  MQTTErrorConnectServerRetry  val |  MQTTErrorConnectServer  val |  MQTTErrorConnectAuthentication  val |  MQTTErrorConnectAuthorization  val |  MQTTErrorSubscribeFailure  val |  MQTTErrorServerCode  val |  MQTTErrorUnknownCode  val |  MQTTErrorUnexpectedFormat  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/",
            "text": "MQTTConnectionNotify\n\u00b6\n\n\n[Source]\n\n\nA notify interface to create an event-based client class\nfor your MQTT connections. At the very least, it must implement the \n\non_connect()\n method.\n\n\ninterface ref MQTTConnectionNotify\n\n\n\n\nPublic Functions\n\u00b6\n\n\non_connect\n\u00b6\n\n\n[Source]\n\n\nCalled after successfully connecting to an MQTT broker. Receives the\nconnection and if \na session\n\nis available in the broker.\n\n\nThis method must be implemented.\n\n\nfun ref on_connect(\n  conn: MQTTConnection ref,\n  session_present: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nMQTTConnection\n ref\n\n\nsession_present: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\non_message\n\u00b6\n\n\n[Source]\n\n\nCalled upon receiving a PUBLISH message from the broker. Receives the\nconnection and said message.\n\n\nfun ref on_message(\n  conn: MQTTConnection ref,\n  packet: MQTTPacket val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nMQTTConnection\n ref\n\n\npacket: \nMQTTPacket\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\non_publish\n\u00b6\n\n\n[Source]\n\n\nCalled after succesfully publishing a message to the broker. Receives the\nconnection and said message.\n\n\nfun ref on_publish(\n  conn: MQTTConnection ref,\n  packet: MQTTPacket val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nMQTTConnection\n ref\n\n\npacket: \nMQTTPacket\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\non_subscribe\n\u00b6\n\n\n[Source]\n\n\nCalled after successfully subscribing to a topic. Receives the connection,\nsaid topic, and the associated QoS level of the subscription (from 0 to 2).\n\n\nfun ref on_subscribe(\n  conn: MQTTConnection ref,\n  topic: String val,\n  qos: U8 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nMQTTConnection\n ref\n\n\ntopic: \nString\n val\n\n\nqos: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\non_unsubscribe\n\u00b6\n\n\n[Source]\n\n\nCalled after successfully unsubscribing from a topic. Receives the\nconnection and said topic.\n\n\nfun ref on_unsubscribe(\n  conn: MQTTConnection ref,\n  topic: String val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nMQTTConnection\n ref\n\n\ntopic: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\non_ping\n\u00b6\n\n\n[Source]\n\n\nCalled after a ping request is replied by the server. Receives the\nconnection.\n\n\nfun ref on_ping(\n  conn: MQTTConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nMQTTConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\non_disconnect\n\u00b6\n\n\n[Source]\n\n\nCalled after the connection to the broker is closed by the user. Receives\nthe connection. When disconnected, packets and subscriptions should no\nlonger be sent, and session data may be lost unless reconnection is set\nand \nclean_session'\n is \nfalse\n.\n\n\nfun ref on_disconnect(\n  conn: MQTTConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nMQTTConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\non_error\n\u00b6\n\n\n[Source]\n\n\nCalled when an error occurs. Receives the connection, the error code, and\nany additional byte array info if applicable.\n\n\nSome errors may result in the connection to the server being closed\nafterwards.\n\n\nfun ref on_error(\n  conn: MQTTConnection ref,\n  err: (MQTTErrorConnectConnected val | MQTTErrorConnectSocket val | MQTTErrorDisconnectDisconnected val | \n    MQTTErrorSubscribeTopic val | MQTTErrorSubscribeQoS val | MQTTErrorSubscribeConnected val | \n    MQTTErrorUnsubscribeTopic val | MQTTErrorUnsubscribeConnected val | MQTTErrorPublishTopic val | \n    MQTTErrorPublishConnected val | MQTTErrorConnectFailedRetry val | MQTTErrorConnectFailed val | \n    MQTTErrorSocketRetry val | MQTTErrorSocket val | MQTTErrorTLSConfiguration val | \n    MQTTErrorTLSAuthentication val | MQTTErrorConnectProtocolRetry val | MQTTErrorConnectProtocol val | \n    MQTTErrorConnectID val | MQTTErrorConnectServerRetry val | MQTTErrorConnectServer val | \n    MQTTErrorConnectAuthentication val | MQTTErrorConnectAuthorization val | MQTTErrorSubscribeFailure val | \n    MQTTErrorServerCode val | MQTTErrorUnknownCode val | MQTTErrorUnexpectedFormat val),\n  info: Array[U8 val] val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nMQTTConnection\n ref\n\n\nerr: (\nMQTTErrorConnectConnected\n val | \nMQTTErrorConnectSocket\n val | \nMQTTErrorDisconnectDisconnected\n val | \n    \nMQTTErrorSubscribeTopic\n val | \nMQTTErrorSubscribeQoS\n val | \nMQTTErrorSubscribeConnected\n val | \n    \nMQTTErrorUnsubscribeTopic\n val | \nMQTTErrorUnsubscribeConnected\n val | \nMQTTErrorPublishTopic\n val | \n    \nMQTTErrorPublishConnected\n val | \nMQTTErrorConnectFailedRetry\n val | \nMQTTErrorConnectFailed\n val | \n    \nMQTTErrorSocketRetry\n val | \nMQTTErrorSocket\n val | \nMQTTErrorTLSConfiguration\n val | \n    \nMQTTErrorTLSAuthentication\n val | \nMQTTErrorConnectProtocolRetry\n val | \nMQTTErrorConnectProtocol\n val | \n    \nMQTTErrorConnectID\n val | \nMQTTErrorConnectServerRetry\n val | \nMQTTErrorConnectServer\n val | \n    \nMQTTErrorConnectAuthentication\n val | \nMQTTErrorConnectAuthorization\n val | \nMQTTErrorSubscribeFailure\n val | \n    \nMQTTErrorServerCode\n val | \nMQTTErrorUnknownCode\n val | \nMQTTErrorUnexpectedFormat\n val)\n\n\ninfo: \nArray\n[\nU8\n val] val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "interface MQTTConnectionNotify"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#mqttconnectionnotify",
            "text": "[Source]  A notify interface to create an event-based client class\nfor your MQTT connections. At the very least, it must implement the  on_connect()  method.  interface ref MQTTConnectionNotify",
            "title": "MQTTConnectionNotify"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#on_connect",
            "text": "[Source]  Called after successfully connecting to an MQTT broker. Receives the\nconnection and if  a session \nis available in the broker.  This method must be implemented.  fun ref on_connect(\n  conn: MQTTConnection ref,\n  session_present: Bool val)\n: None val",
            "title": "on_connect"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#parameters",
            "text": "conn:  MQTTConnection  ref  session_present:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#returns",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#on_message",
            "text": "[Source]  Called upon receiving a PUBLISH message from the broker. Receives the\nconnection and said message.  fun ref on_message(\n  conn: MQTTConnection ref,\n  packet: MQTTPacket val)\n: None val",
            "title": "on_message"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#parameters_1",
            "text": "conn:  MQTTConnection  ref  packet:  MQTTPacket  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#on_publish",
            "text": "[Source]  Called after succesfully publishing a message to the broker. Receives the\nconnection and said message.  fun ref on_publish(\n  conn: MQTTConnection ref,\n  packet: MQTTPacket val)\n: None val",
            "title": "on_publish"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#parameters_2",
            "text": "conn:  MQTTConnection  ref  packet:  MQTTPacket  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#on_subscribe",
            "text": "[Source]  Called after successfully subscribing to a topic. Receives the connection,\nsaid topic, and the associated QoS level of the subscription (from 0 to 2).  fun ref on_subscribe(\n  conn: MQTTConnection ref,\n  topic: String val,\n  qos: U8 val)\n: None val",
            "title": "on_subscribe"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#parameters_3",
            "text": "conn:  MQTTConnection  ref  topic:  String  val  qos:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#on_unsubscribe",
            "text": "[Source]  Called after successfully unsubscribing from a topic. Receives the\nconnection and said topic.  fun ref on_unsubscribe(\n  conn: MQTTConnection ref,\n  topic: String val)\n: None val",
            "title": "on_unsubscribe"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#parameters_4",
            "text": "conn:  MQTTConnection  ref  topic:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#returns_4",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#on_ping",
            "text": "[Source]  Called after a ping request is replied by the server. Receives the\nconnection.  fun ref on_ping(\n  conn: MQTTConnection ref)\n: None val",
            "title": "on_ping"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#parameters_5",
            "text": "conn:  MQTTConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#returns_5",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#on_disconnect",
            "text": "[Source]  Called after the connection to the broker is closed by the user. Receives\nthe connection. When disconnected, packets and subscriptions should no\nlonger be sent, and session data may be lost unless reconnection is set\nand  clean_session'  is  false .  fun ref on_disconnect(\n  conn: MQTTConnection ref)\n: None val",
            "title": "on_disconnect"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#parameters_6",
            "text": "conn:  MQTTConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#on_error",
            "text": "[Source]  Called when an error occurs. Receives the connection, the error code, and\nany additional byte array info if applicable.  Some errors may result in the connection to the server being closed\nafterwards.  fun ref on_error(\n  conn: MQTTConnection ref,\n  err: (MQTTErrorConnectConnected val | MQTTErrorConnectSocket val | MQTTErrorDisconnectDisconnected val | \n    MQTTErrorSubscribeTopic val | MQTTErrorSubscribeQoS val | MQTTErrorSubscribeConnected val | \n    MQTTErrorUnsubscribeTopic val | MQTTErrorUnsubscribeConnected val | MQTTErrorPublishTopic val | \n    MQTTErrorPublishConnected val | MQTTErrorConnectFailedRetry val | MQTTErrorConnectFailed val | \n    MQTTErrorSocketRetry val | MQTTErrorSocket val | MQTTErrorTLSConfiguration val | \n    MQTTErrorTLSAuthentication val | MQTTErrorConnectProtocolRetry val | MQTTErrorConnectProtocol val | \n    MQTTErrorConnectID val | MQTTErrorConnectServerRetry val | MQTTErrorConnectServer val | \n    MQTTErrorConnectAuthentication val | MQTTErrorConnectAuthorization val | MQTTErrorSubscribeFailure val | \n    MQTTErrorServerCode val | MQTTErrorUnknownCode val | MQTTErrorUnexpectedFormat val),\n  info: Array[U8 val] val = seq)\n: None val",
            "title": "on_error"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#parameters_7",
            "text": "conn:  MQTTConnection  ref  err: ( MQTTErrorConnectConnected  val |  MQTTErrorConnectSocket  val |  MQTTErrorDisconnectDisconnected  val | \n     MQTTErrorSubscribeTopic  val |  MQTTErrorSubscribeQoS  val |  MQTTErrorSubscribeConnected  val | \n     MQTTErrorUnsubscribeTopic  val |  MQTTErrorUnsubscribeConnected  val |  MQTTErrorPublishTopic  val | \n     MQTTErrorPublishConnected  val |  MQTTErrorConnectFailedRetry  val |  MQTTErrorConnectFailed  val | \n     MQTTErrorSocketRetry  val |  MQTTErrorSocket  val |  MQTTErrorTLSConfiguration  val | \n     MQTTErrorTLSAuthentication  val |  MQTTErrorConnectProtocolRetry  val |  MQTTErrorConnectProtocol  val | \n     MQTTErrorConnectID  val |  MQTTErrorConnectServerRetry  val |  MQTTErrorConnectServer  val | \n     MQTTErrorConnectAuthentication  val |  MQTTErrorConnectAuthorization  val |  MQTTErrorSubscribeFailure  val | \n     MQTTErrorServerCode  val |  MQTTErrorUnknownCode  val |  MQTTErrorUnexpectedFormat  val)  info:  Array [ U8  val] val = seq",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnectionNotify/#returns_7",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnection/",
            "text": "MQTTConnection\n\u00b6\n\n\n[Source]\n\n\nAn actor that handles the connection to the MQTT server in the background.\nWhen created, it establishes a TCP connection to the specified broker and\nexchanges messages according to the protocol version. Afterwards, it can be\ncalled by the user to execute actions such as publishing messages or\nsubscribing to topics, and triggers events in an MQTTConnectionNotify class\nwhen receiving a request from the server or when encountering an error.\n\n\nIt creates a TCPConnectionNotify object of its own, to interface with a TCP\nconnection only through it. It also creates three different timers to organize\nits workflow. he user can also specify reconnection, making this class dispose\nof all current state and attempt to establish a new connection.\n\n\nDuring execution, it may also raise one of many errors to the notify class.\n\n\nactor tag MQTTConnection\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreates a connection to the MQTT server, interfacing the TCP connection\nwith a user-defined MQTT notify class, by handling incoming and outgoing\nrequests.\n\n\nThe arguments are:\n\n\n\n\nauth'\n: \n(required)\n The connection authority used in the TCP backend.\nUsually, this value is a cast from \nenv.root\n.\n\n\nnotify'\n: \n(required)\n  The \nMQTTConnectionNotify\n implemented by the\nuser which will receive messages and interact with the MQTT client.\n\n\nhost'\n: \n(required)\n  The host where the MQTT broker is located, such\nas \nlocalhost\n, \n37.187.106.16\n, or \ntest.mosquitto.org\n.\n\n\nport'\n: The port for the MQTT service. By default, most brokers use port\n\n1883\n.\n\n\nkeepalive'\n: Duration in seconds for the keepalive mechanism. If set to\n\n0\n, the keepalive mechanism is disabled, but ping messages will still be\nsent once in a while to avoid inactivity. Default is \n15\n.\n\n\nversion'\n: The version of the communication protocol. By default, it\nuses the fourth release of the protocol, version 3.1.1.\n\n\nretry_connection'\n: When the connection is closed by the server or due\nto a client error, attempt to reconnect at the specified interval in\nseconds. A value of zero means no attempt to reconnect will be made.\nDefault is \n0\n.\n\n\nclean_session'\n: Controls whether the broker should not store\n\na persistent session\n\nfor this connection. Sessions for a same client are identified by the\n\nclient_id'\n parameter. Default is \ntrue\n.\n\n\nsslctx'\n: An SSLContext object, with client and certificate authority\nset appropriately, used when connecting to a TLS port in a broker. A value\nof \nNone\n means no security will be implemented over the socket. Default is\n\nNone\n.\n\n\nsslhost'\n: A String representing a host for signed certificates. If the\nhostname isn't part of the certificate, leave it blank. Default is \n\"\"\n.\n\n\nwill_packet'\n: MQTT allows the client to send a\n\nwill message\n\nwhen the connection with the server is unexpectedly lost. If this field is\nan MQTTPacket with a valid topic, then the specified package will be sent\nunless the client gracefully disconnects with the \ndisconnect()\n behaviour\nwithout providing the will parameter.\n\n\nclient_id'\n: A string that will be used as the client ID to the broker\nfor this session. By default, it will generate a random string with 8\nhexadecimal characters.\n\n\nuser'\n: A string with the username to authenticate to the broker. If\n\nNone\n or empty, no authentication will be made. Default is \nNone\n.\n\n\npass'\n: A string with the password to authenticate to the broker. If\n\nNone\n or empty, an empty password will be used if \nuser'\n is not \nNone\n.\nDefault is \nNone\n.\n\n\n\n\nnew tag create(\n  auth': AmbientAuth val,\n  notify': MQTTConnectionNotify iso,\n  host': String val,\n  port': String val = seq,\n  keepalive': U16 val = seq,\n  version': (MQTTv31 val | MQTTv311 val) = seq,\n  retry_connection': U64 val = seq,\n  clean_session': Bool val = seq,\n  sslctx': (SSLContext val | None val) = seq,\n  sslhost': String val = seq,\n  will_packet': (MQTTPacket val | None val) = seq,\n  client_id': String val = seq,\n  user': (String val | None val) = seq,\n  pass': (String val | None val) = seq)\n: MQTTConnection tag^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nauth': \nAmbientAuth\n val\n\n\nnotify': \nMQTTConnectionNotify\n iso\n\n\nhost': \nString\n val\n\n\nport': \nString\n val = seq\n\n\nkeepalive': \nU16\n val = seq\n\n\nversion': (\nMQTTv31\n val | \nMQTTv311\n val) = seq\n\n\nretry_connection': \nU64\n val = seq\n\n\nclean_session': \nBool\n val = seq\n\n\nsslctx': (\nSSLContext\n val | \nNone\n val) = seq\n\n\nsslhost': \nString\n val = seq\n\n\nwill_packet': (\nMQTTPacket\n val | \nNone\n val) = seq\n\n\nclient_id': \nString\n val = seq\n\n\nuser': (\nString\n val | \nNone\n val) = seq\n\n\npass': (\nString\n val | \nNone\n val) = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMQTTConnection\n tag^\n\n\n\n\n\n\nPublic fields\n\u00b6\n\n\nlet auth: \nAmbientAuth\n val\n\u00b6\n\n\n[Source]\n\n\nThe connection authority used in the TCP backend. Usually, this value is a\ncast from \nenv.root\n.\n\n\n\n\nlet host: \nString\n val\n\u00b6\n\n\n[Source]\n\n\nThe host where the MQTT broker is located, such as \nlocalhost\n,\n\n37.187.106.16\n, or \ntest.mosquitto.org\n.\n\n\n\n\nlet port: \nString\n val\n\u00b6\n\n\n[Source]\n\n\nThe port for the MQTT service. By default, most brokers use port \n1883\n for\nunsecure connections.\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\ndisconnect\n\u00b6\n\n\n[Source]\n\n\nSends a DISCONNECT request to the broker, and gracefully ends the MQTT and\nTCP connections.\n\n\nIf send_will is true, the will packet will be sent before disconnecting.\n\n\nbe disconnect(\n  send_will: Bool val = seq)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsend_will: \nBool\n val = seq\n\n\n\n\n\n\nsubscribe\n\u00b6\n\n\n[Source]\n\n\nSends a SUBSCRIBE request to the broker for the associated topic filter,\nwith the specified QoS level.\n\n\nbe subscribe(\n  topic: String val,\n  qos: U8 val = seq)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntopic: \nString\n val\n\n\nqos: \nU8\n val = seq\n\n\n\n\n\n\nunsubscribe\n\u00b6\n\n\n[Source]\n\n\nSends an UNSUBSCRIBE request to the broker from the associated topic filter.\n\n\nbe unsubscribe(\n  topic: String val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntopic: \nString\n val\n\n\n\n\n\n\npublish\n\u00b6\n\n\n[Source]\n\n\nSends a PUBLISH request for the provided packet message, along with desired\ntopic, QoS, and retain flag.\n\n\nThis behaviour will strip any package control ID.\n\n\nbe publish(\n  packet: MQTTPacket val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npacket: \nMQTTPacket\n val\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nDisposes of this connection.\n\n\nbe dispose()\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nlocal_address\n\u00b6\n\n\n[Source]\n\n\nReturns the network address of this client. The result is the same of\n\nTCPConnection.local_address()?\n.\n\n\nfun box local_address()\n: NetAddress val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNetAddress\n val ?\n\n\n\n\n\n\nremote_address\n\u00b6\n\n\n[Source]\n\n\nReturns the network address of the broker. The result is the same of\n\nTCPConnection.remote_address()?\n.\n\n\nfun box remote_address()\n: NetAddress val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNetAddress\n val ?\n\n\n\n\n\n\nPrivate Behaviours\n\u00b6\n\n\n_connected\n\u00b6\n\n\n[Source]\n\n\nbe _connected(\n  conn: TCPConnection tag,\n  local_address': NetAddress val,\n  remote_address': NetAddress val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n tag\n\n\nlocal_address': \nNetAddress\n val\n\n\nremote_address': \nNetAddress\n val\n\n\n\n\n\n\n_connect_failed\n\u00b6\n\n\n[Source]\n\n\nbe _connect_failed(\n  conn: TCPConnection tag)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n tag\n\n\n\n\n\n\n_closed\n\u00b6\n\n\n[Source]\n\n\nbe _closed(\n  conn: TCPConnection tag)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n tag\n\n\n\n\n\n\n_auth_failed\n\u00b6\n\n\n[Source]\n\n\nbe _auth_failed(\n  conn: TCPConnection tag)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n tag\n\n\n\n\n\n\n_parse_packet\n\u00b6\n\n\n[Source]\n\n\nParses and acts according to a single control packet.\n\n\nbe _parse_packet(\n  conn: TCPConnection tag,\n  data: Array[U8 val] val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n tag\n\n\ndata: \nArray\n[\nU8\n val] val\n\n\n\n\n\n\n_new_connection\n\u00b6\n\n\n[Source]\n\n\nbe _new_connection()\n\n\n\n\n\n\n_send_ping\n\u00b6\n\n\n[Source]\n\n\nTimer-callable ping.\n\n\nbe _send_ping()\n\n\n\n\n\n\n_resend_packets\n\u00b6\n\n\n[Source]\n\n\nHandles any unconfirmed QoS 1 or 2 publish packets by\nredoing its action.\n\n\nbe _resend_packets()\n\n\n\n\n\n\nPrivate Functions\n\u00b6\n\n\n_end_connection\n\u00b6\n\n\n[Source]\n\n\nClears data when the connection is ended.\n\n\nfun ref _end_connection(\n  clear_conn: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nclear_conn: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_update_version\n\u00b6\n\n\n[Source]\n\n\nfun ref _update_version(\n  version: (MQTTv31 val | MQTTv311 val))\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nversion: (\nMQTTv31\n val | \nMQTTv311\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_connect\n\u00b6\n\n\n[Source]\n\n\nSends a CONNECTION control packet to the server after establishing\na TCP connection.\n\n\nfun ref _connect()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_clean_timers\n\u00b6\n\n\n[Source]\n\n\nfun ref _clean_timers()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_disconnect\n\u00b6\n\n\n[Source]\n\n\nfun ref _disconnect(\n  send_will: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsend_will: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_subscribe\n\u00b6\n\n\n[Source]\n\n\nfun ref _subscribe(\n  topic: String val,\n  qos: U8 val = seq,\n  id: U16 val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntopic: \nString\n val\n\n\nqos: \nU8\n val = seq\n\n\nid: \nU16\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_unsubscribe\n\u00b6\n\n\n[Source]\n\n\nfun ref _unsubscribe(\n  topic: String val,\n  id: U16 val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntopic: \nString\n val\n\n\nid: \nU16\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_publish\n\u00b6\n\n\n[Source]\n\n\nfun ref _publish(\n  packet: MQTTPacket val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npacket: \nMQTTPacket\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_puback\n\u00b6\n\n\n[Source]\n\n\nAcknowledges a QoS 1 publish from the server.\n\n\nfun ref _puback(\n  packet: MQTTPacket val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npacket: \nMQTTPacket\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_pubrec\n\u00b6\n\n\n[Source]\n\n\nAcknowledges a QoS 2 publish from the server.\n\n\nfun ref _pubrec(\n  packet: MQTTPacket val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npacket: \nMQTTPacket\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_pubrel\n\u00b6\n\n\n[Source]\n\n\nFinalizes a QoS 2 publish from the client.\n\n\nfun ref _pubrel(\n  packet: MQTTPacket val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npacket: \nMQTTPacket\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_pubcomp\n\u00b6\n\n\n[Source]\n\n\nFinalizes a QoS 2 publish from the server.\n\n\nfun ref _pubcomp(\n  packet: MQTTPacket val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npacket: \nMQTTPacket\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_ping\n\u00b6\n\n\n[Source]\n\n\nPings the server in order to keep the connection alive.\n\n\nfun ref _ping()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "actor MQTTConnection"
        },
        {
            "location": "/mqtt-MQTTConnection/#mqttconnection",
            "text": "[Source]  An actor that handles the connection to the MQTT server in the background.\nWhen created, it establishes a TCP connection to the specified broker and\nexchanges messages according to the protocol version. Afterwards, it can be\ncalled by the user to execute actions such as publishing messages or\nsubscribing to topics, and triggers events in an MQTTConnectionNotify class\nwhen receiving a request from the server or when encountering an error.  It creates a TCPConnectionNotify object of its own, to interface with a TCP\nconnection only through it. It also creates three different timers to organize\nits workflow. he user can also specify reconnection, making this class dispose\nof all current state and attempt to establish a new connection.  During execution, it may also raise one of many errors to the notify class.  actor tag MQTTConnection",
            "title": "MQTTConnection"
        },
        {
            "location": "/mqtt-MQTTConnection/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-MQTTConnection/#create",
            "text": "[Source]  Creates a connection to the MQTT server, interfacing the TCP connection\nwith a user-defined MQTT notify class, by handling incoming and outgoing\nrequests.  The arguments are:   auth' :  (required)  The connection authority used in the TCP backend.\nUsually, this value is a cast from  env.root .  notify' :  (required)   The  MQTTConnectionNotify  implemented by the\nuser which will receive messages and interact with the MQTT client.  host' :  (required)   The host where the MQTT broker is located, such\nas  localhost ,  37.187.106.16 , or  test.mosquitto.org .  port' : The port for the MQTT service. By default, most brokers use port 1883 .  keepalive' : Duration in seconds for the keepalive mechanism. If set to 0 , the keepalive mechanism is disabled, but ping messages will still be\nsent once in a while to avoid inactivity. Default is  15 .  version' : The version of the communication protocol. By default, it\nuses the fourth release of the protocol, version 3.1.1.  retry_connection' : When the connection is closed by the server or due\nto a client error, attempt to reconnect at the specified interval in\nseconds. A value of zero means no attempt to reconnect will be made.\nDefault is  0 .  clean_session' : Controls whether the broker should not store a persistent session \nfor this connection. Sessions for a same client are identified by the client_id'  parameter. Default is  true .  sslctx' : An SSLContext object, with client and certificate authority\nset appropriately, used when connecting to a TLS port in a broker. A value\nof  None  means no security will be implemented over the socket. Default is None .  sslhost' : A String representing a host for signed certificates. If the\nhostname isn't part of the certificate, leave it blank. Default is  \"\" .  will_packet' : MQTT allows the client to send a will message \nwhen the connection with the server is unexpectedly lost. If this field is\nan MQTTPacket with a valid topic, then the specified package will be sent\nunless the client gracefully disconnects with the  disconnect()  behaviour\nwithout providing the will parameter.  client_id' : A string that will be used as the client ID to the broker\nfor this session. By default, it will generate a random string with 8\nhexadecimal characters.  user' : A string with the username to authenticate to the broker. If None  or empty, no authentication will be made. Default is  None .  pass' : A string with the password to authenticate to the broker. If None  or empty, an empty password will be used if  user'  is not  None .\nDefault is  None .   new tag create(\n  auth': AmbientAuth val,\n  notify': MQTTConnectionNotify iso,\n  host': String val,\n  port': String val = seq,\n  keepalive': U16 val = seq,\n  version': (MQTTv31 val | MQTTv311 val) = seq,\n  retry_connection': U64 val = seq,\n  clean_session': Bool val = seq,\n  sslctx': (SSLContext val | None val) = seq,\n  sslhost': String val = seq,\n  will_packet': (MQTTPacket val | None val) = seq,\n  client_id': String val = seq,\n  user': (String val | None val) = seq,\n  pass': (String val | None val) = seq)\n: MQTTConnection tag^",
            "title": "create"
        },
        {
            "location": "/mqtt-MQTTConnection/#parameters",
            "text": "auth':  AmbientAuth  val  notify':  MQTTConnectionNotify  iso  host':  String  val  port':  String  val = seq  keepalive':  U16  val = seq  version': ( MQTTv31  val |  MQTTv311  val) = seq  retry_connection':  U64  val = seq  clean_session':  Bool  val = seq  sslctx': ( SSLContext  val |  None  val) = seq  sslhost':  String  val = seq  will_packet': ( MQTTPacket  val |  None  val) = seq  client_id':  String  val = seq  user': ( String  val |  None  val) = seq  pass': ( String  val |  None  val) = seq",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnection/#returns",
            "text": "MQTTConnection  tag^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnection/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/mqtt-MQTTConnection/#let-auth-ambientauth-val",
            "text": "[Source]  The connection authority used in the TCP backend. Usually, this value is a\ncast from  env.root .",
            "title": "let auth: AmbientAuth val"
        },
        {
            "location": "/mqtt-MQTTConnection/#let-host-string-val",
            "text": "[Source]  The host where the MQTT broker is located, such as  localhost , 37.187.106.16 , or  test.mosquitto.org .",
            "title": "let host: String val"
        },
        {
            "location": "/mqtt-MQTTConnection/#let-port-string-val",
            "text": "[Source]  The port for the MQTT service. By default, most brokers use port  1883  for\nunsecure connections.",
            "title": "let port: String val"
        },
        {
            "location": "/mqtt-MQTTConnection/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/mqtt-MQTTConnection/#disconnect",
            "text": "[Source]  Sends a DISCONNECT request to the broker, and gracefully ends the MQTT and\nTCP connections.  If send_will is true, the will packet will be sent before disconnecting.  be disconnect(\n  send_will: Bool val = seq)",
            "title": "disconnect"
        },
        {
            "location": "/mqtt-MQTTConnection/#parameters_1",
            "text": "send_will:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnection/#subscribe",
            "text": "[Source]  Sends a SUBSCRIBE request to the broker for the associated topic filter,\nwith the specified QoS level.  be subscribe(\n  topic: String val,\n  qos: U8 val = seq)",
            "title": "subscribe"
        },
        {
            "location": "/mqtt-MQTTConnection/#parameters_2",
            "text": "topic:  String  val  qos:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnection/#unsubscribe",
            "text": "[Source]  Sends an UNSUBSCRIBE request to the broker from the associated topic filter.  be unsubscribe(\n  topic: String val)",
            "title": "unsubscribe"
        },
        {
            "location": "/mqtt-MQTTConnection/#parameters_3",
            "text": "topic:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnection/#publish",
            "text": "[Source]  Sends a PUBLISH request for the provided packet message, along with desired\ntopic, QoS, and retain flag.  This behaviour will strip any package control ID.  be publish(\n  packet: MQTTPacket val)",
            "title": "publish"
        },
        {
            "location": "/mqtt-MQTTConnection/#parameters_4",
            "text": "packet:  MQTTPacket  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnection/#dispose",
            "text": "[Source]  Disposes of this connection.  be dispose()",
            "title": "dispose"
        },
        {
            "location": "/mqtt-MQTTConnection/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-MQTTConnection/#local_address",
            "text": "[Source]  Returns the network address of this client. The result is the same of TCPConnection.local_address()? .  fun box local_address()\n: NetAddress val ?",
            "title": "local_address"
        },
        {
            "location": "/mqtt-MQTTConnection/#returns_1",
            "text": "NetAddress  val ?",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnection/#remote_address",
            "text": "[Source]  Returns the network address of the broker. The result is the same of TCPConnection.remote_address()? .  fun box remote_address()\n: NetAddress val ?",
            "title": "remote_address"
        },
        {
            "location": "/mqtt-MQTTConnection/#returns_2",
            "text": "NetAddress  val ?",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnection/#private-behaviours",
            "text": "",
            "title": "Private Behaviours"
        },
        {
            "location": "/mqtt-MQTTConnection/#_connected",
            "text": "[Source]  be _connected(\n  conn: TCPConnection tag,\n  local_address': NetAddress val,\n  remote_address': NetAddress val)",
            "title": "_connected"
        },
        {
            "location": "/mqtt-MQTTConnection/#parameters_5",
            "text": "conn:  TCPConnection  tag  local_address':  NetAddress  val  remote_address':  NetAddress  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnection/#_connect_failed",
            "text": "[Source]  be _connect_failed(\n  conn: TCPConnection tag)",
            "title": "_connect_failed"
        },
        {
            "location": "/mqtt-MQTTConnection/#parameters_6",
            "text": "conn:  TCPConnection  tag",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnection/#_closed",
            "text": "[Source]  be _closed(\n  conn: TCPConnection tag)",
            "title": "_closed"
        },
        {
            "location": "/mqtt-MQTTConnection/#parameters_7",
            "text": "conn:  TCPConnection  tag",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnection/#_auth_failed",
            "text": "[Source]  be _auth_failed(\n  conn: TCPConnection tag)",
            "title": "_auth_failed"
        },
        {
            "location": "/mqtt-MQTTConnection/#parameters_8",
            "text": "conn:  TCPConnection  tag",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnection/#_parse_packet",
            "text": "[Source]  Parses and acts according to a single control packet.  be _parse_packet(\n  conn: TCPConnection tag,\n  data: Array[U8 val] val)",
            "title": "_parse_packet"
        },
        {
            "location": "/mqtt-MQTTConnection/#parameters_9",
            "text": "conn:  TCPConnection  tag  data:  Array [ U8  val] val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnection/#_new_connection",
            "text": "[Source]  be _new_connection()",
            "title": "_new_connection"
        },
        {
            "location": "/mqtt-MQTTConnection/#_send_ping",
            "text": "[Source]  Timer-callable ping.  be _send_ping()",
            "title": "_send_ping"
        },
        {
            "location": "/mqtt-MQTTConnection/#_resend_packets",
            "text": "[Source]  Handles any unconfirmed QoS 1 or 2 publish packets by\nredoing its action.  be _resend_packets()",
            "title": "_resend_packets"
        },
        {
            "location": "/mqtt-MQTTConnection/#private-functions",
            "text": "",
            "title": "Private Functions"
        },
        {
            "location": "/mqtt-MQTTConnection/#_end_connection",
            "text": "[Source]  Clears data when the connection is ended.  fun ref _end_connection(\n  clear_conn: Bool val = seq)\n: None val",
            "title": "_end_connection"
        },
        {
            "location": "/mqtt-MQTTConnection/#parameters_10",
            "text": "clear_conn:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnection/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnection/#_update_version",
            "text": "[Source]  fun ref _update_version(\n  version: (MQTTv31 val | MQTTv311 val))\n: None val",
            "title": "_update_version"
        },
        {
            "location": "/mqtt-MQTTConnection/#parameters_11",
            "text": "version: ( MQTTv31  val |  MQTTv311  val)",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnection/#returns_4",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnection/#_connect",
            "text": "[Source]  Sends a CONNECTION control packet to the server after establishing\na TCP connection.  fun ref _connect()\n: None val",
            "title": "_connect"
        },
        {
            "location": "/mqtt-MQTTConnection/#returns_5",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnection/#_clean_timers",
            "text": "[Source]  fun ref _clean_timers()\n: None val",
            "title": "_clean_timers"
        },
        {
            "location": "/mqtt-MQTTConnection/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnection/#_disconnect",
            "text": "[Source]  fun ref _disconnect(\n  send_will: Bool val = seq)\n: None val",
            "title": "_disconnect"
        },
        {
            "location": "/mqtt-MQTTConnection/#parameters_12",
            "text": "send_will:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnection/#returns_7",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnection/#_subscribe",
            "text": "[Source]  fun ref _subscribe(\n  topic: String val,\n  qos: U8 val = seq,\n  id: U16 val = seq)\n: None val",
            "title": "_subscribe"
        },
        {
            "location": "/mqtt-MQTTConnection/#parameters_13",
            "text": "topic:  String  val  qos:  U8  val = seq  id:  U16  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnection/#returns_8",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnection/#_unsubscribe",
            "text": "[Source]  fun ref _unsubscribe(\n  topic: String val,\n  id: U16 val = seq)\n: None val",
            "title": "_unsubscribe"
        },
        {
            "location": "/mqtt-MQTTConnection/#parameters_14",
            "text": "topic:  String  val  id:  U16  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnection/#returns_9",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnection/#_publish",
            "text": "[Source]  fun ref _publish(\n  packet: MQTTPacket val)\n: None val",
            "title": "_publish"
        },
        {
            "location": "/mqtt-MQTTConnection/#parameters_15",
            "text": "packet:  MQTTPacket  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnection/#returns_10",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnection/#_puback",
            "text": "[Source]  Acknowledges a QoS 1 publish from the server.  fun ref _puback(\n  packet: MQTTPacket val)\n: None val",
            "title": "_puback"
        },
        {
            "location": "/mqtt-MQTTConnection/#parameters_16",
            "text": "packet:  MQTTPacket  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnection/#returns_11",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnection/#_pubrec",
            "text": "[Source]  Acknowledges a QoS 2 publish from the server.  fun ref _pubrec(\n  packet: MQTTPacket val)\n: None val",
            "title": "_pubrec"
        },
        {
            "location": "/mqtt-MQTTConnection/#parameters_17",
            "text": "packet:  MQTTPacket  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnection/#returns_12",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnection/#_pubrel",
            "text": "[Source]  Finalizes a QoS 2 publish from the client.  fun ref _pubrel(\n  packet: MQTTPacket val)\n: None val",
            "title": "_pubrel"
        },
        {
            "location": "/mqtt-MQTTConnection/#parameters_18",
            "text": "packet:  MQTTPacket  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnection/#returns_13",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnection/#_pubcomp",
            "text": "[Source]  Finalizes a QoS 2 publish from the server.  fun ref _pubcomp(\n  packet: MQTTPacket val)\n: None val",
            "title": "_pubcomp"
        },
        {
            "location": "/mqtt-MQTTConnection/#parameters_19",
            "text": "packet:  MQTTPacket  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-MQTTConnection/#returns_14",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-MQTTConnection/#_ping",
            "text": "[Source]  Pings the server in order to keep the connection alive.  fun ref _ping()\n: None val",
            "title": "_ping"
        },
        {
            "location": "/mqtt-MQTTConnection/#returns_15",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTPingTimer/",
            "text": "_MQTTPingTimer\n\u00b6\n\n\n[Source]\n\n\nTimer to send PINGREQ messages to the server periodically. Currently, it\nfires at 75% of the keepalive time (i.e. if keepalive is set to 10 seconds,\nit fires every 7.5 seconds). If keepalive is set to \n0\n, it will fire every\n30 seconds.\n\n\nclass ref _MQTTPingTimer is\n  TimerNotify ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nTimerNotify\n ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew iso create(\n  conn: MQTTConnection tag)\n: _MQTTPingTimer iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nMQTTConnection\n tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n_MQTTPingTimer\n iso^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun ref apply(\n  timer: Timer ref,\n  count: U64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntimer: \nTimer\n ref\n\n\ncount: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncancel\n\u00b6\n\n\nfun ref cancel(\n  timer: Timer ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntimer: \nTimer\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class _MQTTPingTimer"
        },
        {
            "location": "/mqtt-_MQTTPingTimer/#_mqttpingtimer",
            "text": "[Source]  Timer to send PINGREQ messages to the server periodically. Currently, it\nfires at 75% of the keepalive time (i.e. if keepalive is set to 10 seconds,\nit fires every 7.5 seconds). If keepalive is set to  0 , it will fire every\n30 seconds.  class ref _MQTTPingTimer is\n  TimerNotify ref",
            "title": "_MQTTPingTimer"
        },
        {
            "location": "/mqtt-_MQTTPingTimer/#implements",
            "text": "TimerNotify  ref",
            "title": "Implements"
        },
        {
            "location": "/mqtt-_MQTTPingTimer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-_MQTTPingTimer/#create",
            "text": "[Source]  new iso create(\n  conn: MQTTConnection tag)\n: _MQTTPingTimer iso^",
            "title": "create"
        },
        {
            "location": "/mqtt-_MQTTPingTimer/#parameters",
            "text": "conn:  MQTTConnection  tag",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTPingTimer/#returns",
            "text": "_MQTTPingTimer  iso^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTPingTimer/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-_MQTTPingTimer/#apply",
            "text": "[Source]  fun ref apply(\n  timer: Timer ref,\n  count: U64 val)\n: Bool val",
            "title": "apply"
        },
        {
            "location": "/mqtt-_MQTTPingTimer/#parameters_1",
            "text": "timer:  Timer  ref  count:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTPingTimer/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTPingTimer/#cancel",
            "text": "fun ref cancel(\n  timer: Timer ref)\n: None val",
            "title": "cancel"
        },
        {
            "location": "/mqtt-_MQTTPingTimer/#parameters_2",
            "text": "timer:  Timer  ref",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTPingTimer/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTResendTimer/",
            "text": "_MQTTResendTimer\n\u00b6\n\n\n[Source]\n\n\nTimer to handle QoS, re-firing unacknowledged PUBLISH and SUBSCRIBE requests\nwith the appropriate DUP flag. Currently, it always fires every second.\n\n\nclass ref _MQTTResendTimer is\n  TimerNotify ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nTimerNotify\n ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew iso create(\n  conn: MQTTConnection tag)\n: _MQTTResendTimer iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nMQTTConnection\n tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n_MQTTResendTimer\n iso^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun ref apply(\n  timer: Timer ref,\n  count: U64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntimer: \nTimer\n ref\n\n\ncount: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncancel\n\u00b6\n\n\nfun ref cancel(\n  timer: Timer ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntimer: \nTimer\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class _MQTTResendTimer"
        },
        {
            "location": "/mqtt-_MQTTResendTimer/#_mqttresendtimer",
            "text": "[Source]  Timer to handle QoS, re-firing unacknowledged PUBLISH and SUBSCRIBE requests\nwith the appropriate DUP flag. Currently, it always fires every second.  class ref _MQTTResendTimer is\n  TimerNotify ref",
            "title": "_MQTTResendTimer"
        },
        {
            "location": "/mqtt-_MQTTResendTimer/#implements",
            "text": "TimerNotify  ref",
            "title": "Implements"
        },
        {
            "location": "/mqtt-_MQTTResendTimer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-_MQTTResendTimer/#create",
            "text": "[Source]  new iso create(\n  conn: MQTTConnection tag)\n: _MQTTResendTimer iso^",
            "title": "create"
        },
        {
            "location": "/mqtt-_MQTTResendTimer/#parameters",
            "text": "conn:  MQTTConnection  tag",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTResendTimer/#returns",
            "text": "_MQTTResendTimer  iso^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTResendTimer/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-_MQTTResendTimer/#apply",
            "text": "[Source]  fun ref apply(\n  timer: Timer ref,\n  count: U64 val)\n: Bool val",
            "title": "apply"
        },
        {
            "location": "/mqtt-_MQTTResendTimer/#parameters_1",
            "text": "timer:  Timer  ref  count:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTResendTimer/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTResendTimer/#cancel",
            "text": "fun ref cancel(\n  timer: Timer ref)\n: None val",
            "title": "cancel"
        },
        {
            "location": "/mqtt-_MQTTResendTimer/#parameters_2",
            "text": "timer:  Timer  ref",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTResendTimer/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTReconnectTimer/",
            "text": "_MQTTReconnectTimer\n\u00b6\n\n\n[Source]\n\n\nTimer to handle lost connections, when \nreconnect_time'\n is set to a value\ngreater than 0. Fires at the specified interval in seconds.\n\n\nclass ref _MQTTReconnectTimer is\n  TimerNotify ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nTimerNotify\n ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew iso create(\n  conn: MQTTConnection tag)\n: _MQTTReconnectTimer iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nMQTTConnection\n tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n_MQTTReconnectTimer\n iso^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun ref apply(\n  timer: Timer ref,\n  count: U64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntimer: \nTimer\n ref\n\n\ncount: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncancel\n\u00b6\n\n\nfun ref cancel(\n  timer: Timer ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntimer: \nTimer\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class _MQTTReconnectTimer"
        },
        {
            "location": "/mqtt-_MQTTReconnectTimer/#_mqttreconnecttimer",
            "text": "[Source]  Timer to handle lost connections, when  reconnect_time'  is set to a value\ngreater than 0. Fires at the specified interval in seconds.  class ref _MQTTReconnectTimer is\n  TimerNotify ref",
            "title": "_MQTTReconnectTimer"
        },
        {
            "location": "/mqtt-_MQTTReconnectTimer/#implements",
            "text": "TimerNotify  ref",
            "title": "Implements"
        },
        {
            "location": "/mqtt-_MQTTReconnectTimer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-_MQTTReconnectTimer/#create",
            "text": "[Source]  new iso create(\n  conn: MQTTConnection tag)\n: _MQTTReconnectTimer iso^",
            "title": "create"
        },
        {
            "location": "/mqtt-_MQTTReconnectTimer/#parameters",
            "text": "conn:  MQTTConnection  tag",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTReconnectTimer/#returns",
            "text": "_MQTTReconnectTimer  iso^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTReconnectTimer/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-_MQTTReconnectTimer/#apply",
            "text": "[Source]  fun ref apply(\n  timer: Timer ref,\n  count: U64 val)\n: Bool val",
            "title": "apply"
        },
        {
            "location": "/mqtt-_MQTTReconnectTimer/#parameters_1",
            "text": "timer:  Timer  ref  count:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTReconnectTimer/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTReconnectTimer/#cancel",
            "text": "fun ref cancel(\n  timer: Timer ref)\n: None val",
            "title": "cancel"
        },
        {
            "location": "/mqtt-_MQTTReconnectTimer/#parameters_2",
            "text": "timer:  Timer  ref",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTReconnectTimer/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/",
            "text": "_MQTTConnectionHandler\n\u00b6\n\n\n[Source]\n\n\nA TCPConnectionNotify class that handles and redirects all TCP events and\nmessages to an MQTTConnection actor.\n\n\nclass ref _MQTTConnectionHandler is\n  TCPConnectionNotify ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nTCPConnectionNotify\n ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew iso create(\n  connection: MQTTConnection tag,\n  auth: (AmbientAuth val | ApplyReleaseBackpressureAuth val))\n: _MQTTConnectionHandler iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconnection: \nMQTTConnection\n tag\n\n\nauth: (\nAmbientAuth\n val | \nApplyReleaseBackpressureAuth\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n_MQTTConnectionHandler\n iso^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nconnected\n\u00b6\n\n\n[Source]\n\n\nfun ref connected(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnect_failed\n\u00b6\n\n\n[Source]\n\n\nfun ref connect_failed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclosed\n\u00b6\n\n\n[Source]\n\n\nfun ref closed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nreceived\n\u00b6\n\n\n[Source]\n\n\nCombines and breaks received data into control packets, based on the\nRemaining Length field from MQTT control packets. Once the size has been\nfixed in this function through the use of an internal buffer, the data is\nsent to the MQTTConnection actor through the \n_parse_packet()\n behaviour.\n\n\nfun ref received(\n  conn: TCPConnection ref,\n  data: Array[U8 val] iso,\n  times: USize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\ntimes: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nauth_failed\n\u00b6\n\n\n[Source]\n\n\nfun ref auth_failed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nthrottled\n\u00b6\n\n\n[Source]\n\n\nfun ref throttled(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunthrottled\n\u00b6\n\n\n[Source]\n\n\nfun ref unthrottled(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\naccepted\n\u00b6\n\n\nfun ref accepted(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnecting\n\u00b6\n\n\nfun ref connecting(\n  conn: TCPConnection ref,\n  count: U32 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ncount: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsent\n\u00b6\n\n\nfun ref sent(\n  conn: TCPConnection ref,\n  data: (String val | Array[U8 val] val))\n: (String val | Array[U8 val] val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nsentv\n\u00b6\n\n\nfun ref sentv(\n  conn: TCPConnection ref,\n  data: ByteSeqIter val)\n: ByteSeqIter val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nByteSeqIter\n val\n\n\n\n\n\n\nexpect\n\u00b6\n\n\nfun ref expect(\n  conn: TCPConnection ref,\n  qty: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\nqty: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val",
            "title": "class _MQTTConnectionHandler"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#_mqttconnectionhandler",
            "text": "[Source]  A TCPConnectionNotify class that handles and redirects all TCP events and\nmessages to an MQTTConnection actor.  class ref _MQTTConnectionHandler is\n  TCPConnectionNotify ref",
            "title": "_MQTTConnectionHandler"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#implements",
            "text": "TCPConnectionNotify  ref",
            "title": "Implements"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#create",
            "text": "[Source]  new iso create(\n  connection: MQTTConnection tag,\n  auth: (AmbientAuth val | ApplyReleaseBackpressureAuth val))\n: _MQTTConnectionHandler iso^",
            "title": "create"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#parameters",
            "text": "connection:  MQTTConnection  tag  auth: ( AmbientAuth  val |  ApplyReleaseBackpressureAuth  val)",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#returns",
            "text": "_MQTTConnectionHandler  iso^",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#connected",
            "text": "[Source]  fun ref connected(\n  conn: TCPConnection ref)\n: None val",
            "title": "connected"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#parameters_1",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#connect_failed",
            "text": "[Source]  fun ref connect_failed(\n  conn: TCPConnection ref)\n: None val",
            "title": "connect_failed"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#parameters_2",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#closed",
            "text": "[Source]  fun ref closed(\n  conn: TCPConnection ref)\n: None val",
            "title": "closed"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#parameters_3",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#received",
            "text": "[Source]  Combines and breaks received data into control packets, based on the\nRemaining Length field from MQTT control packets. Once the size has been\nfixed in this function through the use of an internal buffer, the data is\nsent to the MQTTConnection actor through the  _parse_packet()  behaviour.  fun ref received(\n  conn: TCPConnection ref,\n  data: Array[U8 val] iso,\n  times: USize val)\n: Bool val",
            "title": "received"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#parameters_4",
            "text": "conn:  TCPConnection  ref  data:  Array [ U8  val] iso  times:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#auth_failed",
            "text": "[Source]  fun ref auth_failed(\n  conn: TCPConnection ref)\n: None val",
            "title": "auth_failed"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#parameters_5",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#returns_5",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#throttled",
            "text": "[Source]  fun ref throttled(\n  conn: TCPConnection ref)\n: None val",
            "title": "throttled"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#parameters_6",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#unthrottled",
            "text": "[Source]  fun ref unthrottled(\n  conn: TCPConnection ref)\n: None val",
            "title": "unthrottled"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#parameters_7",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#returns_7",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#accepted",
            "text": "fun ref accepted(\n  conn: TCPConnection ref)\n: None val",
            "title": "accepted"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#parameters_8",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#returns_8",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#connecting",
            "text": "fun ref connecting(\n  conn: TCPConnection ref,\n  count: U32 val)\n: None val",
            "title": "connecting"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#parameters_9",
            "text": "conn:  TCPConnection  ref  count:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#returns_9",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#sent",
            "text": "fun ref sent(\n  conn: TCPConnection ref,\n  data: (String val | Array[U8 val] val))\n: (String val | Array[U8 val] val)",
            "title": "sent"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#parameters_10",
            "text": "conn:  TCPConnection  ref  data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#returns_10",
            "text": "( String  val |  Array [ U8  val] val)",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#sentv",
            "text": "fun ref sentv(\n  conn: TCPConnection ref,\n  data: ByteSeqIter val)\n: ByteSeqIter val",
            "title": "sentv"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#parameters_11",
            "text": "conn:  TCPConnection  ref  data:  ByteSeqIter  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#returns_11",
            "text": "ByteSeqIter  val",
            "title": "Returns"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#expect",
            "text": "fun ref expect(\n  conn: TCPConnection ref,\n  qty: USize val)\n: USize val",
            "title": "expect"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#parameters_12",
            "text": "conn:  TCPConnection  ref  qty:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/mqtt-_MQTTConnectionHandler/#returns_12",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/src/mqtt/version/",
            "text": "primitive MQTTv31\n  \"\"\"\n  Third version of the MQTT protocol.\n  \"\"\"\n\nprimitive MQTTv311 is _MQTTVersionDowngradable\n  \"\"\"\n  Fourth version of the MQTT protocol. It is also the default version.\n  \"\"\"\n\n  fun downgrade(): MQTTVersion =>\n    \"\"\"\n    If this version is unsupported by the broker, try the third version of\n    the protocol.\n    \"\"\"\n    MQTTv31\n\ntype MQTTVersion is (MQTTv31 | MQTTv311)\n  \"\"\"\n  A type with all implemented versions of the MQTT protocol as primitives. It\n  can be set by the user when creating a connection with MQTTConnection.\n\n  Upon receiving an \"invalid version\" CONNACK error from the server with the\n  `retry_connection` flag set, the connection will automatically try\n  reconnection with an older version. If already at the oldest version\n  (currently, MQTTv31), it will stop reconnection.\n  \"\"\"\n\ntrait val _MQTTVersionDowngradable\n  \"\"\"\n  Private trait to determine that an MQTT version can be downgraded to a\n  previous version of the protocol.\n  \"\"\"\n\n  fun downgrade(): MQTTVersion\n    \"\"\"\n    Returns the previous version of the MQTT protocol.\n    \"\"\"",
            "title": "version.pony"
        },
        {
            "location": "/src/mqtt/utils/",
            "text": "use \"random\"\nuse \"time\"\n\nprimitive MQTTUtils\n  \"\"\"\n  An utility to generate intermediate values in MQTTConnection.\n  \"\"\"\n\n  fun random_string(\n    length: USize = 8,\n    letters: String = \"0123456789abcdef\"): String iso^\n  =>\n    \"\"\"\n    Generates a random string of the specified length with the\n    provided characters.\n    \"\"\"\n    recover\n      let length': USize =\n        if (length == 0) or (length > 23) then\n          8\n        else length end\n      var string = String(length')\n      let rand: Rand = Rand(Time.nanos())\n      var n: USize = 0\n      while n < length' do\n        try\n          let char = rand.int(letters.size().u64()).usize()\n          string.push(letters(char)?)\n        end\n        n = n + 1\n      end\n      string\n    end\n\n  fun remaining_length(length: USize): Array[U8] val =>\n    \"\"\"\n    Generates an array of bytes in the format specified by the MQTT protocol\n    for the \"Remaining Length\" field, encoding the provided integer.\n    \"\"\"\n    let buffer = recover Array[U8] end\n    var length' = length\n    repeat\n      let byte: U8 =\n        if length' >= 128 then\n          (length'.u8() and 0x7F) or 0x80\n        else\n          (length'.u8() and 0x7F)\n        end\n      length' = length' >> 7\n      buffer.push(byte)\n    until length' == 0 end\n    buffer",
            "title": "utils.pony"
        },
        {
            "location": "/src/mqtt/topic/",
            "text": "primitive MQTTTopic\n  \"\"\"\n  An utility to validate topics upon publishing or subscribing.\n  \"\"\"\n\n  fun tag validate_publish(topic: String): Bool =>\n    \"\"\"\n    Validates a PUBLISH topic, by verifying if it has no wildcard (`#` or `+`)\n    or null characters. Returns `true` if the topic is valid and `false`\n    otherwise.\n    \"\"\"\n    if (topic.size() < 1) or (topic.size() > 65535) then return false end\n    not(topic.contains(\"#\"))\n      and not(topic.contains(\"+\"))\n      and not(topic.contains(String.from_array([0x00])))\n\n  fun tag validate_subscribe(topic: String): Bool =>\n    \"\"\"\n    Validates a SUBSCRIBE/UNSUBSCRIBE filter, by verifying if it has wildcards\n    properly positioned between dashes (`#` or `+`) and no null characters.\n    Returns `true` if the topic is valid and `false` otherwise.\n    \"\"\"\n    if (topic.size() < 1) or (topic.size() > 65535) then return false end\n    if topic.contains(String.from_array([0x00])) then return false end\n    var was_slash: Bool = true\n    var was_plus: Bool = false\n    var was_hash: Bool = false\n    for byte in topic.values() do\n      if was_hash or (was_plus and (byte != '/')) then\n        return false\n      elseif byte == '/' then\n        was_slash = true\n        was_plus = false\n      elseif byte == '+' then\n        if not was_slash then return false end\n        was_slash = false\n        was_plus = true\n      elseif byte == '#' then\n        if not was_slash then return false end\n        was_hash = true\n      else\n        was_slash = false\n      end\n    end\n    true\n\n  fun tag match_topic(topic: String, filter: String): Bool =>\n    \"\"\"\n    Checks if the provided PUBLISH topic in `name` matches the provided\n    SUBSCRIBE/UNSUBSCRIBE filter in `filter` and if they are both valid.\n    Returns `true` if the topic matches the filter and `false` otherwise.\n    \"\"\"\n    if validate_publish(topic) and validate_subscribe(filter) then\n      let topic_array: Array[String] val = topic.split_by(\"/\")\n      let filter_array: Array[String] val = filter.split_by(\"/\")\n      if topic_array.size() < filter_array.size() then\n        return false\n      elseif topic_array.size() > filter_array.size() then\n        try\n          if filter_array(filter_array.size() - 1)? != \"#\" then\n            return false\n          end\n        end\n      end\n      for i in filter_array.keys() do\n        try\n          let multi_wc = filter_array(i)? == \"#\"\n          let single_wc = filter_array(i)? == \"+\"\n          let equal_level = filter_array(i)? == topic_array(i)?\n          if (i == 0) and (topic_array(0)?(0)? == '$') then\n            if single_wc or multi_wc or not(equal_level) then\n              return false\n            end\n          elseif multi_wc then\n            return true\n          elseif not(single_wc) and not(equal_level) then\n            return false\n          end\n        else\n          false\n        end\n      end\n      true\n    else\n      false\n    end",
            "title": "topic.pony"
        },
        {
            "location": "/src/mqtt/packet/",
            "text": "class val MQTTPacket\n  \"\"\"\n  An immutable, sendable packet, which can be published by the client or\n  received from the server in PUBLISH messages, and if a Will is set upon\n  connection.\n  \"\"\"\n\n  let topic: String\n  \"\"\"\n  The topic the packet is associated with. Be aware that user-defined topics\n  may not follow the topic name rules of the protocol.\n  \"\"\"\n\n  let message: Array[U8] val\n  \"\"\"\n  The packet's payload.\n  \"\"\"\n\n  let retain: Bool\n  \"\"\"\n  The RETAIN flag in packets. If set to `true`, the server must retain the\n  packet, sending it to late client subscriptions to the corresponding topic.\n  \"\"\"\n\n  let qos: U8\n  \"\"\"\n  The QoS of the packet, i.e. how the protocol guarantees dispatching. There are three possible values:\n\n  * 0 \\(at most once\\): The packet is sent only one time, and may be lost.\n  * 1 \\(at least once\\): The package is sent repeatedly until the receiver\n  successfully acknowledges it.\n  * 2 \\(exactly once\\): The packet will reach its destination thanks to an MQTT\n  handshake, without loss or duplication.\n\n  Invalid values will be automatically set to 0.\n  \"\"\"\n\n  let id: U16\n  \"\"\"\n  The packet identifier, used for control between the client and the server.\n  It should not be set by the user when sending a packet, since the value will\n  be overwritten before being sent to the broker.\n  \"\"\"\n\n  new val create(\n    topic': String,\n    message': Array[U8] val,\n    retain': Bool = false,\n    qos': U8 = 0,\n    id': U16 = 0)\n  =>\n    \"\"\"\n    Creates a packet.\n    \"\"\"\n    topic = topic'\n    message = message'\n    retain = retain'\n    qos = if qos' <= 2 then qos' else 0 end\n    id = id'",
            "title": "packet.pony"
        },
        {
            "location": "/src/mqtt/error/",
            "text": "primitive MQTTErrorConnectConnected\n  \"\"\"\n  This error is triggered when a connection is attempted when already connected.\n  \"\"\"\n\n  fun string(): String =>\n    \"Cannot connect: Already connected\"\n\nprimitive MQTTErrorConnectSocket\n  \"\"\"\n  This error is triggered when a connection is attempted without a previous TCP\n  connection.\n  \"\"\"\n\n  fun string(): String =>\n    \"Cannot connect: No connection established\"\n\nprimitive MQTTErrorDisconnectDisconnected\n  \"\"\"\n  This error is triggered when a disconnection is attempted without a previous\n  TCP connection.\n  \"\"\"\n\n  fun string(): String =>\n    \"Cannot disconnect: Already disconnected\"\n\nprimitive MQTTErrorSubscribeTopic\n  \"\"\"\n  This error is triggered when subscribing with an invalid topic filter.\n  \"\"\"\n\n  fun string(): String =>\n    \"Cannot subscribe: Invalid topic\"\n\nprimitive MQTTErrorSubscribeQoS\n  \"\"\"\n  This error is triggered when subscribing with an invalid QoS value.\n  \"\"\"\n\n  fun string(): String =>\n    \"Cannot subscribe: Invalid QoS\"\n\nprimitive MQTTErrorSubscribeConnected\n  \"\"\"\n  This error is triggered when subscribing without a previous TCP connection.\n  \"\"\"\n\n  fun string(): String =>\n    \"Cannot subscribe: Not connected\"\n\nprimitive MQTTErrorUnsubscribeTopic\n  \"\"\"\n  This error is triggered when unsubscribing with an invalid topic filter.\n  \"\"\"\n\n  fun string(): String =>\n    \"Cannot unsubscribe: Invalid topic\"\n\nprimitive MQTTErrorUnsubscribeConnected\n  \"\"\"\n  This error is triggered when unsubscribing without a previous TCP connection.\n  \"\"\"\n\n  fun string(): String =>\n    \"Cannot unsubscribe: Not connected\"\n\nprimitive MQTTErrorPublishTopic\n  \"\"\"\n  This error is triggered when publishing with an invalid topic filter.\n  \"\"\"\n\n  fun string(): String =>\n    \"Cannot publish: Invalid topic\"\n\nprimitive MQTTErrorPublishConnected\n  \"\"\"\n  This error is triggered when publishing without a previous TCP connection.\n  \"\"\"\n\n  fun string(): String =>\n    \"Cannot publish: Not connected\"\n\nprimitive MQTTErrorConnectFailedRetry\n  \"\"\"\n  This error is triggered when there was a TCP connection error.\n\n  The connection actor will automatically try to reconnect.\n  \"\"\"\n\n  fun string(): String =>\n    \"[CONNECT] Could not establish a connection; retrying\"\n\nprimitive MQTTErrorConnectFailed\n  \"\"\"\n  This error is triggered when there was a TCP connection error.\n\n  The connection actor will automatically end execution.\n  \"\"\"\n\n  fun string(): String =>\n    \"[CONNECT] Could not establish a connection\"\n\nprimitive MQTTErrorSocketRetry\n  \"\"\"\n  This error is triggered when the TCP connection was closed by the remote\n  server.\n\n  The connection actor will automatically try to reconnect.\n  \"\"\"\n\n  fun string(): String =>\n    \"Connection closed by remote server; retrying\"\n\nprimitive MQTTErrorSocket\n  \"\"\"\n  This error is triggered when the TCP connection was closed by the remote\n  server.\n\n  The connection actor will automatically end execution.\n  \"\"\"\n\n  fun string(): String =>\n    \"Connection closed by remote server\"\n\nprimitive MQTTErrorTLSConfiguration\n  \"\"\"\n  This error is triggered when an SSL client could not be created due to bad\n  configuration.\n\n  The connection actor will automatically end execution.\n  \"\"\"\n\n  fun string(): String =>\n    \"Invalid TLS configuration\"\n\nprimitive MQTTErrorTLSAuthentication\n  \"\"\"\n  This error is triggered when the SSL credentials for authentication are\n  invalid.\n\n  The connection actor will automatically end execution.\n  \"\"\"\n\n  fun string(): String =>\n    \"TLS authentication error\"\n\nprimitive MQTTErrorConnectProtocolRetry\n  \"\"\"\n  This error is triggered when the broker does not accept the current protocol\n  version.\n\n  The connection actor will automatically downgrade to a lower protocol version\n  and try to reconnect.\n  \"\"\"\n\n  fun string(): String =>\n    \"[CONNACK] Unnacceptable protocol version; retrying\"\n\nprimitive MQTTErrorConnectProtocol\n  \"\"\"\n  This error is triggered when the broker does not accept the current protocol\n  version.\n\n  The connection actor will automatically end execution.\n  \"\"\"\n\n  fun string(): String =>\n    \"[CONNACK] Unnacceptable protocol version\"\n\nprimitive MQTTErrorConnectID\n  \"\"\"\n  This error is triggered when the client ID is invalid.\n\n  The connection actor will automatically end execution.\n  \"\"\"\n\n  fun string(): String =>\n    \"[CONNACK] Connection ID rejected\"\n\nprimitive MQTTErrorConnectServerRetry\n  \"\"\"\n  This error is triggered when the MQTT server is currently unavailable.\n\n  The connection actor will automatically try to reconnect.\n  \"\"\"\n\n  fun string(): String =>\n    \"[CONNACK] Server unavailable; retrying\"\n\nprimitive MQTTErrorConnectServer\n  \"\"\"\n  This error is triggered when the MQTT server is currently unavailable.\n\n  The connection actor will automatically end execution.\n  \"\"\"\n\n  fun string(): String =>\n    \"[CONNACK] Server unavailable\"\n\nprimitive MQTTErrorConnectAuthentication\n  \"\"\"\n  This error is triggered when either the username or the password for the MQTT\n  connection are invalid.\n\n  The connection actor will automatically end execution.\n  \"\"\"\n\n  fun string(): String =>\n    \"[CONNACK] Bad user name or password\"\n\nprimitive MQTTErrorConnectAuthorization\n  \"\"\"\n  This error is triggered when either the client is unauthorized by the broker.\n\n  The connection actor will automatically end execution.\n  \"\"\"\n\n  fun string(): String =>\n    \"[CONNACK] Unauthorized client\"\n\nprimitive MQTTErrorSubscribeFailure\n  \"\"\"\n  This error is triggered when the subscription to a certain topic filter is\n  denied by the server.\n\n  The additional info array will contain the failed subscription topic.\n  \"\"\"\n\n  fun string(): String =>\n    \"[SUBACK] Could not subscribe to topic\"\n\nprimitive MQTTErrorServerCode\n  \"\"\"\n  This error is triggered when a server control code (such as CONNECT or\n  SUBSCRIBE) is sent to the client.\n\n  The connection actor will automatically end execution.\n\n  The additional info array will contain the control code string bytes.\n  \"\"\"\n\n  fun string(): String =>\n    \"Unexpected server control code; disconnecting\"\n\nprimitive MQTTErrorUnknownCode\n  \"\"\"\n  This error is triggered when an unknown control code is sent to the client.\n\n  The connection actor will automatically end execution.\n\n  The additional info array will contain the control code byte.\n  \"\"\"\n\n  fun string(): String =>\n    \"Unknown control code; disconnecting\"\n\nprimitive MQTTErrorUnexpectedFormat\n  \"\"\"\n  This error is triggered when there is an error when parsing a packet.\n\n  The connection actor will automatically end execution.\n\n  The additional info array will contain the bytes of the failed parsed packet.\n  \"\"\"\n\n  fun string(): String =>\n    \"Unexpected format when processing packet; disconnecting\"\n\ntype MQTTError is\n  ( MQTTErrorConnectConnected\n  | MQTTErrorConnectSocket\n  | MQTTErrorDisconnectDisconnected\n  | MQTTErrorSubscribeTopic\n  | MQTTErrorSubscribeQoS\n  | MQTTErrorSubscribeConnected\n  | MQTTErrorUnsubscribeTopic\n  | MQTTErrorUnsubscribeConnected\n  | MQTTErrorPublishTopic\n  | MQTTErrorPublishConnected\n  | MQTTErrorConnectFailedRetry\n  | MQTTErrorConnectFailed\n  | MQTTErrorSocketRetry\n  | MQTTErrorSocket\n  | MQTTErrorTLSConfiguration\n  | MQTTErrorTLSAuthentication\n  | MQTTErrorConnectProtocolRetry\n  | MQTTErrorConnectProtocol\n  | MQTTErrorConnectID\n  | MQTTErrorConnectServerRetry\n  | MQTTErrorConnectServer\n  | MQTTErrorConnectAuthentication\n  | MQTTErrorConnectAuthorization\n  | MQTTErrorSubscribeFailure\n  | MQTTErrorServerCode\n  | MQTTErrorUnknownCode\n  | MQTTErrorUnexpectedFormat)\n  \"\"\"\n  A type for all the possible errors raised by the connection to the notify\n  class. Depending on the type of error, the user may choose to handle or ignore\n  them.\n  \"\"\"",
            "title": "error.pony"
        },
        {
            "location": "/src/mqtt/connection_notify/",
            "text": "interface MQTTConnectionNotify\n  \"\"\"\n  A notify interface to create an event-based client class\n  for your MQTT connections. At the very least, it must implement the \n  `on_connect()` method.\n  \"\"\"\n\n  fun ref on_connect(conn: MQTTConnection ref, session_present: Bool)\n    \"\"\"\n    Called after successfully connecting to an MQTT broker. Receives the\n    connection and if [a session](https://www.hivemq.com/blog/mqtt-essentials-part-7-persistent-session-queuing-messages)\n    is available in the broker.\n\n    This method must be implemented.\n    \"\"\"\n\n  fun ref on_message(conn: MQTTConnection ref, packet: MQTTPacket) =>\n    \"\"\"\n    Called upon receiving a PUBLISH message from the broker. Receives the\n    connection and said message.\n    \"\"\"\n    None\n\n  fun ref on_publish(conn: MQTTConnection ref, packet: MQTTPacket) =>\n    \"\"\"\n    Called after succesfully publishing a message to the broker. Receives the\n    connection and said message.\n    \"\"\"\n    None\n\n  fun ref on_subscribe(conn: MQTTConnection ref, topic: String, qos: U8) =>\n    \"\"\"\n    Called after successfully subscribing to a topic. Receives the connection,\n    said topic, and the associated QoS level of the subscription (from 0 to 2).\n    \"\"\"\n    None\n\n  fun ref on_unsubscribe(conn: MQTTConnection ref, topic: String) =>\n    \"\"\"\n    Called after successfully unsubscribing from a topic. Receives the\n    connection and said topic.\n    \"\"\"\n    None\n\n  fun ref on_ping(conn: MQTTConnection ref) =>\n    \"\"\"\n    Called after a ping request is replied by the server. Receives the\n    connection.\n    \"\"\"\n    None\n\n  fun ref on_disconnect(conn: MQTTConnection ref) =>\n    \"\"\"\n    Called after the connection to the broker is closed by the user. Receives\n    the connection. When disconnected, packets and subscriptions should no\n    longer be sent, and session data may be lost unless reconnection is set\n    and `clean_session'` is `false`.\n    \"\"\"\n    None\n\n  fun ref on_error(\n    conn: MQTTConnection ref,\n    err: MQTTError,\n    info: Array[U8] val = recover val Array[U8] end)\n  =>\n    \"\"\"\n    Called when an error occurs. Receives the connection, the error code, and\n    any additional byte array info if applicable.\n\n    Some errors may result in the connection to the server being closed\n    afterwards.\n    \"\"\"\n    None",
            "title": "connection_notify.pony"
        },
        {
            "location": "/src/mqtt/connection/",
            "text": "use \"buffered\"\nuse \"collections\"\nuse \"net\"\nuse \"net/ssl\"\nuse \"time\"\n\nactor MQTTConnection\n  \"\"\"\n  An actor that handles the connection to the MQTT server in the background.\n  When created, it establishes a TCP connection to the specified broker and\n  exchanges messages according to the protocol version. Afterwards, it can be\n  called by the user to execute actions such as publishing messages or\n  subscribing to topics, and triggers events in an MQTTConnectionNotify class\n  when receiving a request from the server or when encountering an error.\n\n  It creates a TCPConnectionNotify object of its own, to interface with a TCP\n  connection only through it. It also creates three different timers to organize\n  its workflow. he user can also specify reconnection, making this class dispose\n  of all current state and attempt to establish a new connection.\n\n  During execution, it may also raise one of many errors to the notify class.\n  \"\"\"\n\n  let auth: AmbientAuth\n  \"\"\"\n  The connection authority used in the TCP backend. Usually, this value is a\n  cast from `env.root`.\n  \"\"\"\n\n  let host: String\n  \"\"\"\n  The host where the MQTT broker is located, such as `localhost`,\n  `37.187.106.16`, or `test.mosquitto.org`.\n  \"\"\"\n\n  let port: String\n  \"\"\"\n  The port for the MQTT service. By default, most brokers use port `1883` for\n  unsecure connections.\n  \"\"\"\n\n  let _client: MQTTConnectionNotify\n  let _keepalive: U16\n  let _user: (String | None)\n  let _pass: (String | None)\n\n  let _retry_connection: Bool\n  \"\"\"\n  Set to true if `_reconnect_time` is greater than zero.\n  \"\"\"\n\n  let _clean_session: Bool\n  let _sslctx: (SSLContext | None)\n  let _sslhost: String\n  let _will_packet: (MQTTPacket | None)\n  let _client_id: String\n  let _ping_time: U64\n  let _resend_time: U64\n\n  let _reconnect_time: U64\n  \"\"\"\n  When the connection has been established, but is lost later, this actor can\n  restart a TCPConnection if defined by the user (i.e. if the\n  `retry_connection'` parameter is greater than zero). This varies from the\n  type of disconnection:\n\n  * **Socket errors** (i.e. network has crashed, server was shut down etc.):\n  The program simply creates a reconnect timer that periodically calls\n  `_new_connection()`, which simply kickstarts a new TCPConnection with the\n  same parameters. This timer can only be started upon calling `closed()`, if\n  `_is_connected` was `true`.\n\n  * **CONNACK errors** (i.e. wrong connection parameters): The program closes\n  the connection from the client side, alters its parameters, and retries with\n  `_new_connection()`. There are two different correctable errors and how\n  the client attempts to fix them:\n\n    1. _Unnacceptable protocol version_: Try with an older protocol version \n    (for example, 3.1 instead of 3.1.1). If already at the oldest protocol\n    version, drop connection.\n\n    2. _Server unavailable_: Simply retry the connection. This can lead to\n    infinite loops on poorly configured brokers or clients.\n  \"\"\"\n\n  let _timers: Timers = Timers\n  let _unimplemented: Map[U8, String] = _unimplemented.create()\n  let _sent_packets: Map[U16, MQTTPacket] = _sent_packets.create()\n  let _received_packets: Map[U16, MQTTPacket] = _received_packets.create()\n  let _confirmed_packets: Map[U16, MQTTPacket] = _confirmed_packets.create()\n  let _sub_topics: Map[U16, (String, U8)] = _sub_topics.create()\n  let _unsub_topics: Map[U16, String] = _unsub_topics.create()\n  var _version: MQTTVersion\n  var _is_connected: Bool = false\n  var _conn: (TCPConnection | None) = None\n  var _packet_id: U16 = 0\n  var _ping_timer: (Timer tag | None) = None\n  var _resend_timer: (Timer tag | None) = None\n  var _reconnect_timer: (Timer tag | None) = None\n  var _local_address: (NetAddress | None) = None\n  var _remote_address: (NetAddress | None) = None\n\n  new create(\n    auth': AmbientAuth,\n    notify': MQTTConnectionNotify iso,\n    host': String,\n    port': String = \"1883\",\n    keepalive': U16 = 15,\n    version': MQTTVersion = MQTTv311,\n    retry_connection': U64 = 0,\n    clean_session': Bool = true,\n    sslctx': (SSLContext | None) = None,\n    sslhost': String = \"\",\n    will_packet': (MQTTPacket | None) = None,\n    client_id': String = \"\",\n    user': (String | None) = None,\n    pass': (String | None) = None)\n  =>\n    \"\"\"\n    Creates a connection to the MQTT server, interfacing the TCP connection\n    with a user-defined MQTT notify class, by handling incoming and outgoing\n    requests.\n\n    The arguments are:\n\n    * `auth'`: **(required)** The connection authority used in the TCP backend.\n    Usually, this value is a cast from `env.root`.\n    * `notify'`: **(required)**  The `MQTTConnectionNotify` implemented by the\n    user which will receive messages and interact with the MQTT client.\n    * `host'`: **(required)**  The host where the MQTT broker is located, such\n    as `localhost`, `37.187.106.16`, or `test.mosquitto.org`.\n    * `port'`: The port for the MQTT service. By default, most brokers use port\n    `1883`.\n    * `keepalive'`: Duration in seconds for the keepalive mechanism. If set to\n    `0`, the keepalive mechanism is disabled, but ping messages will still be\n    sent once in a while to avoid inactivity. Default is `15`.\n    * `version'`: The version of the communication protocol. By default, it\n    uses the fourth release of the protocol, version 3.1.1.\n    * `retry_connection'`: When the connection is closed by the server or due\n    to a client error, attempt to reconnect at the specified interval in\n    seconds. A value of zero means no attempt to reconnect will be made.\n    Default is `0`.\n    * `clean_session'`: Controls whether the broker should not store\n    [a persistent session](https://www.hivemq.com/blog/mqtt-essentials-part-7-persistent-session-queuing-messages)\n    for this connection. Sessions for a same client are identified by the\n    `client_id'` parameter. Default is `true`.\n    * `sslctx'`: An SSLContext object, with client and certificate authority\n    set appropriately, used when connecting to a TLS port in a broker. A value\n    of `None` means no security will be implemented over the socket. Default is\n    `None`.\n    * `sslhost'`: A String representing a host for signed certificates. If the\n    hostname isn't part of the certificate, leave it blank. Default is `\"\"`.\n    * `will_packet'`: MQTT allows the client to send a\n    [will message](http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Will_Flag)\n    when the connection with the server is unexpectedly lost. If this field is\n    an MQTTPacket with a valid topic, then the specified package will be sent\n    unless the client gracefully disconnects with the `disconnect()` behaviour\n    without providing the will parameter.\n    * `client_id'`: A string that will be used as the client ID to the broker\n    for this session. By default, it will generate a random string with 8\n    hexadecimal characters.\n    * `user'`: A string with the username to authenticate to the broker. If\n    `None` or empty, no authentication will be made. Default is `None`.\n    * `pass'`: A string with the password to authenticate to the broker. If\n    `None` or empty, an empty password will be used if `user'` is not `None`.\n    Default is `None`.\n    \"\"\"\n    auth = auth'\n    host = host'\n    port = port'\n    _client = consume notify'\n    _keepalive = keepalive'\n    _version = version'\n    _user =\n      try\n        if (user' as String).size() > 0 then user' else None end\n      else None end\n    _pass =\n      try\n        if (pass' as String).size() > 0 then pass' else None end\n      else None end\n    if retry_connection' > 0 then\n      _retry_connection = true\n      _reconnect_time = 1_000_000_000 * retry_connection'\n    else\n      _retry_connection = false\n      _reconnect_time = 0\n    end\n    _clean_session = clean_session'\n    _sslctx = sslctx'\n    _sslhost = sslhost'\n    _will_packet =\n      try\n        let wp = will_packet' as MQTTPacket\n        if not MQTTTopic.validate_publish(wp.topic) then\n          None\n        else\n          wp\n        end\n      else\n        None\n      end\n    _client_id = \n      if client_id'.size() >= 6 then\n        client_id'\n      else\n        MQTTUtils.random_string() \n      end\n    _ping_time =\n      if _keepalive > 0 then\n        750_000_000 * _keepalive.u64()\n      else\n        30_000_000_000\n      end\n    _resend_time = 1_000_000_000\n    _update_version(version')\n    _new_connection()\n\n  be _connected(\n    conn: TCPConnection,\n    local_address': NetAddress,\n    remote_address': NetAddress)\n  =>\n    _end_connection(false)\n    _local_address = local_address'\n    _remote_address = remote_address'\n    try\n      _timers.cancel(_reconnect_timer as Timer tag)\n    end\n    _reconnect_timer = None\n    _conn = conn\n    _connect()\n\n  be _connect_failed(\n    conn: TCPConnection)\n  =>\n    if _is_connected and _retry_connection then\n      _client.on_error(this, MQTTErrorConnectFailedRetry)\n      let reconnect_timer = Timer(\n        _MQTTReconnectTimer(this), _reconnect_time, _reconnect_time)\n      _reconnect_timer = reconnect_timer\n      _timers(consume reconnect_timer)\n    else\n      _end_connection()\n      _client.on_error(this, MQTTErrorConnectFailed)\n    end\n\n  be _closed(\n    conn: TCPConnection)\n  =>\n    if _is_connected then\n      if _retry_connection then\n        _client.on_error(this, MQTTErrorSocketRetry)\n        let reconnect_timer = Timer(\n          _MQTTReconnectTimer(this), 0, _reconnect_time)\n        _reconnect_timer = reconnect_timer\n        _timers(consume reconnect_timer)\n      else\n        _end_connection()\n        _client.on_error(this, MQTTErrorSocket)\n      end\n    else\n      _end_connection()\n      _client.on_disconnect(this)\n    end\n\n  be _auth_failed(\n    conn: TCPConnection)\n  =>\n    try\n      _sslctx as SSLContext\n      _client.on_error(this, MQTTErrorTLSAuthentication)\n      _end_connection(true)\n    end\n\n  be _parse_packet(\n    conn: TCPConnection,\n    data: Array[U8] val)\n  =>\n    \"\"\"\n    Parses and acts according to a single control packet.\n    \"\"\"\n    let buffer = Reader\n    buffer.append(data)\n    try\n      if not(_is_connected) and (buffer.peek_u8(0)? != 0x20) then return end\n      match buffer.peek_u8(0)? >> 4\n      | 0x2 => // CONNACK\n        if buffer.peek_u8(0)? != 0x20 then error end\n        if buffer.size() != 4 then error end\n        match buffer.peek_u8(3)? // Return code\n        | 0 =>\n          _is_connected = true\n          // Create a package resender timer and a keepalive timer\n          _clean_timers()\n          let resend_timer = Timer(\n            _MQTTPingTimer(this), _ping_time, _ping_time)\n          _resend_timer = resend_timer\n          _timers(consume resend_timer)\n          let ping_timer = Timer(\n            _MQTTResendTimer(this), _resend_time, _resend_time)\n          _ping_timer = ping_timer\n          _timers(consume ping_timer)\n          _client.on_connect(this, buffer.peek_u8(2)? == 0x01)\n        | 1 =>\n          try\n            if not _retry_connection then error end\n            let version' = _version as _MQTTVersionDowngradable\n            _client.on_error(this, MQTTErrorConnectProtocolRetry)\n            _update_version(version'.downgrade())\n            _new_connection()\n          else\n            _client.on_error(this, MQTTErrorConnectProtocol)\n          end\n        | 2 =>\n          _client.on_error(this, MQTTErrorConnectID)\n        | 3 =>\n          if _retry_connection then\n            _client.on_error(this, MQTTErrorConnectServerRetry)\n            _new_connection()\n          else\n            _client.on_error(this, MQTTErrorConnectServer)\n          end\n        | 4 =>\n          _client.on_error(this, MQTTErrorConnectAuthentication)\n        | 5 =>\n          _client.on_error(this, MQTTErrorConnectAuthorization)\n        else error end\n      | 0x3 => // PUBLISH\n        let byte: U8 = buffer.peek_u8(0)?\n        let qos: U8 = (byte and 0x06) >> 1\n        if qos == 0x03 then error end\n        let retain: Bool = (byte and 0x01) != 0x00\n        let dup: Bool = (byte and 0x08) != 0x00\n        buffer.skip(1)?\n        // Skip remaining length field\n        var temp: U8 = 0x80\n        repeat\n          temp = temp and buffer.u8()?\n        until temp == 0x0 end\n        let topic_size: U16 = buffer.u16_be()?\n        let topic_block = buffer.block(topic_size.usize())?\n        let topic: String = String.from_array(consume topic_block)\n        let id: U16 = if qos != 0 then buffer.u16_be()? else 0 end\n        let message: Array[U8] val = buffer.block(buffer.size())?\n        let packet = MQTTPacket(topic, message, retain, qos, id)\n        // QoS\n        match qos\n        | 0x1 => _puback(packet)\n        | 0x2 => _pubrec(packet)\n        end\n        _client.on_message(this, packet)\n      | 0x4 => // PUBACK\n        if buffer.peek_u8(0)? != 0x40 then error end\n        if buffer.size() != 4 then error end\n        buffer.skip(2)?\n        _client.on_publish(this, _sent_packets.remove(\n          buffer.u16_be()?)?._2)\n      | 0x5 => // PUBREC\n        if buffer.peek_u8(0)? != 0x50 then error end\n        if buffer.size() != 4 then error end\n        buffer.skip(2)?\n        _pubrel(_sent_packets.remove(buffer.u16_be()?)?._2)\n      | 0x6 => // PUBREL\n        if buffer.peek_u8(0)? != 0x62 then error end\n        if buffer.size() != 4 then error end\n        buffer.skip(2)?\n        _pubcomp(_received_packets.remove(\n          buffer.u16_be()?)?._2)\n      | 0x7 => // PUBCOMP\n        if buffer.peek_u8(0)? != 0x70 then error end\n        if buffer.size() != 4 then error end\n        buffer.skip(2)?\n        _client.on_publish(this, _confirmed_packets.remove(\n          buffer.u16_be()?)?._2)\n      | 0x9 => // SUBACK\n        if buffer.peek_u8(0)? != 0x90 then error end\n        if buffer.size() != 5 then error end\n        buffer.skip(2)?\n        let topic = _sub_topics.remove(buffer.u16_be()?)?._2._1\n        if (buffer.peek_u8(0)? and 0x80) == 0x00 then\n          _client.on_subscribe(this, topic, buffer.u8()? and 0x03)\n        else\n          _client.on_error(this, MQTTErrorSubscribeFailure, topic.array())\n        end\n      | 0xB => // UNSUBACK\n        if buffer.peek_u8(0)? != 0xB0 then error end\n        if buffer.size() != 4 then error end\n        buffer.skip(2)?\n        _client.on_unsubscribe(this, _unsub_topics.remove(\n          buffer.u16_be()?)?._2)\n      | 0xD => // PINGRESP\n        if buffer.peek_u8(0)? != 0xD0 then error end\n        if buffer.size() != 2 then error end\n        _client.on_ping(this)\n      else\n        try\n          _client.on_error(\n            this,\n            MQTTErrorServerCode,\n            _unimplemented(buffer.peek_u8(0)?)?.array())\n          _disconnect(true)\n        else\n          let control_code = buffer.peek_u8(0)?\n          _client.on_error(this, MQTTErrorUnknownCode, [ control_code ])\n          _disconnect(true)\n        end\n      end\n    else\n      let packet_data: Array[U8] val =\n        try\n          buffer.block(buffer.size())?\n        else\n          recover val Array[U8] end\n        end\n      _client.on_error(this, MQTTErrorUnexpectedFormat, packet_data)\n      _disconnect(true)\n    end\n\n  fun ref _end_connection(clear_conn: Bool = true) =>\n    \"\"\"\n    Clears data when the connection is ended.\n    \"\"\"\n    _is_connected = false\n    if clear_conn then\n      try (_conn as TCPConnection).dispose() end\n      _conn = None\n    end\n    _packet_id = 0\n    _clean_timers()\n    _sent_packets.clear()\n    _received_packets.clear()\n    _confirmed_packets.clear()\n    _sub_topics.clear()\n    _unsub_topics.clear()\n    _local_address = None\n    _remote_address = None\n\n  fun ref _update_version(version: MQTTVersion) =>\n    _version = version\n    _unimplemented.clear()\n    _unimplemented.update(0x10, \"CONNECT\")\n    _unimplemented.update(0x80, \"SUBSCRIBE\")\n    _unimplemented.update(0xA0, \"UNSUBSCRIBE\")\n    _unimplemented.update(0xC0, \"PINGREQ\")\n    _unimplemented.update(0xE0, \"DISCONNECT\")\n\n  be _new_connection() =>\n    _end_connection()\n    if not(_sslctx is None) then\n      try\n        let ssl = (_sslctx as SSLContext).client()?\n        TCPConnection(\n          auth,\n          SSLConnection(\n            _MQTTConnectionHandler(this, auth),\n            consume ssl),\n          host,\n          port)\n        return\n      else\n        _client.on_error(this, MQTTErrorTLSConfiguration)\n        return\n      end\n    else\n      TCPConnection(auth, _MQTTConnectionHandler(this, auth), host, port)\n    end\n\n  fun ref _connect() =>\n    \"\"\"\n    Sends a CONNECTION control packet to the server after establishing\n    a TCP connection.\n    \"\"\"\n    if _is_connected then\n      _client.on_error(this, MQTTErrorConnectConnected)\n      return\n    end\n    if _conn is None then\n      _client.on_error(this, MQTTErrorConnectSocket)\n      return\n    end\n    let buffer = Writer\n    // -- Variable header --\n    // Version\n    buffer.write(\n      match _version\n      | MQTTv311 =>\n        [ 0x00; 0x04; 'M'; 'Q'; 'T'; 'T'; 0x04 ]\n      | MQTTv31 =>\n        [ 0x00; 0x06; 'M'; 'Q'; 'I'; 's'; 'd'; 'p'; 0x03 ]\n      end\n    )\n    // Flags\n    buffer.u8(\n      if _clean_session then\n        0x02\n      else\n        0x00\n      end or\n      try\n        let user = _user as String\n        0x80 or\n          try\n            let pass = _pass as String\n            0x40\n          else\n            0x00\n          end\n      else\n        0x00\n      end or\n        try\n          let will: MQTTPacket = _will_packet as MQTTPacket\n            if will.retain then\n              0x24\n            else\n              0x04\n            end or\n              (will.qos << 3)\n        else 0x00 end\n    )\n    // Keepalive\n    buffer.u16_be(_keepalive)\n    // -- Payload --\n    // ID\n    buffer.u16_be(_client_id.size().u16())\n    buffer.write(_client_id)\n    // Will\n    try\n      let will: MQTTPacket = _will_packet as MQTTPacket\n      buffer.u16_be(will.topic.size().u16())\n      buffer.write(will.topic)\n      buffer.u16_be(will.message.size().u16())\n      buffer.write(will.message)\n    end\n    // Authentication\n    try\n      let user = _user as String\n      buffer.u16_be(user.size().u16())\n      buffer.write(user)\n      try\n        let pass = _pass as String\n        buffer.u16_be(pass.size().u16())\n        buffer.write(pass)\n      end\n    end\n    // -- Fixed header --\n    let msg_buffer = Writer\n    msg_buffer.u8(0x10)\n    msg_buffer.write(MQTTUtils.remaining_length(buffer.size()))\n    msg_buffer.writev(buffer.done())\n    try\n      (_conn as TCPConnection).writev(msg_buffer.done())\n    end\n\n  fun ref _clean_timers() =>\n    try\n      _timers.cancel(_ping_timer as Timer tag)\n    end\n    try\n      _timers.cancel(_resend_timer as Timer tag)\n    end\n    _ping_timer = None\n    _resend_timer = None\n\n  fun ref _disconnect(send_will: Bool = false) =>\n    if not(_is_connected) then\n      _client.on_error(this, MQTTErrorDisconnectDisconnected)\n      return\n    end\n    if send_will then\n      try _publish(_will_packet as MQTTPacket) end\n    end\n    let buffer = Writer\n    buffer.u16_le(0xE0)\n    try\n      (_conn as TCPConnection).writev(buffer.done())\n      (_conn as TCPConnection).dispose()\n      _end_connection()\n    end\n\n  fun ref _subscribe(topic: String, qos: U8 = 0, id: U16 = 0) =>\n    if not(MQTTTopic.validate_subscribe(topic)) then\n      _client.on_error(this, MQTTErrorSubscribeTopic)\n      return\n    end\n    if qos > 2 then\n      _client.on_error(this, MQTTErrorSubscribeQoS)\n      return\n    end\n    if not(_is_connected) then\n      _client.on_error(this, MQTTErrorSubscribeConnected)\n      return\n    end\n    let buffer = Writer\n    // -- Variable header --\n    if id == 0 then\n      _packet_id = _packet_id + 1\n      buffer.u16_be(_packet_id)\n    else\n      buffer.u16_be(id)\n    end\n    // -- Payload --\n    buffer.u16_be(topic.size().u16())\n    buffer.write(topic)\n    buffer.u8(qos)\n    // -- Fixed header --\n    let msg_buffer = Writer\n    msg_buffer.u8(0x82)\n    msg_buffer.write(MQTTUtils.remaining_length(buffer.size()))\n    msg_buffer.writev(buffer.done())\n    _sub_topics.update(if id == 0 then _packet_id else id end, (topic, qos))\n    try\n      (_conn as TCPConnection).writev(msg_buffer.done())\n    end\n\n  fun ref _unsubscribe(topic: String, id: U16 = 0) =>\n    if not(MQTTTopic.validate_subscribe(topic)) then\n      _client.on_error(this, MQTTErrorUnsubscribeTopic)\n      return\n    end\n    if not(_is_connected) then\n      _client.on_error(this, MQTTErrorUnsubscribeConnected)\n      return\n    end\n    let buffer = Writer\n    // -- Variable header --\n    if id == 0 then\n      _packet_id = _packet_id + 1\n      buffer.u16_be(_packet_id)\n    else\n      buffer.u16_be(id)\n    end\n    // -- Payload --\n    buffer.u16_be(topic.size().u16())\n    buffer.write(topic)\n    // -- Fixed header --\n    let msg_buffer = Writer\n    msg_buffer.u8(0xA2)\n    msg_buffer.write(MQTTUtils.remaining_length(buffer.size()))\n    msg_buffer.writev(buffer.done())\n    _unsub_topics.update(if id == 0 then _packet_id else id end, topic)\n    try\n      (_conn as TCPConnection).writev(msg_buffer.done())\n    end\n\n  fun ref _publish(packet: MQTTPacket) =>\n    if not(MQTTTopic.validate_publish(packet.topic)) then\n      _client.on_error(this, MQTTErrorPublishTopic)\n      return\n    end\n    if not(_is_connected) then\n      _client.on_error(this, MQTTErrorPublishConnected)\n      return\n    end\n    let buffer = Writer\n    // -- Variable header --\n    buffer.u16_be(packet.topic.size().u16())\n    buffer.write(packet.topic)\n    if packet.qos != 0 then\n      let id' =\n        if packet.id == 0 then\n          _packet_id = _packet_id + 1\n          _packet_id\n        else\n          packet.id\n        end\n      buffer.u16_be(id')\n      _sent_packets.update(id', MQTTPacket(\n        packet.topic, packet.message, packet.retain, packet.qos, id'))\n    end\n    // -- Payload --\n    buffer.write(packet.message)\n    // -- Fixed header --\n    let msg_buffer = Writer\n    msg_buffer.u8(\n      0x30 or\n      (if (_sent_packets.contains(packet.id)) then 0x08 else 0x00 end) or\n      (packet.qos << 1) or\n      (if packet.retain then 0x01 else 0x00 end))\n    msg_buffer.write(MQTTUtils.remaining_length(buffer.size()))\n    msg_buffer.writev(buffer.done())\n    try\n      (_conn as TCPConnection).writev(msg_buffer.done())\n    end\n    if (packet.qos == 0) then _client.on_publish(this, packet) end\n\n  fun ref _puback(packet: MQTTPacket) =>\n    \"\"\"\n    Acknowledges a QoS 1 publish from the server.\n    \"\"\"\n    let buffer = Writer\n    buffer.u16_be(0x4002)\n    buffer.u16_be(packet.id)\n    try \n      (_conn as TCPConnection).writev(buffer.done())\n    end\n\n  fun ref _pubrec(packet: MQTTPacket) =>\n    \"\"\"\n    Acknowledges a QoS 2 publish from the server.\n    \"\"\"\n    let buffer = Writer\n    buffer.u16_be(0x5002)\n    buffer.u16_be(packet.id)\n    _received_packets.update(packet.id, packet)\n    try\n      (_conn as TCPConnection).writev(buffer.done())\n    end\n\n  fun ref _pubrel(packet: MQTTPacket) =>\n    \"\"\"\n    Finalizes a QoS 2 publish from the client.\n    \"\"\"\n    let buffer = Writer\n    buffer.u16_be(0x6202)\n    buffer.u16_be(packet.id)\n    _confirmed_packets.update(packet.id, packet)\n    try\n      (_conn as TCPConnection).writev(buffer.done())\n    end\n\n  fun ref _pubcomp(packet: MQTTPacket) =>\n    \"\"\"\n    Finalizes a QoS 2 publish from the server.\n    \"\"\"\n    let buffer = Writer\n    buffer.u16_be(0x7002)\n    buffer.u16_be(packet.id)\n    try\n      (_conn as TCPConnection).writev(buffer.done())\n    end\n\n  fun ref _ping() =>\n    \"\"\"\n    Pings the server in order to keep the connection alive.\n    \"\"\"\n    if not(_is_connected) then\n      return\n    end\n    let buffer = Writer\n    buffer.u16_le(0xC0)\n    try\n      (_conn as TCPConnection).writev(buffer.done())\n    end\n\n  be _send_ping() =>\n    \"\"\"\n    Timer-callable ping.\n    \"\"\"\n    _ping()\n\n  be _resend_packets() =>\n    \"\"\"\n    Handles any unconfirmed QoS 1 or 2 publish packets by\n    redoing its action.\n    \"\"\"\n    if _is_connected then\n      for packet in _sent_packets.values() do\n        _publish(packet)\n      end\n      for packet in _received_packets.values() do\n        _pubrel(packet)\n      end\n      for packet in _confirmed_packets.values() do\n        _pubcomp(packet)\n      end\n      for (id, topic_tuple) in _sub_topics.pairs() do\n        _subscribe(topic_tuple._1, topic_tuple._2, id)\n      end\n      for (id, topic) in _unsub_topics.pairs() do\n        _unsubscribe(topic, id)\n      end\n    end\n\n  be disconnect(send_will: Bool = false) =>\n    \"\"\"\n    Sends a DISCONNECT request to the broker, and gracefully ends the MQTT and\n    TCP connections.\n\n    If send_will is true, the will packet will be sent before disconnecting.\n    \"\"\"\n    _disconnect(send_will)\n\n  be subscribe(topic: String, qos: U8 = 0) =>\n    \"\"\"\n    Sends a SUBSCRIBE request to the broker for the associated topic filter,\n    with the specified QoS level.\n    \"\"\"\n    _subscribe(topic, qos)\n\n  be unsubscribe(topic: String) =>\n    \"\"\"\n    Sends an UNSUBSCRIBE request to the broker from the associated topic filter.\n    \"\"\"\n    _unsubscribe(topic)\n\n  be publish(packet: MQTTPacket) =>\n    \"\"\"\n    Sends a PUBLISH request for the provided packet message, along with desired\n    topic, QoS, and retain flag.\n\n    This behaviour will strip any package control ID.\n    \"\"\"\n    _publish(MQTTPacket(\n      packet.topic,\n      packet.message,\n      packet.retain,\n      packet.qos,\n      if _sent_packets.contains(packet.id) then 0 else packet.id end))\n\n  be dispose() =>\n    \"\"\"\n    Disposes of this connection.\n    \"\"\"\n    _end_connection(true)\n\n  fun local_address(): NetAddress ? =>\n    \"\"\"\n    Returns the network address of this client. The result is the same of\n    `TCPConnection.local_address()?`.\n    \"\"\"\n    _local_address as NetAddress\n\n  fun remote_address(): NetAddress ? =>\n    \"\"\"\n    Returns the network address of the broker. The result is the same of\n    `TCPConnection.remote_address()?`.\n    \"\"\"\n    _remote_address as NetAddress",
            "title": "connection.pony"
        },
        {
            "location": "/src/mqtt/_timer/",
            "text": "use \"time\"\n\nclass _MQTTPingTimer is TimerNotify\n  \"\"\"\n  Timer to send PINGREQ messages to the server periodically. Currently, it\n  fires at 75% of the keepalive time (i.e. if keepalive is set to 10 seconds,\n  it fires every 7.5 seconds). If keepalive is set to `0`, it will fire every\n  30 seconds.\n  \"\"\"\n\n  let _conn: MQTTConnection\n\n  new iso create(conn: MQTTConnection) =>\n    _conn = conn\n\n  fun ref apply(timer: Timer, count: U64): Bool =>\n    _conn._send_ping()\n    true\n\nclass _MQTTResendTimer is TimerNotify\n  \"\"\"\n  Timer to handle QoS, re-firing unacknowledged PUBLISH and SUBSCRIBE requests\n  with the appropriate DUP flag. Currently, it always fires every second.\n  \"\"\"\n\n  let _conn: MQTTConnection\n\n  new iso create(conn: MQTTConnection) =>\n    _conn = conn\n\n  fun ref apply(timer: Timer, count: U64): Bool =>\n    _conn._resend_packets()\n    true\n\nclass _MQTTReconnectTimer is TimerNotify\n  \"\"\"\n  Timer to handle lost connections, when `reconnect_time'` is set to a value\n  greater than 0. Fires at the specified interval in seconds.\n  \"\"\"\n\n  let _conn: MQTTConnection\n\n  new iso create(conn: MQTTConnection) =>\n    _conn = conn\n\n  fun ref apply(timer: Timer, count: U64): Bool =>\n    _conn._new_connection()\n    true",
            "title": "_timer.pony"
        },
        {
            "location": "/src/mqtt/_connection_handler/",
            "text": "use \"backpressure\"\nuse \"buffered\"\nuse \"net\"\n\nclass _MQTTConnectionHandler is TCPConnectionNotify\n  \"\"\"\n  A TCPConnectionNotify class that handles and redirects all TCP events and\n  messages to an MQTTConnection actor.\n  \"\"\"\n  let _connection: MQTTConnection\n  let _auth: BackpressureAuth\n  let _data_buffer: Reader = Reader\n\n  new iso create(connection: MQTTConnection, auth: BackpressureAuth) =>\n    _connection = connection\n    _auth = auth\n\n  fun ref connected(conn: TCPConnection ref) =>\n    _connection._connected(conn, conn.local_address(), conn.remote_address())\n\n  fun ref connect_failed(conn: TCPConnection ref) =>\n    _connection._connect_failed(conn)\n\n  fun ref closed(conn: TCPConnection ref) =>\n    _data_buffer.clear()\n    _connection._closed(conn)\n\n  fun ref received(conn: TCPConnection ref, data: Array[U8] iso,\n    times: USize): Bool =>\n    \"\"\"\n    Combines and breaks received data into control packets, based on the\n    Remaining Length field from MQTT control packets. Once the size has been\n    fixed in this function through the use of an internal buffer, the data is\n    sent to the MQTTConnection actor through the `_parse_packet()` behaviour.\n    \"\"\"\n    let full_data: Array[U8] val = consume data\n    _data_buffer.append(full_data)\n    let buffer = Writer\n    try\n      while _data_buffer.size() > 0 do\n        buffer.u8(_data_buffer.u8()?)\n        var remaining_length: USize = 0\n        var shift_amount: USize = 0\n        var temp: U8 = 0x80\n        repeat\n          temp = _data_buffer.u8()?\n          remaining_length =\n            remaining_length + ((temp and 0x7F).usize() << shift_amount)\n          shift_amount = shift_amount + 7\n          buffer.u8(temp)\n        until (temp and 0x80) == 0x0 end\n        if remaining_length <= _data_buffer.size() then\n          buffer.write(_data_buffer.block(remaining_length)?)\n          let packet_data = recover iso Array[U8] end\n          for chunk in buffer.done().values() do\n            packet_data.append(chunk)\n          end\n          _connection._parse_packet(conn, consume packet_data)\n        else\n          error\n        end\n      end\n    else\n      try buffer.write(_data_buffer.block(_data_buffer.size())?) end\n      for chunk in buffer.done().values() do\n        _data_buffer.append(chunk)\n      end\n    end\n    true\n\n  fun ref auth_failed(conn: TCPConnection ref) =>\n    _connection._auth_failed(conn)\n\n  fun ref throttled(conn: TCPConnection ref) =>\n    Backpressure.apply(_auth)\n\n  fun ref unthrottled(conn: TCPConnection ref) =>\n    Backpressure.release(_auth)",
            "title": "_connection_handler.pony"
        }
    ]
}