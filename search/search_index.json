{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Packages mqtt","title":"mqtt"},{"location":"mqtt--index/","text":"Pony-MQTT \u00b6 Pony-MQTT is a library implementing an MQTT client. It allows you to connect to an MQTT broker and exchange messages through TCP. It complies with the MQTT 3.1 and 3.1.1 protocols. Usage \u00b6 Follow this guide to get started on using Pony-MQTT: Install pony-stable . Update your bundle.json : { \"type\": \"github\", \"repo\": \"epiceric/pony-mqtt\" } stable fetch to fetch your dependencies. Write an application with use \"mqtt\" that creates an MQTTConnection actor with a class implementing the MQTTConnectionNotify interface: use \"mqtt\" class iso MyNotify is MQTTConnectionNotify new iso create(...) => // ... fun ref on_connect( conn: MQTTConnectionInterface ref, session_present: Bool) => // ... actor Main new create(env: Env) => try MQTTConnection( env.root as AmbientAuth, MyNotify(...), \"localhost\", \"1883\") end stable env ponyc to compile your application. Examples \u00b6 These are a few simple examples to help you take a look at what you can do with Pony-MQTT. Hello world \u00b6 Simple enough, this program connects to an MQTT broker, sends a message and disconnects. use \"mqtt\" class iso MQTTHelloWorldNotify is MQTTConnectionNotify // Connects to the broker, sends a message and disconnects. fun ref on_connect( conn: MQTTConnectionInterface ref, session_present: Bool) => conn.publish(MQTTPacket(\"pony\", \"Hello, world!\".array())) conn.disconnect() actor Main new create(env: Env) => try MQTTConnection( env.root as AmbientAuth, MQTTHelloWorldNotify, \"localhost\", \"1883\") end Subscribe \u00b6 Connect to a broker and print every message on the $SYS/# topics. use \"mqtt\" class iso MQTTSubNotify is MQTTConnectionNotify // Subscribe to the $SYS topic and print every message received. let _env: Env new iso create(env: Env) => _env = env fun ref on_connect( conn: MQTTConnectionInterface ref, session_present: Bool) => // Subscribe to $SYS/# topic upon connecting. _env.out.print(\"> Connected.\") conn.subscribe(\"$SYS/#\") fun ref on_message(conn: MQTTConnectionInterface ref, packet: MQTTPacket) => // Print received messages. _env.out.print(packet.topic + \" -- \" + String.from_array(packet.message)) fun ref on_subscribe( conn: MQTTConnectionInterface ref, topic: String, qos: U8) => // Confirm subscription. _env.out.print(\"> Subscribed to topic '\" + topic + \"'.\") fun ref on_error( conn: MQTTConnectionInterface ref, err: MQTTError, info: Array[U8] val) => // Print error. _env.out.print(\"MqttError: \" + err.string()) actor Main new create(env: Env) => try MQTTConnection( env.root as AmbientAuth, MQTTSubNotify(env), \"localhost\", \"1883\") end Public Types \u00b6 primitive MQTTv31 primitive MQTTv311 type MQTTVersion primitive MQTTUtils primitive MQTTTopic class MQTTPacket primitive MQTTErrorConnectConnected primitive MQTTErrorConnectSocket primitive MQTTErrorDisconnectDisconnected primitive MQTTErrorSubscribeTopic primitive MQTTErrorSubscribeQoS primitive MQTTErrorSubscribeConnected primitive MQTTErrorUnsubscribeTopic primitive MQTTErrorUnsubscribeConnected primitive MQTTErrorPublishTopic primitive MQTTErrorPublishConnected primitive MQTTErrorConnectFailedRetry primitive MQTTErrorConnectFailed primitive MQTTErrorSocketRetry primitive MQTTErrorSocket primitive MQTTErrorTLSConfiguration primitive MQTTErrorTLSAuthentication primitive MQTTErrorConnectProtocolRetry primitive MQTTErrorConnectProtocol primitive MQTTErrorConnectID primitive MQTTErrorConnectServerRetry primitive MQTTErrorConnectServer primitive MQTTErrorConnectAuthentication primitive MQTTErrorConnectAuthorization primitive MQTTErrorSubscribeFailure primitive MQTTErrorServerCode primitive MQTTErrorUnknownCode primitive MQTTErrorUnexpectedFormat type MQTTError interface MQTTConnectionNotify interface MQTTConnectionInterface actor MQTTConnection Private Types \u00b6 interface _MQTTVersionDowngradable class _MQTTPingTimer class _MQTTResendTimer class _MQTTReconnectTimer interface _SSLContext interface _SSLConnection class _MQTTConnectionHandler","title":"Package"},{"location":"mqtt--index/#pony-mqtt","text":"Pony-MQTT is a library implementing an MQTT client. It allows you to connect to an MQTT broker and exchange messages through TCP. It complies with the MQTT 3.1 and 3.1.1 protocols.","title":"Pony-MQTT"},{"location":"mqtt--index/#usage","text":"Follow this guide to get started on using Pony-MQTT: Install pony-stable . Update your bundle.json : { \"type\": \"github\", \"repo\": \"epiceric/pony-mqtt\" } stable fetch to fetch your dependencies. Write an application with use \"mqtt\" that creates an MQTTConnection actor with a class implementing the MQTTConnectionNotify interface: use \"mqtt\" class iso MyNotify is MQTTConnectionNotify new iso create(...) => // ... fun ref on_connect( conn: MQTTConnectionInterface ref, session_present: Bool) => // ... actor Main new create(env: Env) => try MQTTConnection( env.root as AmbientAuth, MyNotify(...), \"localhost\", \"1883\") end stable env ponyc to compile your application.","title":"Usage"},{"location":"mqtt--index/#examples","text":"These are a few simple examples to help you take a look at what you can do with Pony-MQTT.","title":"Examples"},{"location":"mqtt--index/#hello-world","text":"Simple enough, this program connects to an MQTT broker, sends a message and disconnects. use \"mqtt\" class iso MQTTHelloWorldNotify is MQTTConnectionNotify // Connects to the broker, sends a message and disconnects. fun ref on_connect( conn: MQTTConnectionInterface ref, session_present: Bool) => conn.publish(MQTTPacket(\"pony\", \"Hello, world!\".array())) conn.disconnect() actor Main new create(env: Env) => try MQTTConnection( env.root as AmbientAuth, MQTTHelloWorldNotify, \"localhost\", \"1883\") end","title":"Hello world"},{"location":"mqtt--index/#subscribe","text":"Connect to a broker and print every message on the $SYS/# topics. use \"mqtt\" class iso MQTTSubNotify is MQTTConnectionNotify // Subscribe to the $SYS topic and print every message received. let _env: Env new iso create(env: Env) => _env = env fun ref on_connect( conn: MQTTConnectionInterface ref, session_present: Bool) => // Subscribe to $SYS/# topic upon connecting. _env.out.print(\"> Connected.\") conn.subscribe(\"$SYS/#\") fun ref on_message(conn: MQTTConnectionInterface ref, packet: MQTTPacket) => // Print received messages. _env.out.print(packet.topic + \" -- \" + String.from_array(packet.message)) fun ref on_subscribe( conn: MQTTConnectionInterface ref, topic: String, qos: U8) => // Confirm subscription. _env.out.print(\"> Subscribed to topic '\" + topic + \"'.\") fun ref on_error( conn: MQTTConnectionInterface ref, err: MQTTError, info: Array[U8] val) => // Print error. _env.out.print(\"MqttError: \" + err.string()) actor Main new create(env: Env) => try MQTTConnection( env.root as AmbientAuth, MQTTSubNotify(env), \"localhost\", \"1883\") end","title":"Subscribe"},{"location":"mqtt--index/#public-types","text":"primitive MQTTv31 primitive MQTTv311 type MQTTVersion primitive MQTTUtils primitive MQTTTopic class MQTTPacket primitive MQTTErrorConnectConnected primitive MQTTErrorConnectSocket primitive MQTTErrorDisconnectDisconnected primitive MQTTErrorSubscribeTopic primitive MQTTErrorSubscribeQoS primitive MQTTErrorSubscribeConnected primitive MQTTErrorUnsubscribeTopic primitive MQTTErrorUnsubscribeConnected primitive MQTTErrorPublishTopic primitive MQTTErrorPublishConnected primitive MQTTErrorConnectFailedRetry primitive MQTTErrorConnectFailed primitive MQTTErrorSocketRetry primitive MQTTErrorSocket primitive MQTTErrorTLSConfiguration primitive MQTTErrorTLSAuthentication primitive MQTTErrorConnectProtocolRetry primitive MQTTErrorConnectProtocol primitive MQTTErrorConnectID primitive MQTTErrorConnectServerRetry primitive MQTTErrorConnectServer primitive MQTTErrorConnectAuthentication primitive MQTTErrorConnectAuthorization primitive MQTTErrorSubscribeFailure primitive MQTTErrorServerCode primitive MQTTErrorUnknownCode primitive MQTTErrorUnexpectedFormat type MQTTError interface MQTTConnectionNotify interface MQTTConnectionInterface actor MQTTConnection","title":"Public Types"},{"location":"mqtt--index/#private-types","text":"interface _MQTTVersionDowngradable class _MQTTPingTimer class _MQTTResendTimer class _MQTTReconnectTimer interface _SSLContext interface _SSLConnection class _MQTTConnectionHandler","title":"Private Types"},{"location":"mqtt-MQTTConnection/","text":"MQTTConnection[optional A: Any iso, optional B: ( None val | _SSLContext [A] val), optional C: ( None val | _SSLConnection [A])] \u00b6 [Source] An actor that handles the connection to the MQTT server in the background. When created, it establishes a TCP connection to the specified broker and exchanges messages according to the protocol version. Afterwards, it can be called by the user to execute actions such as publishing messages or subscribing to topics, and triggers events in an MQTTConnectionNotify class when receiving a request from the server or when encountering an error. It creates a TCPConnectionNotify object of its own, to interface with a TCP connection only through it. It also creates three different timers to organize its workflow. he user can also specify reconnection, making this class dispose of all current state and attempt to establish a new connection. During execution, it may also raise one of many errors to the notify class. In order to use the net-ssl package, declare this actor with the following type parameters: use \"net_ssl\" ... conn = MQTTConnection[SSL iso, SSLContext, SSLConnection](...) actor tag MQTTConnection[optional A: Any iso, optional B: (None val | _SSLContext[A] val), optional C: (None val | _SSLConnection[A])] is MQTTConnectionInterface tag Implements \u00b6 MQTTConnectionInterface tag Constructors \u00b6 create \u00b6 [Source] Creates a connection to the MQTT server, interfacing the TCP connection with a user-defined MQTT notify class, by handling incoming and outgoing requests. The arguments are: auth' : (required) The connection authority used in the TCP backend. Usually, this value is a cast from env.root . notify' : (required) The MQTTConnectionNotify implemented by the user which will receive messages and interact with the MQTT client. host' : (required) The host where the MQTT broker is located, such as localhost , 37.187.106.16 , or test.mosquitto.org . port' : The port for the MQTT service. By default, most brokers use port 1883 . keepalive' : Duration in seconds for the keepalive mechanism. If set to 0 , the keepalive mechanism is disabled, but ping messages will still be sent once in a while to avoid inactivity. Default is 15 . version' : The version of the communication protocol. By default, it uses the fourth release of the protocol, version 3.1.1. retry_connection' : When the connection is closed by the server or due to a client error, attempt to reconnect at the specified interval in seconds. A value of zero means no attempt to reconnect will be made. Default is 0 . clean_session' : Controls whether the broker should not store a persistent session for this connection. Sessions for a same client are identified by the client_id' parameter. Default is true . sslctx' : An SSLContext object, with client and certificate authority set appropriately, used when connecting to a TLS port in a broker. A value of None means no security will be implemented over the socket. Default is None . sslhost' : A String representing a host for signed certificates. If the hostname isn't part of the certificate, leave it blank. Default is \"\" . will_packet' : MQTT allows the client to send a will message when the connection with the server is unexpectedly lost. If this field is an MQTTPacket with a valid topic, then the specified package will be sent unless the client gracefully disconnects with the disconnect() behaviour without providing the will parameter. client_id' : A string that will be used as the client ID to the broker for this session. By default, it will generate a random string with 8 hexadecimal characters. user' : A string with the username to authenticate to the broker. If None or empty, no authentication will be made. Default is None . pass' : A string with the password to authenticate to the broker. If None or empty, an empty password will be used if user' is not None . Default is None . new tag create( auth': AmbientAuth val, notify': MQTTConnectionNotify iso, host': String val, port': String val = \"1883\", keepalive': U16 val = 15, version': (MQTTv31 val | MQTTv311 val) = reference, retry_connection': U64 val = 0, clean_session': Bool val = true, sslctx': (B | None val) = reference, sslhost': String val = \"\", will_packet': (MQTTPacket val | None val) = reference, client_id': String val = \"\", user': (String val | None val) = reference, pass': (String val | None val) = reference) : MQTTConnection[A, B, C] tag^ Parameters \u00b6 auth': AmbientAuth val notify': MQTTConnectionNotify iso host': String val port': String val = \"1883\" keepalive': U16 val = 15 version': ( MQTTv31 val | MQTTv311 val) = reference retry_connection': U64 val = 0 clean_session': Bool val = true sslctx': (B | None val) = reference sslhost': String val = \"\" will_packet': ( MQTTPacket val | None val) = reference client_id': String val = \"\" user': ( String val | None val) = reference pass': ( String val | None val) = reference Returns \u00b6 MQTTConnection [A, B, C] tag^ Public fields \u00b6 let auth: AmbientAuth val \u00b6 [Source] The connection authority used in the TCP backend. Usually, this value is a cast from env.root . let host: String val \u00b6 [Source] The host where the MQTT broker is located, such as localhost , 37.187.106.16 , or test.mosquitto.org . let port: String val \u00b6 [Source] The port for the MQTT service. By default, most brokers use port 1883 for unsecure connections. Public Behaviours \u00b6 disconnect \u00b6 [Source] Sends a DISCONNECT request to the broker, and gracefully ends the MQTT and TCP connections. If send_will is true, the will packet will be sent before disconnecting. be disconnect( send_will: Bool val = false) Parameters \u00b6 send_will: Bool val = false subscribe \u00b6 [Source] Sends a SUBSCRIBE request to the broker for the associated topic filter, with the specified QoS level. be subscribe( topic: String val, qos: U8 val = 0) Parameters \u00b6 topic: String val qos: U8 val = 0 unsubscribe \u00b6 [Source] Sends an UNSUBSCRIBE request to the broker from the associated topic filter. be unsubscribe( topic: String val) Parameters \u00b6 topic: String val publish \u00b6 [Source] Sends a PUBLISH request for the provided packet message, along with desired topic, QoS, and retain flag. This behaviour will strip any package control ID. be publish( packet: MQTTPacket val) Parameters \u00b6 packet: MQTTPacket val dispose \u00b6 [Source] Disposes of this connection. be dispose() Public Functions \u00b6 local_address \u00b6 [Source] Returns the network address of this client. The result is the same of TCPConnection.local_address()? . fun box local_address() : NetAddress val ? Returns \u00b6 NetAddress val ? remote_address \u00b6 [Source] Returns the network address of the broker. The result is the same of TCPConnection.remote_address()? . fun box remote_address() : NetAddress val ? Returns \u00b6 NetAddress val ? Private Behaviours \u00b6 _connected \u00b6 [Source] be _connected( conn: TCPConnection tag, local_address': NetAddress val, remote_address': NetAddress val) Parameters \u00b6 conn: TCPConnection tag local_address': NetAddress val remote_address': NetAddress val _connect_failed \u00b6 [Source] be _connect_failed( conn: TCPConnection tag) Parameters \u00b6 conn: TCPConnection tag _closed \u00b6 [Source] be _closed( conn: TCPConnection tag) Parameters \u00b6 conn: TCPConnection tag _auth_failed \u00b6 [Source] be _auth_failed( conn: TCPConnection tag) Parameters \u00b6 conn: TCPConnection tag _parse_packet \u00b6 [Source] Parses and acts according to a single control packet. be _parse_packet( conn: TCPConnection tag, data: Array[U8 val] val) Parameters \u00b6 conn: TCPConnection tag data: Array [ U8 val] val _new_connection \u00b6 [Source] be _new_connection() _send_ping \u00b6 [Source] Timer-callable ping. be _send_ping() _resend_packets \u00b6 [Source] Handles any unconfirmed QoS 1 or 2 publish packets by redoing its action. be _resend_packets() Private Functions \u00b6 _end_connection \u00b6 [Source] Clears data when the connection is ended. fun ref _end_connection( clear_conn: Bool val = true) : None val Parameters \u00b6 clear_conn: Bool val = true Returns \u00b6 None val _update_version \u00b6 [Source] fun ref _update_version( version: (MQTTv31 val | MQTTv311 val)) : None val Parameters \u00b6 version: ( MQTTv31 val | MQTTv311 val) Returns \u00b6 None val _connect \u00b6 [Source] Sends a CONNECTION control packet to the server after establishing a TCP connection. fun ref _connect() : None val Returns \u00b6 None val _clean_timers \u00b6 [Source] fun ref _clean_timers() : None val Returns \u00b6 None val _disconnect \u00b6 [Source] fun ref _disconnect( send_will: Bool val = false) : None val Parameters \u00b6 send_will: Bool val = false Returns \u00b6 None val _subscribe \u00b6 [Source] fun ref _subscribe( topic: String val, qos: U8 val = 0, id: U16 val = 0) : None val Parameters \u00b6 topic: String val qos: U8 val = 0 id: U16 val = 0 Returns \u00b6 None val _unsubscribe \u00b6 [Source] fun ref _unsubscribe( topic: String val, id: U16 val = 0) : None val Parameters \u00b6 topic: String val id: U16 val = 0 Returns \u00b6 None val _publish \u00b6 [Source] fun ref _publish( packet: MQTTPacket val) : None val Parameters \u00b6 packet: MQTTPacket val Returns \u00b6 None val _puback \u00b6 [Source] Acknowledges a QoS 1 publish from the server. fun ref _puback( packet: MQTTPacket val) : None val Parameters \u00b6 packet: MQTTPacket val Returns \u00b6 None val _pubrec \u00b6 [Source] Acknowledges a QoS 2 publish from the server. fun ref _pubrec( packet: MQTTPacket val) : None val Parameters \u00b6 packet: MQTTPacket val Returns \u00b6 None val _pubrel \u00b6 [Source] Finalizes a QoS 2 publish from the client. fun ref _pubrel( packet: MQTTPacket val) : None val Parameters \u00b6 packet: MQTTPacket val Returns \u00b6 None val _pubcomp \u00b6 [Source] Finalizes a QoS 2 publish from the server. fun ref _pubcomp( packet: MQTTPacket val) : None val Parameters \u00b6 packet: MQTTPacket val Returns \u00b6 None val _ping \u00b6 [Source] Pings the server in order to keep the connection alive. fun ref _ping() : None val Returns \u00b6 None val","title":"actor MQTTConnection"},{"location":"mqtt-MQTTConnection/#mqttconnection91optional-a-any-iso-optional-b-none-val-_sslcontext91a93-val-optional-c-none-val-_sslconnection91a9393","text":"[Source] An actor that handles the connection to the MQTT server in the background. When created, it establishes a TCP connection to the specified broker and exchanges messages according to the protocol version. Afterwards, it can be called by the user to execute actions such as publishing messages or subscribing to topics, and triggers events in an MQTTConnectionNotify class when receiving a request from the server or when encountering an error. It creates a TCPConnectionNotify object of its own, to interface with a TCP connection only through it. It also creates three different timers to organize its workflow. he user can also specify reconnection, making this class dispose of all current state and attempt to establish a new connection. During execution, it may also raise one of many errors to the notify class. In order to use the net-ssl package, declare this actor with the following type parameters: use \"net_ssl\" ... conn = MQTTConnection[SSL iso, SSLContext, SSLConnection](...) actor tag MQTTConnection[optional A: Any iso, optional B: (None val | _SSLContext[A] val), optional C: (None val | _SSLConnection[A])] is MQTTConnectionInterface tag","title":"MQTTConnection[optional A: Any iso, optional B: (None val | _SSLContext[A] val), optional C: (None val | _SSLConnection[A])]"},{"location":"mqtt-MQTTConnection/#implements","text":"MQTTConnectionInterface tag","title":"Implements"},{"location":"mqtt-MQTTConnection/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTConnection/#create","text":"[Source] Creates a connection to the MQTT server, interfacing the TCP connection with a user-defined MQTT notify class, by handling incoming and outgoing requests. The arguments are: auth' : (required) The connection authority used in the TCP backend. Usually, this value is a cast from env.root . notify' : (required) The MQTTConnectionNotify implemented by the user which will receive messages and interact with the MQTT client. host' : (required) The host where the MQTT broker is located, such as localhost , 37.187.106.16 , or test.mosquitto.org . port' : The port for the MQTT service. By default, most brokers use port 1883 . keepalive' : Duration in seconds for the keepalive mechanism. If set to 0 , the keepalive mechanism is disabled, but ping messages will still be sent once in a while to avoid inactivity. Default is 15 . version' : The version of the communication protocol. By default, it uses the fourth release of the protocol, version 3.1.1. retry_connection' : When the connection is closed by the server or due to a client error, attempt to reconnect at the specified interval in seconds. A value of zero means no attempt to reconnect will be made. Default is 0 . clean_session' : Controls whether the broker should not store a persistent session for this connection. Sessions for a same client are identified by the client_id' parameter. Default is true . sslctx' : An SSLContext object, with client and certificate authority set appropriately, used when connecting to a TLS port in a broker. A value of None means no security will be implemented over the socket. Default is None . sslhost' : A String representing a host for signed certificates. If the hostname isn't part of the certificate, leave it blank. Default is \"\" . will_packet' : MQTT allows the client to send a will message when the connection with the server is unexpectedly lost. If this field is an MQTTPacket with a valid topic, then the specified package will be sent unless the client gracefully disconnects with the disconnect() behaviour without providing the will parameter. client_id' : A string that will be used as the client ID to the broker for this session. By default, it will generate a random string with 8 hexadecimal characters. user' : A string with the username to authenticate to the broker. If None or empty, no authentication will be made. Default is None . pass' : A string with the password to authenticate to the broker. If None or empty, an empty password will be used if user' is not None . Default is None . new tag create( auth': AmbientAuth val, notify': MQTTConnectionNotify iso, host': String val, port': String val = \"1883\", keepalive': U16 val = 15, version': (MQTTv31 val | MQTTv311 val) = reference, retry_connection': U64 val = 0, clean_session': Bool val = true, sslctx': (B | None val) = reference, sslhost': String val = \"\", will_packet': (MQTTPacket val | None val) = reference, client_id': String val = \"\", user': (String val | None val) = reference, pass': (String val | None val) = reference) : MQTTConnection[A, B, C] tag^","title":"create"},{"location":"mqtt-MQTTConnection/#parameters","text":"auth': AmbientAuth val notify': MQTTConnectionNotify iso host': String val port': String val = \"1883\" keepalive': U16 val = 15 version': ( MQTTv31 val | MQTTv311 val) = reference retry_connection': U64 val = 0 clean_session': Bool val = true sslctx': (B | None val) = reference sslhost': String val = \"\" will_packet': ( MQTTPacket val | None val) = reference client_id': String val = \"\" user': ( String val | None val) = reference pass': ( String val | None val) = reference","title":"Parameters"},{"location":"mqtt-MQTTConnection/#returns","text":"MQTTConnection [A, B, C] tag^","title":"Returns"},{"location":"mqtt-MQTTConnection/#public-fields","text":"","title":"Public fields"},{"location":"mqtt-MQTTConnection/#let-auth-ambientauth-val","text":"[Source] The connection authority used in the TCP backend. Usually, this value is a cast from env.root .","title":"let auth: AmbientAuth val"},{"location":"mqtt-MQTTConnection/#let-host-string-val","text":"[Source] The host where the MQTT broker is located, such as localhost , 37.187.106.16 , or test.mosquitto.org .","title":"let host: String val"},{"location":"mqtt-MQTTConnection/#let-port-string-val","text":"[Source] The port for the MQTT service. By default, most brokers use port 1883 for unsecure connections.","title":"let port: String val"},{"location":"mqtt-MQTTConnection/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"mqtt-MQTTConnection/#disconnect","text":"[Source] Sends a DISCONNECT request to the broker, and gracefully ends the MQTT and TCP connections. If send_will is true, the will packet will be sent before disconnecting. be disconnect( send_will: Bool val = false)","title":"disconnect"},{"location":"mqtt-MQTTConnection/#parameters_1","text":"send_will: Bool val = false","title":"Parameters"},{"location":"mqtt-MQTTConnection/#subscribe","text":"[Source] Sends a SUBSCRIBE request to the broker for the associated topic filter, with the specified QoS level. be subscribe( topic: String val, qos: U8 val = 0)","title":"subscribe"},{"location":"mqtt-MQTTConnection/#parameters_2","text":"topic: String val qos: U8 val = 0","title":"Parameters"},{"location":"mqtt-MQTTConnection/#unsubscribe","text":"[Source] Sends an UNSUBSCRIBE request to the broker from the associated topic filter. be unsubscribe( topic: String val)","title":"unsubscribe"},{"location":"mqtt-MQTTConnection/#parameters_3","text":"topic: String val","title":"Parameters"},{"location":"mqtt-MQTTConnection/#publish","text":"[Source] Sends a PUBLISH request for the provided packet message, along with desired topic, QoS, and retain flag. This behaviour will strip any package control ID. be publish( packet: MQTTPacket val)","title":"publish"},{"location":"mqtt-MQTTConnection/#parameters_4","text":"packet: MQTTPacket val","title":"Parameters"},{"location":"mqtt-MQTTConnection/#dispose","text":"[Source] Disposes of this connection. be dispose()","title":"dispose"},{"location":"mqtt-MQTTConnection/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTConnection/#local_address","text":"[Source] Returns the network address of this client. The result is the same of TCPConnection.local_address()? . fun box local_address() : NetAddress val ?","title":"local_address"},{"location":"mqtt-MQTTConnection/#returns_1","text":"NetAddress val ?","title":"Returns"},{"location":"mqtt-MQTTConnection/#remote_address","text":"[Source] Returns the network address of the broker. The result is the same of TCPConnection.remote_address()? . fun box remote_address() : NetAddress val ?","title":"remote_address"},{"location":"mqtt-MQTTConnection/#returns_2","text":"NetAddress val ?","title":"Returns"},{"location":"mqtt-MQTTConnection/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"mqtt-MQTTConnection/#_connected","text":"[Source] be _connected( conn: TCPConnection tag, local_address': NetAddress val, remote_address': NetAddress val)","title":"_connected"},{"location":"mqtt-MQTTConnection/#parameters_5","text":"conn: TCPConnection tag local_address': NetAddress val remote_address': NetAddress val","title":"Parameters"},{"location":"mqtt-MQTTConnection/#_connect_failed","text":"[Source] be _connect_failed( conn: TCPConnection tag)","title":"_connect_failed"},{"location":"mqtt-MQTTConnection/#parameters_6","text":"conn: TCPConnection tag","title":"Parameters"},{"location":"mqtt-MQTTConnection/#_closed","text":"[Source] be _closed( conn: TCPConnection tag)","title":"_closed"},{"location":"mqtt-MQTTConnection/#parameters_7","text":"conn: TCPConnection tag","title":"Parameters"},{"location":"mqtt-MQTTConnection/#_auth_failed","text":"[Source] be _auth_failed( conn: TCPConnection tag)","title":"_auth_failed"},{"location":"mqtt-MQTTConnection/#parameters_8","text":"conn: TCPConnection tag","title":"Parameters"},{"location":"mqtt-MQTTConnection/#_parse_packet","text":"[Source] Parses and acts according to a single control packet. be _parse_packet( conn: TCPConnection tag, data: Array[U8 val] val)","title":"_parse_packet"},{"location":"mqtt-MQTTConnection/#parameters_9","text":"conn: TCPConnection tag data: Array [ U8 val] val","title":"Parameters"},{"location":"mqtt-MQTTConnection/#_new_connection","text":"[Source] be _new_connection()","title":"_new_connection"},{"location":"mqtt-MQTTConnection/#_send_ping","text":"[Source] Timer-callable ping. be _send_ping()","title":"_send_ping"},{"location":"mqtt-MQTTConnection/#_resend_packets","text":"[Source] Handles any unconfirmed QoS 1 or 2 publish packets by redoing its action. be _resend_packets()","title":"_resend_packets"},{"location":"mqtt-MQTTConnection/#private-functions","text":"","title":"Private Functions"},{"location":"mqtt-MQTTConnection/#_end_connection","text":"[Source] Clears data when the connection is ended. fun ref _end_connection( clear_conn: Bool val = true) : None val","title":"_end_connection"},{"location":"mqtt-MQTTConnection/#parameters_10","text":"clear_conn: Bool val = true","title":"Parameters"},{"location":"mqtt-MQTTConnection/#returns_3","text":"None val","title":"Returns"},{"location":"mqtt-MQTTConnection/#_update_version","text":"[Source] fun ref _update_version( version: (MQTTv31 val | MQTTv311 val)) : None val","title":"_update_version"},{"location":"mqtt-MQTTConnection/#parameters_11","text":"version: ( MQTTv31 val | MQTTv311 val)","title":"Parameters"},{"location":"mqtt-MQTTConnection/#returns_4","text":"None val","title":"Returns"},{"location":"mqtt-MQTTConnection/#_connect","text":"[Source] Sends a CONNECTION control packet to the server after establishing a TCP connection. fun ref _connect() : None val","title":"_connect"},{"location":"mqtt-MQTTConnection/#returns_5","text":"None val","title":"Returns"},{"location":"mqtt-MQTTConnection/#_clean_timers","text":"[Source] fun ref _clean_timers() : None val","title":"_clean_timers"},{"location":"mqtt-MQTTConnection/#returns_6","text":"None val","title":"Returns"},{"location":"mqtt-MQTTConnection/#_disconnect","text":"[Source] fun ref _disconnect( send_will: Bool val = false) : None val","title":"_disconnect"},{"location":"mqtt-MQTTConnection/#parameters_12","text":"send_will: Bool val = false","title":"Parameters"},{"location":"mqtt-MQTTConnection/#returns_7","text":"None val","title":"Returns"},{"location":"mqtt-MQTTConnection/#_subscribe","text":"[Source] fun ref _subscribe( topic: String val, qos: U8 val = 0, id: U16 val = 0) : None val","title":"_subscribe"},{"location":"mqtt-MQTTConnection/#parameters_13","text":"topic: String val qos: U8 val = 0 id: U16 val = 0","title":"Parameters"},{"location":"mqtt-MQTTConnection/#returns_8","text":"None val","title":"Returns"},{"location":"mqtt-MQTTConnection/#_unsubscribe","text":"[Source] fun ref _unsubscribe( topic: String val, id: U16 val = 0) : None val","title":"_unsubscribe"},{"location":"mqtt-MQTTConnection/#parameters_14","text":"topic: String val id: U16 val = 0","title":"Parameters"},{"location":"mqtt-MQTTConnection/#returns_9","text":"None val","title":"Returns"},{"location":"mqtt-MQTTConnection/#_publish","text":"[Source] fun ref _publish( packet: MQTTPacket val) : None val","title":"_publish"},{"location":"mqtt-MQTTConnection/#parameters_15","text":"packet: MQTTPacket val","title":"Parameters"},{"location":"mqtt-MQTTConnection/#returns_10","text":"None val","title":"Returns"},{"location":"mqtt-MQTTConnection/#_puback","text":"[Source] Acknowledges a QoS 1 publish from the server. fun ref _puback( packet: MQTTPacket val) : None val","title":"_puback"},{"location":"mqtt-MQTTConnection/#parameters_16","text":"packet: MQTTPacket val","title":"Parameters"},{"location":"mqtt-MQTTConnection/#returns_11","text":"None val","title":"Returns"},{"location":"mqtt-MQTTConnection/#_pubrec","text":"[Source] Acknowledges a QoS 2 publish from the server. fun ref _pubrec( packet: MQTTPacket val) : None val","title":"_pubrec"},{"location":"mqtt-MQTTConnection/#parameters_17","text":"packet: MQTTPacket val","title":"Parameters"},{"location":"mqtt-MQTTConnection/#returns_12","text":"None val","title":"Returns"},{"location":"mqtt-MQTTConnection/#_pubrel","text":"[Source] Finalizes a QoS 2 publish from the client. fun ref _pubrel( packet: MQTTPacket val) : None val","title":"_pubrel"},{"location":"mqtt-MQTTConnection/#parameters_18","text":"packet: MQTTPacket val","title":"Parameters"},{"location":"mqtt-MQTTConnection/#returns_13","text":"None val","title":"Returns"},{"location":"mqtt-MQTTConnection/#_pubcomp","text":"[Source] Finalizes a QoS 2 publish from the server. fun ref _pubcomp( packet: MQTTPacket val) : None val","title":"_pubcomp"},{"location":"mqtt-MQTTConnection/#parameters_19","text":"packet: MQTTPacket val","title":"Parameters"},{"location":"mqtt-MQTTConnection/#returns_14","text":"None val","title":"Returns"},{"location":"mqtt-MQTTConnection/#_ping","text":"[Source] Pings the server in order to keep the connection alive. fun ref _ping() : None val","title":"_ping"},{"location":"mqtt-MQTTConnection/#returns_15","text":"None val","title":"Returns"},{"location":"mqtt-MQTTConnectionInterface/","text":"MQTTConnectionInterface \u00b6 [Source] interface tag MQTTConnectionInterface Public Behaviours \u00b6 disconnect \u00b6 [Source] Sends a DISCONNECT request to the broker, and gracefully ends the MQTT and TCP connections. If send_will is true, the will packet will be sent before disconnecting. be disconnect( send_will: Bool val = false) Parameters \u00b6 send_will: Bool val = false subscribe \u00b6 [Source] Sends a SUBSCRIBE request to the broker for the associated topic filter, with the specified QoS level. be subscribe( topic: String val, qos: U8 val = 0) Parameters \u00b6 topic: String val qos: U8 val = 0 unsubscribe \u00b6 [Source] Sends an UNSUBSCRIBE request to the broker from the associated topic filter. be unsubscribe( topic: String val) Parameters \u00b6 topic: String val publish \u00b6 [Source] Sends a PUBLISH request for the provided packet message, along with desired topic, QoS, and retain flag. This behaviour will strip any package control ID. be publish( packet: MQTTPacket val) Parameters \u00b6 packet: MQTTPacket val dispose \u00b6 [Source] Disposes of this connection. be dispose() Public Functions \u00b6 local_address \u00b6 [Source] Returns the network address of this client. The result is the same of TCPConnection.local_address()? . fun box local_address() : NetAddress val ? Returns \u00b6 NetAddress val ? remote_address \u00b6 [Source] Returns the network address of the broker. The result is the same of TCPConnection.remote_address()? . fun box remote_address() : NetAddress val ? Returns \u00b6 NetAddress val ?","title":"interface MQTTConnectionInterface"},{"location":"mqtt-MQTTConnectionInterface/#mqttconnectioninterface","text":"[Source] interface tag MQTTConnectionInterface","title":"MQTTConnectionInterface"},{"location":"mqtt-MQTTConnectionInterface/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"mqtt-MQTTConnectionInterface/#disconnect","text":"[Source] Sends a DISCONNECT request to the broker, and gracefully ends the MQTT and TCP connections. If send_will is true, the will packet will be sent before disconnecting. be disconnect( send_will: Bool val = false)","title":"disconnect"},{"location":"mqtt-MQTTConnectionInterface/#parameters","text":"send_will: Bool val = false","title":"Parameters"},{"location":"mqtt-MQTTConnectionInterface/#subscribe","text":"[Source] Sends a SUBSCRIBE request to the broker for the associated topic filter, with the specified QoS level. be subscribe( topic: String val, qos: U8 val = 0)","title":"subscribe"},{"location":"mqtt-MQTTConnectionInterface/#parameters_1","text":"topic: String val qos: U8 val = 0","title":"Parameters"},{"location":"mqtt-MQTTConnectionInterface/#unsubscribe","text":"[Source] Sends an UNSUBSCRIBE request to the broker from the associated topic filter. be unsubscribe( topic: String val)","title":"unsubscribe"},{"location":"mqtt-MQTTConnectionInterface/#parameters_2","text":"topic: String val","title":"Parameters"},{"location":"mqtt-MQTTConnectionInterface/#publish","text":"[Source] Sends a PUBLISH request for the provided packet message, along with desired topic, QoS, and retain flag. This behaviour will strip any package control ID. be publish( packet: MQTTPacket val)","title":"publish"},{"location":"mqtt-MQTTConnectionInterface/#parameters_3","text":"packet: MQTTPacket val","title":"Parameters"},{"location":"mqtt-MQTTConnectionInterface/#dispose","text":"[Source] Disposes of this connection. be dispose()","title":"dispose"},{"location":"mqtt-MQTTConnectionInterface/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTConnectionInterface/#local_address","text":"[Source] Returns the network address of this client. The result is the same of TCPConnection.local_address()? . fun box local_address() : NetAddress val ?","title":"local_address"},{"location":"mqtt-MQTTConnectionInterface/#returns","text":"NetAddress val ?","title":"Returns"},{"location":"mqtt-MQTTConnectionInterface/#remote_address","text":"[Source] Returns the network address of the broker. The result is the same of TCPConnection.remote_address()? . fun box remote_address() : NetAddress val ?","title":"remote_address"},{"location":"mqtt-MQTTConnectionInterface/#returns_1","text":"NetAddress val ?","title":"Returns"},{"location":"mqtt-MQTTConnectionNotify/","text":"MQTTConnectionNotify \u00b6 [Source] A notify interface to create an event-based client class for your MQTT connections. At the very least, it must implement the on_connect() method. interface ref MQTTConnectionNotify Public Functions \u00b6 on_connect \u00b6 [Source] Called after successfully connecting to an MQTT broker. Receives the connection and if a session is available in the broker. This method must be implemented. fun ref on_connect( conn: MQTTConnectionInterface ref, session_present: Bool val) : None val Parameters \u00b6 conn: MQTTConnectionInterface ref session_present: Bool val Returns \u00b6 None val on_message \u00b6 [Source] Called upon receiving a PUBLISH message from the broker. Receives the connection and said message. fun ref on_message( conn: MQTTConnectionInterface ref, packet: MQTTPacket val) : None val Parameters \u00b6 conn: MQTTConnectionInterface ref packet: MQTTPacket val Returns \u00b6 None val on_publish \u00b6 [Source] Called after succesfully publishing a message to the broker. Receives the connection and said message. fun ref on_publish( conn: MQTTConnectionInterface ref, packet: MQTTPacket val) : None val Parameters \u00b6 conn: MQTTConnectionInterface ref packet: MQTTPacket val Returns \u00b6 None val on_subscribe \u00b6 [Source] Called after successfully subscribing to a topic. Receives the connection, said topic, and the associated QoS level of the subscription (from 0 to 2). fun ref on_subscribe( conn: MQTTConnectionInterface ref, topic: String val, qos: U8 val) : None val Parameters \u00b6 conn: MQTTConnectionInterface ref topic: String val qos: U8 val Returns \u00b6 None val on_unsubscribe \u00b6 [Source] Called after successfully unsubscribing from a topic. Receives the connection and said topic. fun ref on_unsubscribe( conn: MQTTConnectionInterface ref, topic: String val) : None val Parameters \u00b6 conn: MQTTConnectionInterface ref topic: String val Returns \u00b6 None val on_ping \u00b6 [Source] Called after a ping request is replied by the server. Receives the connection. fun ref on_ping( conn: MQTTConnectionInterface ref) : None val Parameters \u00b6 conn: MQTTConnectionInterface ref Returns \u00b6 None val on_disconnect \u00b6 [Source] Called after the connection to the broker is closed by the user. Receives the connection. When disconnected, packets and subscriptions should no longer be sent, and session data may be lost unless reconnection is set and clean_session' is false . fun ref on_disconnect( conn: MQTTConnectionInterface ref) : None val Parameters \u00b6 conn: MQTTConnectionInterface ref Returns \u00b6 None val on_error \u00b6 [Source] Called when an error occurs. Receives the connection, the error code, and any additional byte array info if applicable. Some errors may result in the connection to the server being closed afterwards. fun ref on_error( conn: MQTTConnectionInterface ref, err: (MQTTErrorConnectConnected val | MQTTErrorConnectSocket val | MQTTErrorDisconnectDisconnected val | MQTTErrorSubscribeTopic val | MQTTErrorSubscribeQoS val | MQTTErrorSubscribeConnected val | MQTTErrorUnsubscribeTopic val | MQTTErrorUnsubscribeConnected val | MQTTErrorPublishTopic val | MQTTErrorPublishConnected val | MQTTErrorConnectFailedRetry val | MQTTErrorConnectFailed val | MQTTErrorSocketRetry val | MQTTErrorSocket val | MQTTErrorTLSConfiguration val | MQTTErrorTLSAuthentication val | MQTTErrorConnectProtocolRetry val | MQTTErrorConnectProtocol val | MQTTErrorConnectID val | MQTTErrorConnectServerRetry val | MQTTErrorConnectServer val | MQTTErrorConnectAuthentication val | MQTTErrorConnectAuthorization val | MQTTErrorSubscribeFailure val | MQTTErrorServerCode val | MQTTErrorUnknownCode val | MQTTErrorUnexpectedFormat val), info: Array[U8 val] val = recover) : None val Parameters \u00b6 conn: MQTTConnectionInterface ref err: ( MQTTErrorConnectConnected val | MQTTErrorConnectSocket val | MQTTErrorDisconnectDisconnected val | MQTTErrorSubscribeTopic val | MQTTErrorSubscribeQoS val | MQTTErrorSubscribeConnected val | MQTTErrorUnsubscribeTopic val | MQTTErrorUnsubscribeConnected val | MQTTErrorPublishTopic val | MQTTErrorPublishConnected val | MQTTErrorConnectFailedRetry val | MQTTErrorConnectFailed val | MQTTErrorSocketRetry val | MQTTErrorSocket val | MQTTErrorTLSConfiguration val | MQTTErrorTLSAuthentication val | MQTTErrorConnectProtocolRetry val | MQTTErrorConnectProtocol val | MQTTErrorConnectID val | MQTTErrorConnectServerRetry val | MQTTErrorConnectServer val | MQTTErrorConnectAuthentication val | MQTTErrorConnectAuthorization val | MQTTErrorSubscribeFailure val | MQTTErrorServerCode val | MQTTErrorUnknownCode val | MQTTErrorUnexpectedFormat val) info: Array [ U8 val] val = recover Returns \u00b6 None val","title":"interface MQTTConnectionNotify"},{"location":"mqtt-MQTTConnectionNotify/#mqttconnectionnotify","text":"[Source] A notify interface to create an event-based client class for your MQTT connections. At the very least, it must implement the on_connect() method. interface ref MQTTConnectionNotify","title":"MQTTConnectionNotify"},{"location":"mqtt-MQTTConnectionNotify/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTConnectionNotify/#on_connect","text":"[Source] Called after successfully connecting to an MQTT broker. Receives the connection and if a session is available in the broker. This method must be implemented. fun ref on_connect( conn: MQTTConnectionInterface ref, session_present: Bool val) : None val","title":"on_connect"},{"location":"mqtt-MQTTConnectionNotify/#parameters","text":"conn: MQTTConnectionInterface ref session_present: Bool val","title":"Parameters"},{"location":"mqtt-MQTTConnectionNotify/#returns","text":"None val","title":"Returns"},{"location":"mqtt-MQTTConnectionNotify/#on_message","text":"[Source] Called upon receiving a PUBLISH message from the broker. Receives the connection and said message. fun ref on_message( conn: MQTTConnectionInterface ref, packet: MQTTPacket val) : None val","title":"on_message"},{"location":"mqtt-MQTTConnectionNotify/#parameters_1","text":"conn: MQTTConnectionInterface ref packet: MQTTPacket val","title":"Parameters"},{"location":"mqtt-MQTTConnectionNotify/#returns_1","text":"None val","title":"Returns"},{"location":"mqtt-MQTTConnectionNotify/#on_publish","text":"[Source] Called after succesfully publishing a message to the broker. Receives the connection and said message. fun ref on_publish( conn: MQTTConnectionInterface ref, packet: MQTTPacket val) : None val","title":"on_publish"},{"location":"mqtt-MQTTConnectionNotify/#parameters_2","text":"conn: MQTTConnectionInterface ref packet: MQTTPacket val","title":"Parameters"},{"location":"mqtt-MQTTConnectionNotify/#returns_2","text":"None val","title":"Returns"},{"location":"mqtt-MQTTConnectionNotify/#on_subscribe","text":"[Source] Called after successfully subscribing to a topic. Receives the connection, said topic, and the associated QoS level of the subscription (from 0 to 2). fun ref on_subscribe( conn: MQTTConnectionInterface ref, topic: String val, qos: U8 val) : None val","title":"on_subscribe"},{"location":"mqtt-MQTTConnectionNotify/#parameters_3","text":"conn: MQTTConnectionInterface ref topic: String val qos: U8 val","title":"Parameters"},{"location":"mqtt-MQTTConnectionNotify/#returns_3","text":"None val","title":"Returns"},{"location":"mqtt-MQTTConnectionNotify/#on_unsubscribe","text":"[Source] Called after successfully unsubscribing from a topic. Receives the connection and said topic. fun ref on_unsubscribe( conn: MQTTConnectionInterface ref, topic: String val) : None val","title":"on_unsubscribe"},{"location":"mqtt-MQTTConnectionNotify/#parameters_4","text":"conn: MQTTConnectionInterface ref topic: String val","title":"Parameters"},{"location":"mqtt-MQTTConnectionNotify/#returns_4","text":"None val","title":"Returns"},{"location":"mqtt-MQTTConnectionNotify/#on_ping","text":"[Source] Called after a ping request is replied by the server. Receives the connection. fun ref on_ping( conn: MQTTConnectionInterface ref) : None val","title":"on_ping"},{"location":"mqtt-MQTTConnectionNotify/#parameters_5","text":"conn: MQTTConnectionInterface ref","title":"Parameters"},{"location":"mqtt-MQTTConnectionNotify/#returns_5","text":"None val","title":"Returns"},{"location":"mqtt-MQTTConnectionNotify/#on_disconnect","text":"[Source] Called after the connection to the broker is closed by the user. Receives the connection. When disconnected, packets and subscriptions should no longer be sent, and session data may be lost unless reconnection is set and clean_session' is false . fun ref on_disconnect( conn: MQTTConnectionInterface ref) : None val","title":"on_disconnect"},{"location":"mqtt-MQTTConnectionNotify/#parameters_6","text":"conn: MQTTConnectionInterface ref","title":"Parameters"},{"location":"mqtt-MQTTConnectionNotify/#returns_6","text":"None val","title":"Returns"},{"location":"mqtt-MQTTConnectionNotify/#on_error","text":"[Source] Called when an error occurs. Receives the connection, the error code, and any additional byte array info if applicable. Some errors may result in the connection to the server being closed afterwards. fun ref on_error( conn: MQTTConnectionInterface ref, err: (MQTTErrorConnectConnected val | MQTTErrorConnectSocket val | MQTTErrorDisconnectDisconnected val | MQTTErrorSubscribeTopic val | MQTTErrorSubscribeQoS val | MQTTErrorSubscribeConnected val | MQTTErrorUnsubscribeTopic val | MQTTErrorUnsubscribeConnected val | MQTTErrorPublishTopic val | MQTTErrorPublishConnected val | MQTTErrorConnectFailedRetry val | MQTTErrorConnectFailed val | MQTTErrorSocketRetry val | MQTTErrorSocket val | MQTTErrorTLSConfiguration val | MQTTErrorTLSAuthentication val | MQTTErrorConnectProtocolRetry val | MQTTErrorConnectProtocol val | MQTTErrorConnectID val | MQTTErrorConnectServerRetry val | MQTTErrorConnectServer val | MQTTErrorConnectAuthentication val | MQTTErrorConnectAuthorization val | MQTTErrorSubscribeFailure val | MQTTErrorServerCode val | MQTTErrorUnknownCode val | MQTTErrorUnexpectedFormat val), info: Array[U8 val] val = recover) : None val","title":"on_error"},{"location":"mqtt-MQTTConnectionNotify/#parameters_7","text":"conn: MQTTConnectionInterface ref err: ( MQTTErrorConnectConnected val | MQTTErrorConnectSocket val | MQTTErrorDisconnectDisconnected val | MQTTErrorSubscribeTopic val | MQTTErrorSubscribeQoS val | MQTTErrorSubscribeConnected val | MQTTErrorUnsubscribeTopic val | MQTTErrorUnsubscribeConnected val | MQTTErrorPublishTopic val | MQTTErrorPublishConnected val | MQTTErrorConnectFailedRetry val | MQTTErrorConnectFailed val | MQTTErrorSocketRetry val | MQTTErrorSocket val | MQTTErrorTLSConfiguration val | MQTTErrorTLSAuthentication val | MQTTErrorConnectProtocolRetry val | MQTTErrorConnectProtocol val | MQTTErrorConnectID val | MQTTErrorConnectServerRetry val | MQTTErrorConnectServer val | MQTTErrorConnectAuthentication val | MQTTErrorConnectAuthorization val | MQTTErrorSubscribeFailure val | MQTTErrorServerCode val | MQTTErrorUnknownCode val | MQTTErrorUnexpectedFormat val) info: Array [ U8 val] val = recover","title":"Parameters"},{"location":"mqtt-MQTTConnectionNotify/#returns_7","text":"None val","title":"Returns"},{"location":"mqtt-MQTTError/","text":"MQTTError \u00b6 [Source] A type for all the possible errors raised by the connection to the notify class. Depending on the type of error, the user may choose to handle or ignore them. type MQTTError is (MQTTErrorConnectConnected val | MQTTErrorConnectSocket val | MQTTErrorDisconnectDisconnected val | MQTTErrorSubscribeTopic val | MQTTErrorSubscribeQoS val | MQTTErrorSubscribeConnected val | MQTTErrorUnsubscribeTopic val | MQTTErrorUnsubscribeConnected val | MQTTErrorPublishTopic val | MQTTErrorPublishConnected val | MQTTErrorConnectFailedRetry val | MQTTErrorConnectFailed val | MQTTErrorSocketRetry val | MQTTErrorSocket val | MQTTErrorTLSConfiguration val | MQTTErrorTLSAuthentication val | MQTTErrorConnectProtocolRetry val | MQTTErrorConnectProtocol val | MQTTErrorConnectID val | MQTTErrorConnectServerRetry val | MQTTErrorConnectServer val | MQTTErrorConnectAuthentication val | MQTTErrorConnectAuthorization val | MQTTErrorSubscribeFailure val | MQTTErrorServerCode val | MQTTErrorUnknownCode val | MQTTErrorUnexpectedFormat val) Type Alias For \u00b6 ( MQTTErrorConnectConnected val | MQTTErrorConnectSocket val | MQTTErrorDisconnectDisconnected val | MQTTErrorSubscribeTopic val | MQTTErrorSubscribeQoS val | MQTTErrorSubscribeConnected val | MQTTErrorUnsubscribeTopic val | MQTTErrorUnsubscribeConnected val | MQTTErrorPublishTopic val | MQTTErrorPublishConnected val | MQTTErrorConnectFailedRetry val | MQTTErrorConnectFailed val | MQTTErrorSocketRetry val | MQTTErrorSocket val | MQTTErrorTLSConfiguration val | MQTTErrorTLSAuthentication val | MQTTErrorConnectProtocolRetry val | MQTTErrorConnectProtocol val | MQTTErrorConnectID val | MQTTErrorConnectServerRetry val | MQTTErrorConnectServer val | MQTTErrorConnectAuthentication val | MQTTErrorConnectAuthorization val | MQTTErrorSubscribeFailure val | MQTTErrorServerCode val | MQTTErrorUnknownCode val | MQTTErrorUnexpectedFormat val)","title":"type MQTTError"},{"location":"mqtt-MQTTError/#mqtterror","text":"[Source] A type for all the possible errors raised by the connection to the notify class. Depending on the type of error, the user may choose to handle or ignore them. type MQTTError is (MQTTErrorConnectConnected val | MQTTErrorConnectSocket val | MQTTErrorDisconnectDisconnected val | MQTTErrorSubscribeTopic val | MQTTErrorSubscribeQoS val | MQTTErrorSubscribeConnected val | MQTTErrorUnsubscribeTopic val | MQTTErrorUnsubscribeConnected val | MQTTErrorPublishTopic val | MQTTErrorPublishConnected val | MQTTErrorConnectFailedRetry val | MQTTErrorConnectFailed val | MQTTErrorSocketRetry val | MQTTErrorSocket val | MQTTErrorTLSConfiguration val | MQTTErrorTLSAuthentication val | MQTTErrorConnectProtocolRetry val | MQTTErrorConnectProtocol val | MQTTErrorConnectID val | MQTTErrorConnectServerRetry val | MQTTErrorConnectServer val | MQTTErrorConnectAuthentication val | MQTTErrorConnectAuthorization val | MQTTErrorSubscribeFailure val | MQTTErrorServerCode val | MQTTErrorUnknownCode val | MQTTErrorUnexpectedFormat val)","title":"MQTTError"},{"location":"mqtt-MQTTError/#type-alias-for","text":"( MQTTErrorConnectConnected val | MQTTErrorConnectSocket val | MQTTErrorDisconnectDisconnected val | MQTTErrorSubscribeTopic val | MQTTErrorSubscribeQoS val | MQTTErrorSubscribeConnected val | MQTTErrorUnsubscribeTopic val | MQTTErrorUnsubscribeConnected val | MQTTErrorPublishTopic val | MQTTErrorPublishConnected val | MQTTErrorConnectFailedRetry val | MQTTErrorConnectFailed val | MQTTErrorSocketRetry val | MQTTErrorSocket val | MQTTErrorTLSConfiguration val | MQTTErrorTLSAuthentication val | MQTTErrorConnectProtocolRetry val | MQTTErrorConnectProtocol val | MQTTErrorConnectID val | MQTTErrorConnectServerRetry val | MQTTErrorConnectServer val | MQTTErrorConnectAuthentication val | MQTTErrorConnectAuthorization val | MQTTErrorSubscribeFailure val | MQTTErrorServerCode val | MQTTErrorUnknownCode val | MQTTErrorUnexpectedFormat val)","title":"Type Alias For"},{"location":"mqtt-MQTTErrorConnectAuthentication/","text":"MQTTErrorConnectAuthentication \u00b6 [Source] This error is triggered when either the username or the password for the MQTT connection are invalid. The connection actor will automatically end execution. primitive val MQTTErrorConnectAuthentication Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorConnectAuthentication val^ Returns \u00b6 MQTTErrorConnectAuthentication val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorConnectAuthentication val) : Bool val Parameters \u00b6 that: MQTTErrorConnectAuthentication val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorConnectAuthentication val) : Bool val Parameters \u00b6 that: MQTTErrorConnectAuthentication val Returns \u00b6 Bool val","title":"primitive MQTTErrorConnectAuthentication"},{"location":"mqtt-MQTTErrorConnectAuthentication/#mqtterrorconnectauthentication","text":"[Source] This error is triggered when either the username or the password for the MQTT connection are invalid. The connection actor will automatically end execution. primitive val MQTTErrorConnectAuthentication","title":"MQTTErrorConnectAuthentication"},{"location":"mqtt-MQTTErrorConnectAuthentication/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorConnectAuthentication/#create","text":"[Source] new val create() : MQTTErrorConnectAuthentication val^","title":"create"},{"location":"mqtt-MQTTErrorConnectAuthentication/#returns","text":"MQTTErrorConnectAuthentication val^","title":"Returns"},{"location":"mqtt-MQTTErrorConnectAuthentication/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorConnectAuthentication/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorConnectAuthentication/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectAuthentication/#eq","text":"[Source] fun box eq( that: MQTTErrorConnectAuthentication val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorConnectAuthentication/#parameters","text":"that: MQTTErrorConnectAuthentication val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectAuthentication/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectAuthentication/#ne","text":"[Source] fun box ne( that: MQTTErrorConnectAuthentication val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorConnectAuthentication/#parameters_1","text":"that: MQTTErrorConnectAuthentication val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectAuthentication/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectAuthorization/","text":"MQTTErrorConnectAuthorization \u00b6 [Source] This error is triggered when either the client is unauthorized by the broker. The connection actor will automatically end execution. primitive val MQTTErrorConnectAuthorization Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorConnectAuthorization val^ Returns \u00b6 MQTTErrorConnectAuthorization val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorConnectAuthorization val) : Bool val Parameters \u00b6 that: MQTTErrorConnectAuthorization val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorConnectAuthorization val) : Bool val Parameters \u00b6 that: MQTTErrorConnectAuthorization val Returns \u00b6 Bool val","title":"primitive MQTTErrorConnectAuthorization"},{"location":"mqtt-MQTTErrorConnectAuthorization/#mqtterrorconnectauthorization","text":"[Source] This error is triggered when either the client is unauthorized by the broker. The connection actor will automatically end execution. primitive val MQTTErrorConnectAuthorization","title":"MQTTErrorConnectAuthorization"},{"location":"mqtt-MQTTErrorConnectAuthorization/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorConnectAuthorization/#create","text":"[Source] new val create() : MQTTErrorConnectAuthorization val^","title":"create"},{"location":"mqtt-MQTTErrorConnectAuthorization/#returns","text":"MQTTErrorConnectAuthorization val^","title":"Returns"},{"location":"mqtt-MQTTErrorConnectAuthorization/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorConnectAuthorization/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorConnectAuthorization/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectAuthorization/#eq","text":"[Source] fun box eq( that: MQTTErrorConnectAuthorization val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorConnectAuthorization/#parameters","text":"that: MQTTErrorConnectAuthorization val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectAuthorization/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectAuthorization/#ne","text":"[Source] fun box ne( that: MQTTErrorConnectAuthorization val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorConnectAuthorization/#parameters_1","text":"that: MQTTErrorConnectAuthorization val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectAuthorization/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectConnected/","text":"MQTTErrorConnectConnected \u00b6 [Source] This error is triggered when a connection is attempted when already connected. primitive val MQTTErrorConnectConnected Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorConnectConnected val^ Returns \u00b6 MQTTErrorConnectConnected val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorConnectConnected val) : Bool val Parameters \u00b6 that: MQTTErrorConnectConnected val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorConnectConnected val) : Bool val Parameters \u00b6 that: MQTTErrorConnectConnected val Returns \u00b6 Bool val","title":"primitive MQTTErrorConnectConnected"},{"location":"mqtt-MQTTErrorConnectConnected/#mqtterrorconnectconnected","text":"[Source] This error is triggered when a connection is attempted when already connected. primitive val MQTTErrorConnectConnected","title":"MQTTErrorConnectConnected"},{"location":"mqtt-MQTTErrorConnectConnected/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorConnectConnected/#create","text":"[Source] new val create() : MQTTErrorConnectConnected val^","title":"create"},{"location":"mqtt-MQTTErrorConnectConnected/#returns","text":"MQTTErrorConnectConnected val^","title":"Returns"},{"location":"mqtt-MQTTErrorConnectConnected/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorConnectConnected/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorConnectConnected/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectConnected/#eq","text":"[Source] fun box eq( that: MQTTErrorConnectConnected val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorConnectConnected/#parameters","text":"that: MQTTErrorConnectConnected val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectConnected/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectConnected/#ne","text":"[Source] fun box ne( that: MQTTErrorConnectConnected val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorConnectConnected/#parameters_1","text":"that: MQTTErrorConnectConnected val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectConnected/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectFailed/","text":"MQTTErrorConnectFailed \u00b6 [Source] This error is triggered when there was a TCP connection error. The connection actor will automatically end execution. primitive val MQTTErrorConnectFailed Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorConnectFailed val^ Returns \u00b6 MQTTErrorConnectFailed val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorConnectFailed val) : Bool val Parameters \u00b6 that: MQTTErrorConnectFailed val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorConnectFailed val) : Bool val Parameters \u00b6 that: MQTTErrorConnectFailed val Returns \u00b6 Bool val","title":"primitive MQTTErrorConnectFailed"},{"location":"mqtt-MQTTErrorConnectFailed/#mqtterrorconnectfailed","text":"[Source] This error is triggered when there was a TCP connection error. The connection actor will automatically end execution. primitive val MQTTErrorConnectFailed","title":"MQTTErrorConnectFailed"},{"location":"mqtt-MQTTErrorConnectFailed/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorConnectFailed/#create","text":"[Source] new val create() : MQTTErrorConnectFailed val^","title":"create"},{"location":"mqtt-MQTTErrorConnectFailed/#returns","text":"MQTTErrorConnectFailed val^","title":"Returns"},{"location":"mqtt-MQTTErrorConnectFailed/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorConnectFailed/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorConnectFailed/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectFailed/#eq","text":"[Source] fun box eq( that: MQTTErrorConnectFailed val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorConnectFailed/#parameters","text":"that: MQTTErrorConnectFailed val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectFailed/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectFailed/#ne","text":"[Source] fun box ne( that: MQTTErrorConnectFailed val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorConnectFailed/#parameters_1","text":"that: MQTTErrorConnectFailed val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectFailed/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectFailedRetry/","text":"MQTTErrorConnectFailedRetry \u00b6 [Source] This error is triggered when there was a TCP connection error. The connection actor will automatically try to reconnect. primitive val MQTTErrorConnectFailedRetry Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorConnectFailedRetry val^ Returns \u00b6 MQTTErrorConnectFailedRetry val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorConnectFailedRetry val) : Bool val Parameters \u00b6 that: MQTTErrorConnectFailedRetry val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorConnectFailedRetry val) : Bool val Parameters \u00b6 that: MQTTErrorConnectFailedRetry val Returns \u00b6 Bool val","title":"primitive MQTTErrorConnectFailedRetry"},{"location":"mqtt-MQTTErrorConnectFailedRetry/#mqtterrorconnectfailedretry","text":"[Source] This error is triggered when there was a TCP connection error. The connection actor will automatically try to reconnect. primitive val MQTTErrorConnectFailedRetry","title":"MQTTErrorConnectFailedRetry"},{"location":"mqtt-MQTTErrorConnectFailedRetry/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorConnectFailedRetry/#create","text":"[Source] new val create() : MQTTErrorConnectFailedRetry val^","title":"create"},{"location":"mqtt-MQTTErrorConnectFailedRetry/#returns","text":"MQTTErrorConnectFailedRetry val^","title":"Returns"},{"location":"mqtt-MQTTErrorConnectFailedRetry/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorConnectFailedRetry/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorConnectFailedRetry/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectFailedRetry/#eq","text":"[Source] fun box eq( that: MQTTErrorConnectFailedRetry val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorConnectFailedRetry/#parameters","text":"that: MQTTErrorConnectFailedRetry val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectFailedRetry/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectFailedRetry/#ne","text":"[Source] fun box ne( that: MQTTErrorConnectFailedRetry val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorConnectFailedRetry/#parameters_1","text":"that: MQTTErrorConnectFailedRetry val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectFailedRetry/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectID/","text":"MQTTErrorConnectID \u00b6 [Source] This error is triggered when the client ID is invalid. The connection actor will automatically end execution. primitive val MQTTErrorConnectID Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorConnectID val^ Returns \u00b6 MQTTErrorConnectID val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorConnectID val) : Bool val Parameters \u00b6 that: MQTTErrorConnectID val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorConnectID val) : Bool val Parameters \u00b6 that: MQTTErrorConnectID val Returns \u00b6 Bool val","title":"primitive MQTTErrorConnectID"},{"location":"mqtt-MQTTErrorConnectID/#mqtterrorconnectid","text":"[Source] This error is triggered when the client ID is invalid. The connection actor will automatically end execution. primitive val MQTTErrorConnectID","title":"MQTTErrorConnectID"},{"location":"mqtt-MQTTErrorConnectID/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorConnectID/#create","text":"[Source] new val create() : MQTTErrorConnectID val^","title":"create"},{"location":"mqtt-MQTTErrorConnectID/#returns","text":"MQTTErrorConnectID val^","title":"Returns"},{"location":"mqtt-MQTTErrorConnectID/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorConnectID/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorConnectID/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectID/#eq","text":"[Source] fun box eq( that: MQTTErrorConnectID val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorConnectID/#parameters","text":"that: MQTTErrorConnectID val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectID/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectID/#ne","text":"[Source] fun box ne( that: MQTTErrorConnectID val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorConnectID/#parameters_1","text":"that: MQTTErrorConnectID val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectID/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectProtocol/","text":"MQTTErrorConnectProtocol \u00b6 [Source] This error is triggered when the broker does not accept the current protocol version. The connection actor will automatically end execution. primitive val MQTTErrorConnectProtocol Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorConnectProtocol val^ Returns \u00b6 MQTTErrorConnectProtocol val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorConnectProtocol val) : Bool val Parameters \u00b6 that: MQTTErrorConnectProtocol val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorConnectProtocol val) : Bool val Parameters \u00b6 that: MQTTErrorConnectProtocol val Returns \u00b6 Bool val","title":"primitive MQTTErrorConnectProtocol"},{"location":"mqtt-MQTTErrorConnectProtocol/#mqtterrorconnectprotocol","text":"[Source] This error is triggered when the broker does not accept the current protocol version. The connection actor will automatically end execution. primitive val MQTTErrorConnectProtocol","title":"MQTTErrorConnectProtocol"},{"location":"mqtt-MQTTErrorConnectProtocol/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorConnectProtocol/#create","text":"[Source] new val create() : MQTTErrorConnectProtocol val^","title":"create"},{"location":"mqtt-MQTTErrorConnectProtocol/#returns","text":"MQTTErrorConnectProtocol val^","title":"Returns"},{"location":"mqtt-MQTTErrorConnectProtocol/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorConnectProtocol/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorConnectProtocol/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectProtocol/#eq","text":"[Source] fun box eq( that: MQTTErrorConnectProtocol val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorConnectProtocol/#parameters","text":"that: MQTTErrorConnectProtocol val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectProtocol/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectProtocol/#ne","text":"[Source] fun box ne( that: MQTTErrorConnectProtocol val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorConnectProtocol/#parameters_1","text":"that: MQTTErrorConnectProtocol val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectProtocol/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectProtocolRetry/","text":"MQTTErrorConnectProtocolRetry \u00b6 [Source] This error is triggered when the broker does not accept the current protocol version. The connection actor will automatically downgrade to a lower protocol version and try to reconnect. primitive val MQTTErrorConnectProtocolRetry Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorConnectProtocolRetry val^ Returns \u00b6 MQTTErrorConnectProtocolRetry val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorConnectProtocolRetry val) : Bool val Parameters \u00b6 that: MQTTErrorConnectProtocolRetry val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorConnectProtocolRetry val) : Bool val Parameters \u00b6 that: MQTTErrorConnectProtocolRetry val Returns \u00b6 Bool val","title":"primitive MQTTErrorConnectProtocolRetry"},{"location":"mqtt-MQTTErrorConnectProtocolRetry/#mqtterrorconnectprotocolretry","text":"[Source] This error is triggered when the broker does not accept the current protocol version. The connection actor will automatically downgrade to a lower protocol version and try to reconnect. primitive val MQTTErrorConnectProtocolRetry","title":"MQTTErrorConnectProtocolRetry"},{"location":"mqtt-MQTTErrorConnectProtocolRetry/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorConnectProtocolRetry/#create","text":"[Source] new val create() : MQTTErrorConnectProtocolRetry val^","title":"create"},{"location":"mqtt-MQTTErrorConnectProtocolRetry/#returns","text":"MQTTErrorConnectProtocolRetry val^","title":"Returns"},{"location":"mqtt-MQTTErrorConnectProtocolRetry/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorConnectProtocolRetry/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorConnectProtocolRetry/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectProtocolRetry/#eq","text":"[Source] fun box eq( that: MQTTErrorConnectProtocolRetry val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorConnectProtocolRetry/#parameters","text":"that: MQTTErrorConnectProtocolRetry val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectProtocolRetry/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectProtocolRetry/#ne","text":"[Source] fun box ne( that: MQTTErrorConnectProtocolRetry val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorConnectProtocolRetry/#parameters_1","text":"that: MQTTErrorConnectProtocolRetry val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectProtocolRetry/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectServer/","text":"MQTTErrorConnectServer \u00b6 [Source] This error is triggered when the MQTT server is currently unavailable. The connection actor will automatically end execution. primitive val MQTTErrorConnectServer Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorConnectServer val^ Returns \u00b6 MQTTErrorConnectServer val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorConnectServer val) : Bool val Parameters \u00b6 that: MQTTErrorConnectServer val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorConnectServer val) : Bool val Parameters \u00b6 that: MQTTErrorConnectServer val Returns \u00b6 Bool val","title":"primitive MQTTErrorConnectServer"},{"location":"mqtt-MQTTErrorConnectServer/#mqtterrorconnectserver","text":"[Source] This error is triggered when the MQTT server is currently unavailable. The connection actor will automatically end execution. primitive val MQTTErrorConnectServer","title":"MQTTErrorConnectServer"},{"location":"mqtt-MQTTErrorConnectServer/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorConnectServer/#create","text":"[Source] new val create() : MQTTErrorConnectServer val^","title":"create"},{"location":"mqtt-MQTTErrorConnectServer/#returns","text":"MQTTErrorConnectServer val^","title":"Returns"},{"location":"mqtt-MQTTErrorConnectServer/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorConnectServer/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorConnectServer/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectServer/#eq","text":"[Source] fun box eq( that: MQTTErrorConnectServer val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorConnectServer/#parameters","text":"that: MQTTErrorConnectServer val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectServer/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectServer/#ne","text":"[Source] fun box ne( that: MQTTErrorConnectServer val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorConnectServer/#parameters_1","text":"that: MQTTErrorConnectServer val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectServer/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectServerRetry/","text":"MQTTErrorConnectServerRetry \u00b6 [Source] This error is triggered when the MQTT server is currently unavailable. The connection actor will automatically try to reconnect. primitive val MQTTErrorConnectServerRetry Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorConnectServerRetry val^ Returns \u00b6 MQTTErrorConnectServerRetry val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorConnectServerRetry val) : Bool val Parameters \u00b6 that: MQTTErrorConnectServerRetry val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorConnectServerRetry val) : Bool val Parameters \u00b6 that: MQTTErrorConnectServerRetry val Returns \u00b6 Bool val","title":"primitive MQTTErrorConnectServerRetry"},{"location":"mqtt-MQTTErrorConnectServerRetry/#mqtterrorconnectserverretry","text":"[Source] This error is triggered when the MQTT server is currently unavailable. The connection actor will automatically try to reconnect. primitive val MQTTErrorConnectServerRetry","title":"MQTTErrorConnectServerRetry"},{"location":"mqtt-MQTTErrorConnectServerRetry/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorConnectServerRetry/#create","text":"[Source] new val create() : MQTTErrorConnectServerRetry val^","title":"create"},{"location":"mqtt-MQTTErrorConnectServerRetry/#returns","text":"MQTTErrorConnectServerRetry val^","title":"Returns"},{"location":"mqtt-MQTTErrorConnectServerRetry/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorConnectServerRetry/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorConnectServerRetry/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectServerRetry/#eq","text":"[Source] fun box eq( that: MQTTErrorConnectServerRetry val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorConnectServerRetry/#parameters","text":"that: MQTTErrorConnectServerRetry val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectServerRetry/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectServerRetry/#ne","text":"[Source] fun box ne( that: MQTTErrorConnectServerRetry val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorConnectServerRetry/#parameters_1","text":"that: MQTTErrorConnectServerRetry val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectServerRetry/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectSocket/","text":"MQTTErrorConnectSocket \u00b6 [Source] This error is triggered when a connection is attempted without a previous TCP connection. primitive val MQTTErrorConnectSocket Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorConnectSocket val^ Returns \u00b6 MQTTErrorConnectSocket val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorConnectSocket val) : Bool val Parameters \u00b6 that: MQTTErrorConnectSocket val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorConnectSocket val) : Bool val Parameters \u00b6 that: MQTTErrorConnectSocket val Returns \u00b6 Bool val","title":"primitive MQTTErrorConnectSocket"},{"location":"mqtt-MQTTErrorConnectSocket/#mqtterrorconnectsocket","text":"[Source] This error is triggered when a connection is attempted without a previous TCP connection. primitive val MQTTErrorConnectSocket","title":"MQTTErrorConnectSocket"},{"location":"mqtt-MQTTErrorConnectSocket/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorConnectSocket/#create","text":"[Source] new val create() : MQTTErrorConnectSocket val^","title":"create"},{"location":"mqtt-MQTTErrorConnectSocket/#returns","text":"MQTTErrorConnectSocket val^","title":"Returns"},{"location":"mqtt-MQTTErrorConnectSocket/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorConnectSocket/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorConnectSocket/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectSocket/#eq","text":"[Source] fun box eq( that: MQTTErrorConnectSocket val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorConnectSocket/#parameters","text":"that: MQTTErrorConnectSocket val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectSocket/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorConnectSocket/#ne","text":"[Source] fun box ne( that: MQTTErrorConnectSocket val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorConnectSocket/#parameters_1","text":"that: MQTTErrorConnectSocket val","title":"Parameters"},{"location":"mqtt-MQTTErrorConnectSocket/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorDisconnectDisconnected/","text":"MQTTErrorDisconnectDisconnected \u00b6 [Source] This error is triggered when a disconnection is attempted without a previous TCP connection. primitive val MQTTErrorDisconnectDisconnected Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorDisconnectDisconnected val^ Returns \u00b6 MQTTErrorDisconnectDisconnected val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorDisconnectDisconnected val) : Bool val Parameters \u00b6 that: MQTTErrorDisconnectDisconnected val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorDisconnectDisconnected val) : Bool val Parameters \u00b6 that: MQTTErrorDisconnectDisconnected val Returns \u00b6 Bool val","title":"primitive MQTTErrorDisconnectDisconnected"},{"location":"mqtt-MQTTErrorDisconnectDisconnected/#mqtterrordisconnectdisconnected","text":"[Source] This error is triggered when a disconnection is attempted without a previous TCP connection. primitive val MQTTErrorDisconnectDisconnected","title":"MQTTErrorDisconnectDisconnected"},{"location":"mqtt-MQTTErrorDisconnectDisconnected/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorDisconnectDisconnected/#create","text":"[Source] new val create() : MQTTErrorDisconnectDisconnected val^","title":"create"},{"location":"mqtt-MQTTErrorDisconnectDisconnected/#returns","text":"MQTTErrorDisconnectDisconnected val^","title":"Returns"},{"location":"mqtt-MQTTErrorDisconnectDisconnected/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorDisconnectDisconnected/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorDisconnectDisconnected/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorDisconnectDisconnected/#eq","text":"[Source] fun box eq( that: MQTTErrorDisconnectDisconnected val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorDisconnectDisconnected/#parameters","text":"that: MQTTErrorDisconnectDisconnected val","title":"Parameters"},{"location":"mqtt-MQTTErrorDisconnectDisconnected/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorDisconnectDisconnected/#ne","text":"[Source] fun box ne( that: MQTTErrorDisconnectDisconnected val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorDisconnectDisconnected/#parameters_1","text":"that: MQTTErrorDisconnectDisconnected val","title":"Parameters"},{"location":"mqtt-MQTTErrorDisconnectDisconnected/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorPublishConnected/","text":"MQTTErrorPublishConnected \u00b6 [Source] This error is triggered when publishing without a previous TCP connection. primitive val MQTTErrorPublishConnected Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorPublishConnected val^ Returns \u00b6 MQTTErrorPublishConnected val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorPublishConnected val) : Bool val Parameters \u00b6 that: MQTTErrorPublishConnected val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorPublishConnected val) : Bool val Parameters \u00b6 that: MQTTErrorPublishConnected val Returns \u00b6 Bool val","title":"primitive MQTTErrorPublishConnected"},{"location":"mqtt-MQTTErrorPublishConnected/#mqtterrorpublishconnected","text":"[Source] This error is triggered when publishing without a previous TCP connection. primitive val MQTTErrorPublishConnected","title":"MQTTErrorPublishConnected"},{"location":"mqtt-MQTTErrorPublishConnected/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorPublishConnected/#create","text":"[Source] new val create() : MQTTErrorPublishConnected val^","title":"create"},{"location":"mqtt-MQTTErrorPublishConnected/#returns","text":"MQTTErrorPublishConnected val^","title":"Returns"},{"location":"mqtt-MQTTErrorPublishConnected/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorPublishConnected/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorPublishConnected/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorPublishConnected/#eq","text":"[Source] fun box eq( that: MQTTErrorPublishConnected val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorPublishConnected/#parameters","text":"that: MQTTErrorPublishConnected val","title":"Parameters"},{"location":"mqtt-MQTTErrorPublishConnected/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorPublishConnected/#ne","text":"[Source] fun box ne( that: MQTTErrorPublishConnected val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorPublishConnected/#parameters_1","text":"that: MQTTErrorPublishConnected val","title":"Parameters"},{"location":"mqtt-MQTTErrorPublishConnected/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorPublishTopic/","text":"MQTTErrorPublishTopic \u00b6 [Source] This error is triggered when publishing with an invalid topic filter. primitive val MQTTErrorPublishTopic Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorPublishTopic val^ Returns \u00b6 MQTTErrorPublishTopic val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorPublishTopic val) : Bool val Parameters \u00b6 that: MQTTErrorPublishTopic val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorPublishTopic val) : Bool val Parameters \u00b6 that: MQTTErrorPublishTopic val Returns \u00b6 Bool val","title":"primitive MQTTErrorPublishTopic"},{"location":"mqtt-MQTTErrorPublishTopic/#mqtterrorpublishtopic","text":"[Source] This error is triggered when publishing with an invalid topic filter. primitive val MQTTErrorPublishTopic","title":"MQTTErrorPublishTopic"},{"location":"mqtt-MQTTErrorPublishTopic/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorPublishTopic/#create","text":"[Source] new val create() : MQTTErrorPublishTopic val^","title":"create"},{"location":"mqtt-MQTTErrorPublishTopic/#returns","text":"MQTTErrorPublishTopic val^","title":"Returns"},{"location":"mqtt-MQTTErrorPublishTopic/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorPublishTopic/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorPublishTopic/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorPublishTopic/#eq","text":"[Source] fun box eq( that: MQTTErrorPublishTopic val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorPublishTopic/#parameters","text":"that: MQTTErrorPublishTopic val","title":"Parameters"},{"location":"mqtt-MQTTErrorPublishTopic/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorPublishTopic/#ne","text":"[Source] fun box ne( that: MQTTErrorPublishTopic val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorPublishTopic/#parameters_1","text":"that: MQTTErrorPublishTopic val","title":"Parameters"},{"location":"mqtt-MQTTErrorPublishTopic/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorServerCode/","text":"MQTTErrorServerCode \u00b6 [Source] This error is triggered when a server control code (such as CONNECT or SUBSCRIBE) is sent to the client. The connection actor will automatically end execution. The additional info array will contain the control code string bytes. primitive val MQTTErrorServerCode Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorServerCode val^ Returns \u00b6 MQTTErrorServerCode val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorServerCode val) : Bool val Parameters \u00b6 that: MQTTErrorServerCode val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorServerCode val) : Bool val Parameters \u00b6 that: MQTTErrorServerCode val Returns \u00b6 Bool val","title":"primitive MQTTErrorServerCode"},{"location":"mqtt-MQTTErrorServerCode/#mqtterrorservercode","text":"[Source] This error is triggered when a server control code (such as CONNECT or SUBSCRIBE) is sent to the client. The connection actor will automatically end execution. The additional info array will contain the control code string bytes. primitive val MQTTErrorServerCode","title":"MQTTErrorServerCode"},{"location":"mqtt-MQTTErrorServerCode/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorServerCode/#create","text":"[Source] new val create() : MQTTErrorServerCode val^","title":"create"},{"location":"mqtt-MQTTErrorServerCode/#returns","text":"MQTTErrorServerCode val^","title":"Returns"},{"location":"mqtt-MQTTErrorServerCode/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorServerCode/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorServerCode/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorServerCode/#eq","text":"[Source] fun box eq( that: MQTTErrorServerCode val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorServerCode/#parameters","text":"that: MQTTErrorServerCode val","title":"Parameters"},{"location":"mqtt-MQTTErrorServerCode/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorServerCode/#ne","text":"[Source] fun box ne( that: MQTTErrorServerCode val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorServerCode/#parameters_1","text":"that: MQTTErrorServerCode val","title":"Parameters"},{"location":"mqtt-MQTTErrorServerCode/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorSocket/","text":"MQTTErrorSocket \u00b6 [Source] This error is triggered when the TCP connection was closed by the remote server. The connection actor will automatically end execution. primitive val MQTTErrorSocket Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorSocket val^ Returns \u00b6 MQTTErrorSocket val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorSocket val) : Bool val Parameters \u00b6 that: MQTTErrorSocket val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorSocket val) : Bool val Parameters \u00b6 that: MQTTErrorSocket val Returns \u00b6 Bool val","title":"primitive MQTTErrorSocket"},{"location":"mqtt-MQTTErrorSocket/#mqtterrorsocket","text":"[Source] This error is triggered when the TCP connection was closed by the remote server. The connection actor will automatically end execution. primitive val MQTTErrorSocket","title":"MQTTErrorSocket"},{"location":"mqtt-MQTTErrorSocket/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorSocket/#create","text":"[Source] new val create() : MQTTErrorSocket val^","title":"create"},{"location":"mqtt-MQTTErrorSocket/#returns","text":"MQTTErrorSocket val^","title":"Returns"},{"location":"mqtt-MQTTErrorSocket/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorSocket/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorSocket/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorSocket/#eq","text":"[Source] fun box eq( that: MQTTErrorSocket val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorSocket/#parameters","text":"that: MQTTErrorSocket val","title":"Parameters"},{"location":"mqtt-MQTTErrorSocket/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorSocket/#ne","text":"[Source] fun box ne( that: MQTTErrorSocket val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorSocket/#parameters_1","text":"that: MQTTErrorSocket val","title":"Parameters"},{"location":"mqtt-MQTTErrorSocket/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorSocketRetry/","text":"MQTTErrorSocketRetry \u00b6 [Source] This error is triggered when the TCP connection was closed by the remote server. The connection actor will automatically try to reconnect. primitive val MQTTErrorSocketRetry Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorSocketRetry val^ Returns \u00b6 MQTTErrorSocketRetry val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorSocketRetry val) : Bool val Parameters \u00b6 that: MQTTErrorSocketRetry val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorSocketRetry val) : Bool val Parameters \u00b6 that: MQTTErrorSocketRetry val Returns \u00b6 Bool val","title":"primitive MQTTErrorSocketRetry"},{"location":"mqtt-MQTTErrorSocketRetry/#mqtterrorsocketretry","text":"[Source] This error is triggered when the TCP connection was closed by the remote server. The connection actor will automatically try to reconnect. primitive val MQTTErrorSocketRetry","title":"MQTTErrorSocketRetry"},{"location":"mqtt-MQTTErrorSocketRetry/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorSocketRetry/#create","text":"[Source] new val create() : MQTTErrorSocketRetry val^","title":"create"},{"location":"mqtt-MQTTErrorSocketRetry/#returns","text":"MQTTErrorSocketRetry val^","title":"Returns"},{"location":"mqtt-MQTTErrorSocketRetry/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorSocketRetry/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorSocketRetry/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorSocketRetry/#eq","text":"[Source] fun box eq( that: MQTTErrorSocketRetry val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorSocketRetry/#parameters","text":"that: MQTTErrorSocketRetry val","title":"Parameters"},{"location":"mqtt-MQTTErrorSocketRetry/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorSocketRetry/#ne","text":"[Source] fun box ne( that: MQTTErrorSocketRetry val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorSocketRetry/#parameters_1","text":"that: MQTTErrorSocketRetry val","title":"Parameters"},{"location":"mqtt-MQTTErrorSocketRetry/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorSubscribeConnected/","text":"MQTTErrorSubscribeConnected \u00b6 [Source] This error is triggered when subscribing without a previous TCP connection. primitive val MQTTErrorSubscribeConnected Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorSubscribeConnected val^ Returns \u00b6 MQTTErrorSubscribeConnected val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorSubscribeConnected val) : Bool val Parameters \u00b6 that: MQTTErrorSubscribeConnected val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorSubscribeConnected val) : Bool val Parameters \u00b6 that: MQTTErrorSubscribeConnected val Returns \u00b6 Bool val","title":"primitive MQTTErrorSubscribeConnected"},{"location":"mqtt-MQTTErrorSubscribeConnected/#mqtterrorsubscribeconnected","text":"[Source] This error is triggered when subscribing without a previous TCP connection. primitive val MQTTErrorSubscribeConnected","title":"MQTTErrorSubscribeConnected"},{"location":"mqtt-MQTTErrorSubscribeConnected/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorSubscribeConnected/#create","text":"[Source] new val create() : MQTTErrorSubscribeConnected val^","title":"create"},{"location":"mqtt-MQTTErrorSubscribeConnected/#returns","text":"MQTTErrorSubscribeConnected val^","title":"Returns"},{"location":"mqtt-MQTTErrorSubscribeConnected/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorSubscribeConnected/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorSubscribeConnected/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorSubscribeConnected/#eq","text":"[Source] fun box eq( that: MQTTErrorSubscribeConnected val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorSubscribeConnected/#parameters","text":"that: MQTTErrorSubscribeConnected val","title":"Parameters"},{"location":"mqtt-MQTTErrorSubscribeConnected/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorSubscribeConnected/#ne","text":"[Source] fun box ne( that: MQTTErrorSubscribeConnected val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorSubscribeConnected/#parameters_1","text":"that: MQTTErrorSubscribeConnected val","title":"Parameters"},{"location":"mqtt-MQTTErrorSubscribeConnected/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorSubscribeFailure/","text":"MQTTErrorSubscribeFailure \u00b6 [Source] This error is triggered when the subscription to a certain topic filter is denied by the server. The additional info array will contain the failed subscription topic. primitive val MQTTErrorSubscribeFailure Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorSubscribeFailure val^ Returns \u00b6 MQTTErrorSubscribeFailure val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorSubscribeFailure val) : Bool val Parameters \u00b6 that: MQTTErrorSubscribeFailure val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorSubscribeFailure val) : Bool val Parameters \u00b6 that: MQTTErrorSubscribeFailure val Returns \u00b6 Bool val","title":"primitive MQTTErrorSubscribeFailure"},{"location":"mqtt-MQTTErrorSubscribeFailure/#mqtterrorsubscribefailure","text":"[Source] This error is triggered when the subscription to a certain topic filter is denied by the server. The additional info array will contain the failed subscription topic. primitive val MQTTErrorSubscribeFailure","title":"MQTTErrorSubscribeFailure"},{"location":"mqtt-MQTTErrorSubscribeFailure/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorSubscribeFailure/#create","text":"[Source] new val create() : MQTTErrorSubscribeFailure val^","title":"create"},{"location":"mqtt-MQTTErrorSubscribeFailure/#returns","text":"MQTTErrorSubscribeFailure val^","title":"Returns"},{"location":"mqtt-MQTTErrorSubscribeFailure/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorSubscribeFailure/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorSubscribeFailure/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorSubscribeFailure/#eq","text":"[Source] fun box eq( that: MQTTErrorSubscribeFailure val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorSubscribeFailure/#parameters","text":"that: MQTTErrorSubscribeFailure val","title":"Parameters"},{"location":"mqtt-MQTTErrorSubscribeFailure/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorSubscribeFailure/#ne","text":"[Source] fun box ne( that: MQTTErrorSubscribeFailure val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorSubscribeFailure/#parameters_1","text":"that: MQTTErrorSubscribeFailure val","title":"Parameters"},{"location":"mqtt-MQTTErrorSubscribeFailure/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorSubscribeQoS/","text":"MQTTErrorSubscribeQoS \u00b6 [Source] This error is triggered when subscribing with an invalid QoS value. primitive val MQTTErrorSubscribeQoS Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorSubscribeQoS val^ Returns \u00b6 MQTTErrorSubscribeQoS val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorSubscribeQoS val) : Bool val Parameters \u00b6 that: MQTTErrorSubscribeQoS val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorSubscribeQoS val) : Bool val Parameters \u00b6 that: MQTTErrorSubscribeQoS val Returns \u00b6 Bool val","title":"primitive MQTTErrorSubscribeQoS"},{"location":"mqtt-MQTTErrorSubscribeQoS/#mqtterrorsubscribeqos","text":"[Source] This error is triggered when subscribing with an invalid QoS value. primitive val MQTTErrorSubscribeQoS","title":"MQTTErrorSubscribeQoS"},{"location":"mqtt-MQTTErrorSubscribeQoS/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorSubscribeQoS/#create","text":"[Source] new val create() : MQTTErrorSubscribeQoS val^","title":"create"},{"location":"mqtt-MQTTErrorSubscribeQoS/#returns","text":"MQTTErrorSubscribeQoS val^","title":"Returns"},{"location":"mqtt-MQTTErrorSubscribeQoS/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorSubscribeQoS/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorSubscribeQoS/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorSubscribeQoS/#eq","text":"[Source] fun box eq( that: MQTTErrorSubscribeQoS val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorSubscribeQoS/#parameters","text":"that: MQTTErrorSubscribeQoS val","title":"Parameters"},{"location":"mqtt-MQTTErrorSubscribeQoS/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorSubscribeQoS/#ne","text":"[Source] fun box ne( that: MQTTErrorSubscribeQoS val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorSubscribeQoS/#parameters_1","text":"that: MQTTErrorSubscribeQoS val","title":"Parameters"},{"location":"mqtt-MQTTErrorSubscribeQoS/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorSubscribeTopic/","text":"MQTTErrorSubscribeTopic \u00b6 [Source] This error is triggered when subscribing with an invalid topic filter. primitive val MQTTErrorSubscribeTopic Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorSubscribeTopic val^ Returns \u00b6 MQTTErrorSubscribeTopic val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorSubscribeTopic val) : Bool val Parameters \u00b6 that: MQTTErrorSubscribeTopic val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorSubscribeTopic val) : Bool val Parameters \u00b6 that: MQTTErrorSubscribeTopic val Returns \u00b6 Bool val","title":"primitive MQTTErrorSubscribeTopic"},{"location":"mqtt-MQTTErrorSubscribeTopic/#mqtterrorsubscribetopic","text":"[Source] This error is triggered when subscribing with an invalid topic filter. primitive val MQTTErrorSubscribeTopic","title":"MQTTErrorSubscribeTopic"},{"location":"mqtt-MQTTErrorSubscribeTopic/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorSubscribeTopic/#create","text":"[Source] new val create() : MQTTErrorSubscribeTopic val^","title":"create"},{"location":"mqtt-MQTTErrorSubscribeTopic/#returns","text":"MQTTErrorSubscribeTopic val^","title":"Returns"},{"location":"mqtt-MQTTErrorSubscribeTopic/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorSubscribeTopic/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorSubscribeTopic/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorSubscribeTopic/#eq","text":"[Source] fun box eq( that: MQTTErrorSubscribeTopic val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorSubscribeTopic/#parameters","text":"that: MQTTErrorSubscribeTopic val","title":"Parameters"},{"location":"mqtt-MQTTErrorSubscribeTopic/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorSubscribeTopic/#ne","text":"[Source] fun box ne( that: MQTTErrorSubscribeTopic val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorSubscribeTopic/#parameters_1","text":"that: MQTTErrorSubscribeTopic val","title":"Parameters"},{"location":"mqtt-MQTTErrorSubscribeTopic/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorTLSAuthentication/","text":"MQTTErrorTLSAuthentication \u00b6 [Source] This error is triggered when the SSL credentials for authentication are invalid. The connection actor will automatically end execution. primitive val MQTTErrorTLSAuthentication Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorTLSAuthentication val^ Returns \u00b6 MQTTErrorTLSAuthentication val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorTLSAuthentication val) : Bool val Parameters \u00b6 that: MQTTErrorTLSAuthentication val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorTLSAuthentication val) : Bool val Parameters \u00b6 that: MQTTErrorTLSAuthentication val Returns \u00b6 Bool val","title":"primitive MQTTErrorTLSAuthentication"},{"location":"mqtt-MQTTErrorTLSAuthentication/#mqtterrortlsauthentication","text":"[Source] This error is triggered when the SSL credentials for authentication are invalid. The connection actor will automatically end execution. primitive val MQTTErrorTLSAuthentication","title":"MQTTErrorTLSAuthentication"},{"location":"mqtt-MQTTErrorTLSAuthentication/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorTLSAuthentication/#create","text":"[Source] new val create() : MQTTErrorTLSAuthentication val^","title":"create"},{"location":"mqtt-MQTTErrorTLSAuthentication/#returns","text":"MQTTErrorTLSAuthentication val^","title":"Returns"},{"location":"mqtt-MQTTErrorTLSAuthentication/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorTLSAuthentication/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorTLSAuthentication/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorTLSAuthentication/#eq","text":"[Source] fun box eq( that: MQTTErrorTLSAuthentication val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorTLSAuthentication/#parameters","text":"that: MQTTErrorTLSAuthentication val","title":"Parameters"},{"location":"mqtt-MQTTErrorTLSAuthentication/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorTLSAuthentication/#ne","text":"[Source] fun box ne( that: MQTTErrorTLSAuthentication val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorTLSAuthentication/#parameters_1","text":"that: MQTTErrorTLSAuthentication val","title":"Parameters"},{"location":"mqtt-MQTTErrorTLSAuthentication/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorTLSConfiguration/","text":"MQTTErrorTLSConfiguration \u00b6 [Source] This error is triggered when an SSL client could not be created due to bad configuration. The connection actor will automatically end execution. primitive val MQTTErrorTLSConfiguration Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorTLSConfiguration val^ Returns \u00b6 MQTTErrorTLSConfiguration val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorTLSConfiguration val) : Bool val Parameters \u00b6 that: MQTTErrorTLSConfiguration val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorTLSConfiguration val) : Bool val Parameters \u00b6 that: MQTTErrorTLSConfiguration val Returns \u00b6 Bool val","title":"primitive MQTTErrorTLSConfiguration"},{"location":"mqtt-MQTTErrorTLSConfiguration/#mqtterrortlsconfiguration","text":"[Source] This error is triggered when an SSL client could not be created due to bad configuration. The connection actor will automatically end execution. primitive val MQTTErrorTLSConfiguration","title":"MQTTErrorTLSConfiguration"},{"location":"mqtt-MQTTErrorTLSConfiguration/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorTLSConfiguration/#create","text":"[Source] new val create() : MQTTErrorTLSConfiguration val^","title":"create"},{"location":"mqtt-MQTTErrorTLSConfiguration/#returns","text":"MQTTErrorTLSConfiguration val^","title":"Returns"},{"location":"mqtt-MQTTErrorTLSConfiguration/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorTLSConfiguration/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorTLSConfiguration/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorTLSConfiguration/#eq","text":"[Source] fun box eq( that: MQTTErrorTLSConfiguration val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorTLSConfiguration/#parameters","text":"that: MQTTErrorTLSConfiguration val","title":"Parameters"},{"location":"mqtt-MQTTErrorTLSConfiguration/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorTLSConfiguration/#ne","text":"[Source] fun box ne( that: MQTTErrorTLSConfiguration val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorTLSConfiguration/#parameters_1","text":"that: MQTTErrorTLSConfiguration val","title":"Parameters"},{"location":"mqtt-MQTTErrorTLSConfiguration/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorUnexpectedFormat/","text":"MQTTErrorUnexpectedFormat \u00b6 [Source] This error is triggered when there is an error when parsing a packet. The connection actor will automatically end execution. The additional info array will contain the bytes of the failed parsed packet. primitive val MQTTErrorUnexpectedFormat Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorUnexpectedFormat val^ Returns \u00b6 MQTTErrorUnexpectedFormat val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorUnexpectedFormat val) : Bool val Parameters \u00b6 that: MQTTErrorUnexpectedFormat val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorUnexpectedFormat val) : Bool val Parameters \u00b6 that: MQTTErrorUnexpectedFormat val Returns \u00b6 Bool val","title":"primitive MQTTErrorUnexpectedFormat"},{"location":"mqtt-MQTTErrorUnexpectedFormat/#mqtterrorunexpectedformat","text":"[Source] This error is triggered when there is an error when parsing a packet. The connection actor will automatically end execution. The additional info array will contain the bytes of the failed parsed packet. primitive val MQTTErrorUnexpectedFormat","title":"MQTTErrorUnexpectedFormat"},{"location":"mqtt-MQTTErrorUnexpectedFormat/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorUnexpectedFormat/#create","text":"[Source] new val create() : MQTTErrorUnexpectedFormat val^","title":"create"},{"location":"mqtt-MQTTErrorUnexpectedFormat/#returns","text":"MQTTErrorUnexpectedFormat val^","title":"Returns"},{"location":"mqtt-MQTTErrorUnexpectedFormat/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorUnexpectedFormat/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorUnexpectedFormat/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorUnexpectedFormat/#eq","text":"[Source] fun box eq( that: MQTTErrorUnexpectedFormat val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorUnexpectedFormat/#parameters","text":"that: MQTTErrorUnexpectedFormat val","title":"Parameters"},{"location":"mqtt-MQTTErrorUnexpectedFormat/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorUnexpectedFormat/#ne","text":"[Source] fun box ne( that: MQTTErrorUnexpectedFormat val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorUnexpectedFormat/#parameters_1","text":"that: MQTTErrorUnexpectedFormat val","title":"Parameters"},{"location":"mqtt-MQTTErrorUnexpectedFormat/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorUnknownCode/","text":"MQTTErrorUnknownCode \u00b6 [Source] This error is triggered when an unknown control code is sent to the client. The connection actor will automatically end execution. The additional info array will contain the control code byte. primitive val MQTTErrorUnknownCode Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorUnknownCode val^ Returns \u00b6 MQTTErrorUnknownCode val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorUnknownCode val) : Bool val Parameters \u00b6 that: MQTTErrorUnknownCode val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorUnknownCode val) : Bool val Parameters \u00b6 that: MQTTErrorUnknownCode val Returns \u00b6 Bool val","title":"primitive MQTTErrorUnknownCode"},{"location":"mqtt-MQTTErrorUnknownCode/#mqtterrorunknowncode","text":"[Source] This error is triggered when an unknown control code is sent to the client. The connection actor will automatically end execution. The additional info array will contain the control code byte. primitive val MQTTErrorUnknownCode","title":"MQTTErrorUnknownCode"},{"location":"mqtt-MQTTErrorUnknownCode/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorUnknownCode/#create","text":"[Source] new val create() : MQTTErrorUnknownCode val^","title":"create"},{"location":"mqtt-MQTTErrorUnknownCode/#returns","text":"MQTTErrorUnknownCode val^","title":"Returns"},{"location":"mqtt-MQTTErrorUnknownCode/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorUnknownCode/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorUnknownCode/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorUnknownCode/#eq","text":"[Source] fun box eq( that: MQTTErrorUnknownCode val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorUnknownCode/#parameters","text":"that: MQTTErrorUnknownCode val","title":"Parameters"},{"location":"mqtt-MQTTErrorUnknownCode/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorUnknownCode/#ne","text":"[Source] fun box ne( that: MQTTErrorUnknownCode val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorUnknownCode/#parameters_1","text":"that: MQTTErrorUnknownCode val","title":"Parameters"},{"location":"mqtt-MQTTErrorUnknownCode/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorUnsubscribeConnected/","text":"MQTTErrorUnsubscribeConnected \u00b6 [Source] This error is triggered when unsubscribing without a previous TCP connection. primitive val MQTTErrorUnsubscribeConnected Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorUnsubscribeConnected val^ Returns \u00b6 MQTTErrorUnsubscribeConnected val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorUnsubscribeConnected val) : Bool val Parameters \u00b6 that: MQTTErrorUnsubscribeConnected val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorUnsubscribeConnected val) : Bool val Parameters \u00b6 that: MQTTErrorUnsubscribeConnected val Returns \u00b6 Bool val","title":"primitive MQTTErrorUnsubscribeConnected"},{"location":"mqtt-MQTTErrorUnsubscribeConnected/#mqtterrorunsubscribeconnected","text":"[Source] This error is triggered when unsubscribing without a previous TCP connection. primitive val MQTTErrorUnsubscribeConnected","title":"MQTTErrorUnsubscribeConnected"},{"location":"mqtt-MQTTErrorUnsubscribeConnected/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorUnsubscribeConnected/#create","text":"[Source] new val create() : MQTTErrorUnsubscribeConnected val^","title":"create"},{"location":"mqtt-MQTTErrorUnsubscribeConnected/#returns","text":"MQTTErrorUnsubscribeConnected val^","title":"Returns"},{"location":"mqtt-MQTTErrorUnsubscribeConnected/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorUnsubscribeConnected/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorUnsubscribeConnected/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorUnsubscribeConnected/#eq","text":"[Source] fun box eq( that: MQTTErrorUnsubscribeConnected val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorUnsubscribeConnected/#parameters","text":"that: MQTTErrorUnsubscribeConnected val","title":"Parameters"},{"location":"mqtt-MQTTErrorUnsubscribeConnected/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorUnsubscribeConnected/#ne","text":"[Source] fun box ne( that: MQTTErrorUnsubscribeConnected val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorUnsubscribeConnected/#parameters_1","text":"that: MQTTErrorUnsubscribeConnected val","title":"Parameters"},{"location":"mqtt-MQTTErrorUnsubscribeConnected/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorUnsubscribeTopic/","text":"MQTTErrorUnsubscribeTopic \u00b6 [Source] This error is triggered when unsubscribing with an invalid topic filter. primitive val MQTTErrorUnsubscribeTopic Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTErrorUnsubscribeTopic val^ Returns \u00b6 MQTTErrorUnsubscribeTopic val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: MQTTErrorUnsubscribeTopic val) : Bool val Parameters \u00b6 that: MQTTErrorUnsubscribeTopic val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTErrorUnsubscribeTopic val) : Bool val Parameters \u00b6 that: MQTTErrorUnsubscribeTopic val Returns \u00b6 Bool val","title":"primitive MQTTErrorUnsubscribeTopic"},{"location":"mqtt-MQTTErrorUnsubscribeTopic/#mqtterrorunsubscribetopic","text":"[Source] This error is triggered when unsubscribing with an invalid topic filter. primitive val MQTTErrorUnsubscribeTopic","title":"MQTTErrorUnsubscribeTopic"},{"location":"mqtt-MQTTErrorUnsubscribeTopic/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTErrorUnsubscribeTopic/#create","text":"[Source] new val create() : MQTTErrorUnsubscribeTopic val^","title":"create"},{"location":"mqtt-MQTTErrorUnsubscribeTopic/#returns","text":"MQTTErrorUnsubscribeTopic val^","title":"Returns"},{"location":"mqtt-MQTTErrorUnsubscribeTopic/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTErrorUnsubscribeTopic/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"mqtt-MQTTErrorUnsubscribeTopic/#returns_1","text":"String val","title":"Returns"},{"location":"mqtt-MQTTErrorUnsubscribeTopic/#eq","text":"[Source] fun box eq( that: MQTTErrorUnsubscribeTopic val) : Bool val","title":"eq"},{"location":"mqtt-MQTTErrorUnsubscribeTopic/#parameters","text":"that: MQTTErrorUnsubscribeTopic val","title":"Parameters"},{"location":"mqtt-MQTTErrorUnsubscribeTopic/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTErrorUnsubscribeTopic/#ne","text":"[Source] fun box ne( that: MQTTErrorUnsubscribeTopic val) : Bool val","title":"ne"},{"location":"mqtt-MQTTErrorUnsubscribeTopic/#parameters_1","text":"that: MQTTErrorUnsubscribeTopic val","title":"Parameters"},{"location":"mqtt-MQTTErrorUnsubscribeTopic/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTPacket/","text":"MQTTPacket \u00b6 [Source] An immutable, sendable packet, which can be published by the client or received from the server in PUBLISH messages, and if a Will is set upon connection. class val MQTTPacket Constructors \u00b6 create \u00b6 [Source] Creates a packet. new val create( topic': String val, message': Array[U8 val] val, retain': Bool val = false, qos': U8 val = 0, id': U16 val = 0) : MQTTPacket val^ Parameters \u00b6 topic': String val message': Array [ U8 val] val retain': Bool val = false qos': U8 val = 0 id': U16 val = 0 Returns \u00b6 MQTTPacket val^ Public fields \u00b6 let topic: String val \u00b6 [Source] The topic the packet is associated with. Be aware that user-defined topics may not follow the topic name rules of the protocol. let message: Array [ U8 val] val \u00b6 [Source] The packet's payload. let retain: Bool val \u00b6 [Source] The RETAIN flag in packets. If set to true , the server must retain the packet, sending it to late client subscriptions to the corresponding topic. let qos: U8 val \u00b6 [Source] The QoS of the packet, i.e. how the protocol guarantees dispatching. There are three possible values: 0 (at most once): The packet is sent only one time, and may be lost. 1 (at least once): The package is sent repeatedly until the receiver successfully acknowledges it. 2 (exactly once): The packet will reach its destination thanks to an MQTT handshake, without loss or duplication. Invalid values will be automatically set to 0. let id: U16 val \u00b6 [Source] The packet identifier, used for control between the client and the server. It should not be set by the user when sending a packet, since the value will be overwritten before being sent to the broker.","title":"class MQTTPacket"},{"location":"mqtt-MQTTPacket/#mqttpacket","text":"[Source] An immutable, sendable packet, which can be published by the client or received from the server in PUBLISH messages, and if a Will is set upon connection. class val MQTTPacket","title":"MQTTPacket"},{"location":"mqtt-MQTTPacket/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTPacket/#create","text":"[Source] Creates a packet. new val create( topic': String val, message': Array[U8 val] val, retain': Bool val = false, qos': U8 val = 0, id': U16 val = 0) : MQTTPacket val^","title":"create"},{"location":"mqtt-MQTTPacket/#parameters","text":"topic': String val message': Array [ U8 val] val retain': Bool val = false qos': U8 val = 0 id': U16 val = 0","title":"Parameters"},{"location":"mqtt-MQTTPacket/#returns","text":"MQTTPacket val^","title":"Returns"},{"location":"mqtt-MQTTPacket/#public-fields","text":"","title":"Public fields"},{"location":"mqtt-MQTTPacket/#let-topic-string-val","text":"[Source] The topic the packet is associated with. Be aware that user-defined topics may not follow the topic name rules of the protocol.","title":"let topic: String val"},{"location":"mqtt-MQTTPacket/#let-message-array91u8-val93-val","text":"[Source] The packet's payload.","title":"let message: Array[U8 val] val"},{"location":"mqtt-MQTTPacket/#let-retain-bool-val","text":"[Source] The RETAIN flag in packets. If set to true , the server must retain the packet, sending it to late client subscriptions to the corresponding topic.","title":"let retain: Bool val"},{"location":"mqtt-MQTTPacket/#let-qos-u8-val","text":"[Source] The QoS of the packet, i.e. how the protocol guarantees dispatching. There are three possible values: 0 (at most once): The packet is sent only one time, and may be lost. 1 (at least once): The package is sent repeatedly until the receiver successfully acknowledges it. 2 (exactly once): The packet will reach its destination thanks to an MQTT handshake, without loss or duplication. Invalid values will be automatically set to 0.","title":"let qos: U8 val"},{"location":"mqtt-MQTTPacket/#let-id-u16-val","text":"[Source] The packet identifier, used for control between the client and the server. It should not be set by the user when sending a packet, since the value will be overwritten before being sent to the broker.","title":"let id: U16 val"},{"location":"mqtt-MQTTTopic/","text":"MQTTTopic \u00b6 [Source] An utility to validate topics upon publishing or subscribing. primitive val MQTTTopic Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTTopic val^ Returns \u00b6 MQTTTopic val^ Public Functions \u00b6 validate_publish \u00b6 [Source] Validates a PUBLISH topic, by verifying if it has no wildcard ( # or + ) or null characters. Returns true if the topic is valid and false otherwise. fun tag validate_publish( topic: String val) : Bool val Parameters \u00b6 topic: String val Returns \u00b6 Bool val validate_subscribe \u00b6 [Source] Validates a SUBSCRIBE/UNSUBSCRIBE filter, by verifying if it has wildcards properly positioned between dashes ( # or + ) and no null characters. Returns true if the topic is valid and false otherwise. fun tag validate_subscribe( topic: String val) : Bool val Parameters \u00b6 topic: String val Returns \u00b6 Bool val match_topic \u00b6 [Source] Checks if the provided PUBLISH topic in name matches the provided SUBSCRIBE/UNSUBSCRIBE filter in filter and if they are both valid. Returns true if the topic matches the filter and false otherwise. fun tag match_topic( topic: String val, filter: String val) : Bool val Parameters \u00b6 topic: String val filter: String val Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: MQTTTopic val) : Bool val Parameters \u00b6 that: MQTTTopic val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTTopic val) : Bool val Parameters \u00b6 that: MQTTTopic val Returns \u00b6 Bool val","title":"primitive MQTTTopic"},{"location":"mqtt-MQTTTopic/#mqtttopic","text":"[Source] An utility to validate topics upon publishing or subscribing. primitive val MQTTTopic","title":"MQTTTopic"},{"location":"mqtt-MQTTTopic/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTTopic/#create","text":"[Source] new val create() : MQTTTopic val^","title":"create"},{"location":"mqtt-MQTTTopic/#returns","text":"MQTTTopic val^","title":"Returns"},{"location":"mqtt-MQTTTopic/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTTopic/#validate_publish","text":"[Source] Validates a PUBLISH topic, by verifying if it has no wildcard ( # or + ) or null characters. Returns true if the topic is valid and false otherwise. fun tag validate_publish( topic: String val) : Bool val","title":"validate_publish"},{"location":"mqtt-MQTTTopic/#parameters","text":"topic: String val","title":"Parameters"},{"location":"mqtt-MQTTTopic/#returns_1","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTTopic/#validate_subscribe","text":"[Source] Validates a SUBSCRIBE/UNSUBSCRIBE filter, by verifying if it has wildcards properly positioned between dashes ( # or + ) and no null characters. Returns true if the topic is valid and false otherwise. fun tag validate_subscribe( topic: String val) : Bool val","title":"validate_subscribe"},{"location":"mqtt-MQTTTopic/#parameters_1","text":"topic: String val","title":"Parameters"},{"location":"mqtt-MQTTTopic/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTTopic/#match_topic","text":"[Source] Checks if the provided PUBLISH topic in name matches the provided SUBSCRIBE/UNSUBSCRIBE filter in filter and if they are both valid. Returns true if the topic matches the filter and false otherwise. fun tag match_topic( topic: String val, filter: String val) : Bool val","title":"match_topic"},{"location":"mqtt-MQTTTopic/#parameters_2","text":"topic: String val filter: String val","title":"Parameters"},{"location":"mqtt-MQTTTopic/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTTopic/#eq","text":"[Source] fun box eq( that: MQTTTopic val) : Bool val","title":"eq"},{"location":"mqtt-MQTTTopic/#parameters_3","text":"that: MQTTTopic val","title":"Parameters"},{"location":"mqtt-MQTTTopic/#returns_4","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTTopic/#ne","text":"[Source] fun box ne( that: MQTTTopic val) : Bool val","title":"ne"},{"location":"mqtt-MQTTTopic/#parameters_4","text":"that: MQTTTopic val","title":"Parameters"},{"location":"mqtt-MQTTTopic/#returns_5","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTUtils/","text":"MQTTUtils \u00b6 [Source] An utility to generate intermediate values in MQTTConnection. primitive val MQTTUtils Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTUtils val^ Returns \u00b6 MQTTUtils val^ Public Functions \u00b6 random_string \u00b6 [Source] Generates a random string of the specified length with the provided characters. fun box random_string( length: USize val = 8, letters: String val = \"0123456789abcdef\") : String iso^ Parameters \u00b6 length: USize val = 8 letters: String val = \"0123456789abcdef\" Returns \u00b6 String iso^ remaining_length \u00b6 [Source] Generates an array of bytes in the format specified by the MQTT protocol for the \"Remaining Length\" field, encoding the provided integer. fun box remaining_length( length: USize val) : Array[U8 val] val Parameters \u00b6 length: USize val Returns \u00b6 Array [ U8 val] val eq \u00b6 [Source] fun box eq( that: MQTTUtils val) : Bool val Parameters \u00b6 that: MQTTUtils val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTUtils val) : Bool val Parameters \u00b6 that: MQTTUtils val Returns \u00b6 Bool val","title":"primitive MQTTUtils"},{"location":"mqtt-MQTTUtils/#mqttutils","text":"[Source] An utility to generate intermediate values in MQTTConnection. primitive val MQTTUtils","title":"MQTTUtils"},{"location":"mqtt-MQTTUtils/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTUtils/#create","text":"[Source] new val create() : MQTTUtils val^","title":"create"},{"location":"mqtt-MQTTUtils/#returns","text":"MQTTUtils val^","title":"Returns"},{"location":"mqtt-MQTTUtils/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTUtils/#random_string","text":"[Source] Generates a random string of the specified length with the provided characters. fun box random_string( length: USize val = 8, letters: String val = \"0123456789abcdef\") : String iso^","title":"random_string"},{"location":"mqtt-MQTTUtils/#parameters","text":"length: USize val = 8 letters: String val = \"0123456789abcdef\"","title":"Parameters"},{"location":"mqtt-MQTTUtils/#returns_1","text":"String iso^","title":"Returns"},{"location":"mqtt-MQTTUtils/#remaining_length","text":"[Source] Generates an array of bytes in the format specified by the MQTT protocol for the \"Remaining Length\" field, encoding the provided integer. fun box remaining_length( length: USize val) : Array[U8 val] val","title":"remaining_length"},{"location":"mqtt-MQTTUtils/#parameters_1","text":"length: USize val","title":"Parameters"},{"location":"mqtt-MQTTUtils/#returns_2","text":"Array [ U8 val] val","title":"Returns"},{"location":"mqtt-MQTTUtils/#eq","text":"[Source] fun box eq( that: MQTTUtils val) : Bool val","title":"eq"},{"location":"mqtt-MQTTUtils/#parameters_2","text":"that: MQTTUtils val","title":"Parameters"},{"location":"mqtt-MQTTUtils/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTUtils/#ne","text":"[Source] fun box ne( that: MQTTUtils val) : Bool val","title":"ne"},{"location":"mqtt-MQTTUtils/#parameters_3","text":"that: MQTTUtils val","title":"Parameters"},{"location":"mqtt-MQTTUtils/#returns_4","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTVersion/","text":"MQTTVersion \u00b6 [Source] A type with all implemented versions of the MQTT protocol as primitives. It can be set by the user when creating a connection with MQTTConnection. Upon receiving an \"invalid version\" CONNACK error from the server with the retry_connection flag set, the connection will automatically try reconnection with an older version. If already at the oldest version (currently, MQTTv31), it will stop reconnection. type MQTTVersion is (MQTTv31 val | MQTTv311 val) Type Alias For \u00b6 ( MQTTv31 val | MQTTv311 val)","title":"type MQTTVersion"},{"location":"mqtt-MQTTVersion/#mqttversion","text":"[Source] A type with all implemented versions of the MQTT protocol as primitives. It can be set by the user when creating a connection with MQTTConnection. Upon receiving an \"invalid version\" CONNACK error from the server with the retry_connection flag set, the connection will automatically try reconnection with an older version. If already at the oldest version (currently, MQTTv31), it will stop reconnection. type MQTTVersion is (MQTTv31 val | MQTTv311 val)","title":"MQTTVersion"},{"location":"mqtt-MQTTVersion/#type-alias-for","text":"( MQTTv31 val | MQTTv311 val)","title":"Type Alias For"},{"location":"mqtt-MQTTv31/","text":"MQTTv31 \u00b6 [Source] Third version of the MQTT protocol. primitive val MQTTv31 Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTv31 val^ Returns \u00b6 MQTTv31 val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: MQTTv31 val) : Bool val Parameters \u00b6 that: MQTTv31 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTv31 val) : Bool val Parameters \u00b6 that: MQTTv31 val Returns \u00b6 Bool val","title":"primitive MQTTv31"},{"location":"mqtt-MQTTv31/#mqttv31","text":"[Source] Third version of the MQTT protocol. primitive val MQTTv31","title":"MQTTv31"},{"location":"mqtt-MQTTv31/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTv31/#create","text":"[Source] new val create() : MQTTv31 val^","title":"create"},{"location":"mqtt-MQTTv31/#returns","text":"MQTTv31 val^","title":"Returns"},{"location":"mqtt-MQTTv31/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTv31/#eq","text":"[Source] fun box eq( that: MQTTv31 val) : Bool val","title":"eq"},{"location":"mqtt-MQTTv31/#parameters","text":"that: MQTTv31 val","title":"Parameters"},{"location":"mqtt-MQTTv31/#returns_1","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTv31/#ne","text":"[Source] fun box ne( that: MQTTv31 val) : Bool val","title":"ne"},{"location":"mqtt-MQTTv31/#parameters_1","text":"that: MQTTv31 val","title":"Parameters"},{"location":"mqtt-MQTTv31/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTv311/","text":"MQTTv311 \u00b6 [Source] Fourth version of the MQTT protocol. It is also the default version. primitive val MQTTv311 Constructors \u00b6 create \u00b6 [Source] new val create() : MQTTv311 val^ Returns \u00b6 MQTTv311 val^ Public Functions \u00b6 downgrade \u00b6 [Source] If this version is unsupported by the broker, try the third version of the protocol. fun box downgrade() : (MQTTv31 val | MQTTv311 val) Returns \u00b6 ( MQTTv31 val | MQTTv311 val) eq \u00b6 [Source] fun box eq( that: MQTTv311 val) : Bool val Parameters \u00b6 that: MQTTv311 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MQTTv311 val) : Bool val Parameters \u00b6 that: MQTTv311 val Returns \u00b6 Bool val","title":"primitive MQTTv311"},{"location":"mqtt-MQTTv311/#mqttv311","text":"[Source] Fourth version of the MQTT protocol. It is also the default version. primitive val MQTTv311","title":"MQTTv311"},{"location":"mqtt-MQTTv311/#constructors","text":"","title":"Constructors"},{"location":"mqtt-MQTTv311/#create","text":"[Source] new val create() : MQTTv311 val^","title":"create"},{"location":"mqtt-MQTTv311/#returns","text":"MQTTv311 val^","title":"Returns"},{"location":"mqtt-MQTTv311/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-MQTTv311/#downgrade","text":"[Source] If this version is unsupported by the broker, try the third version of the protocol. fun box downgrade() : (MQTTv31 val | MQTTv311 val)","title":"downgrade"},{"location":"mqtt-MQTTv311/#returns_1","text":"( MQTTv31 val | MQTTv311 val)","title":"Returns"},{"location":"mqtt-MQTTv311/#eq","text":"[Source] fun box eq( that: MQTTv311 val) : Bool val","title":"eq"},{"location":"mqtt-MQTTv311/#parameters","text":"that: MQTTv311 val","title":"Parameters"},{"location":"mqtt-MQTTv311/#returns_2","text":"Bool val","title":"Returns"},{"location":"mqtt-MQTTv311/#ne","text":"[Source] fun box ne( that: MQTTv311 val) : Bool val","title":"ne"},{"location":"mqtt-MQTTv311/#parameters_1","text":"that: MQTTv311 val","title":"Parameters"},{"location":"mqtt-MQTTv311/#returns_3","text":"Bool val","title":"Returns"},{"location":"mqtt-_MQTTConnectionHandler/","text":"_MQTTConnectionHandler[optional A: Any iso, optional B: ( None val | _SSLContext [A] val), optional C: ( None val | _SSLConnection [A])] \u00b6 [Source] A TCPConnectionNotify class that handles and redirects all TCP events and messages to an MQTTConnection actor. class ref _MQTTConnectionHandler[optional A: Any iso, optional B: (None val | _SSLContext[A] val), optional C: (None val | _SSLConnection[A])] is TCPConnectionNotify ref Implements \u00b6 TCPConnectionNotify ref Constructors \u00b6 create \u00b6 [Source] new iso create( connection: MQTTConnection[A, B, C] tag, auth: (AmbientAuth val | ApplyReleaseBackpressureAuth val)) : _MQTTConnectionHandler[A, B, C] iso^ Parameters \u00b6 connection: MQTTConnection [A, B, C] tag auth: ( AmbientAuth val | ApplyReleaseBackpressureAuth val) Returns \u00b6 _MQTTConnectionHandler [A, B, C] iso^ Public Functions \u00b6 connected \u00b6 [Source] fun ref connected( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val connect_failed \u00b6 [Source] fun ref connect_failed( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val closed \u00b6 [Source] fun ref closed( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val received \u00b6 [Source] Combines and breaks received data into control packets, based on the Remaining Length field from MQTT control packets. Once the size has been fixed in this function through the use of an internal buffer, the data is sent to the MQTTConnection actor through the _parse_packet() behaviour. fun ref received( conn: TCPConnection ref, data: Array[U8 val] iso, times: USize val) : Bool val Parameters \u00b6 conn: TCPConnection ref data: Array [ U8 val] iso times: USize val Returns \u00b6 Bool val auth_failed \u00b6 [Source] fun ref auth_failed( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val throttled \u00b6 [Source] fun ref throttled( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val unthrottled \u00b6 [Source] fun ref unthrottled( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val accepted \u00b6 fun ref accepted( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val proxy_via \u00b6 fun ref proxy_via( host: String val, service: String val) : (String val , String val) Parameters \u00b6 host: String val service: String val Returns \u00b6 ( String val , String val) connecting \u00b6 fun ref connecting( conn: TCPConnection ref, count: U32 val) : None val Parameters \u00b6 conn: TCPConnection ref count: U32 val Returns \u00b6 None val sent \u00b6 fun ref sent( conn: TCPConnection ref, data: (String val | Array[U8 val] val)) : (String val | Array[U8 val] val) Parameters \u00b6 conn: TCPConnection ref data: ( String val | Array [ U8 val] val) Returns \u00b6 ( String val | Array [ U8 val] val) sentv \u00b6 fun ref sentv( conn: TCPConnection ref, data: ByteSeqIter val) : ByteSeqIter val Parameters \u00b6 conn: TCPConnection ref data: ByteSeqIter val Returns \u00b6 ByteSeqIter val expect \u00b6 fun ref expect( conn: TCPConnection ref, qty: USize val) : USize val Parameters \u00b6 conn: TCPConnection ref qty: USize val Returns \u00b6 USize val","title":"class _MQTTConnectionHandler"},{"location":"mqtt-_MQTTConnectionHandler/#_mqttconnectionhandler91optional-a-any-iso-optional-b-none-val-_sslcontext91a93-val-optional-c-none-val-_sslconnection91a9393","text":"[Source] A TCPConnectionNotify class that handles and redirects all TCP events and messages to an MQTTConnection actor. class ref _MQTTConnectionHandler[optional A: Any iso, optional B: (None val | _SSLContext[A] val), optional C: (None val | _SSLConnection[A])] is TCPConnectionNotify ref","title":"_MQTTConnectionHandler[optional A: Any iso, optional B: (None val | _SSLContext[A] val), optional C: (None val | _SSLConnection[A])]"},{"location":"mqtt-_MQTTConnectionHandler/#implements","text":"TCPConnectionNotify ref","title":"Implements"},{"location":"mqtt-_MQTTConnectionHandler/#constructors","text":"","title":"Constructors"},{"location":"mqtt-_MQTTConnectionHandler/#create","text":"[Source] new iso create( connection: MQTTConnection[A, B, C] tag, auth: (AmbientAuth val | ApplyReleaseBackpressureAuth val)) : _MQTTConnectionHandler[A, B, C] iso^","title":"create"},{"location":"mqtt-_MQTTConnectionHandler/#parameters","text":"connection: MQTTConnection [A, B, C] tag auth: ( AmbientAuth val | ApplyReleaseBackpressureAuth val)","title":"Parameters"},{"location":"mqtt-_MQTTConnectionHandler/#returns","text":"_MQTTConnectionHandler [A, B, C] iso^","title":"Returns"},{"location":"mqtt-_MQTTConnectionHandler/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-_MQTTConnectionHandler/#connected","text":"[Source] fun ref connected( conn: TCPConnection ref) : None val","title":"connected"},{"location":"mqtt-_MQTTConnectionHandler/#parameters_1","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"mqtt-_MQTTConnectionHandler/#returns_1","text":"None val","title":"Returns"},{"location":"mqtt-_MQTTConnectionHandler/#connect_failed","text":"[Source] fun ref connect_failed( conn: TCPConnection ref) : None val","title":"connect_failed"},{"location":"mqtt-_MQTTConnectionHandler/#parameters_2","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"mqtt-_MQTTConnectionHandler/#returns_2","text":"None val","title":"Returns"},{"location":"mqtt-_MQTTConnectionHandler/#closed","text":"[Source] fun ref closed( conn: TCPConnection ref) : None val","title":"closed"},{"location":"mqtt-_MQTTConnectionHandler/#parameters_3","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"mqtt-_MQTTConnectionHandler/#returns_3","text":"None val","title":"Returns"},{"location":"mqtt-_MQTTConnectionHandler/#received","text":"[Source] Combines and breaks received data into control packets, based on the Remaining Length field from MQTT control packets. Once the size has been fixed in this function through the use of an internal buffer, the data is sent to the MQTTConnection actor through the _parse_packet() behaviour. fun ref received( conn: TCPConnection ref, data: Array[U8 val] iso, times: USize val) : Bool val","title":"received"},{"location":"mqtt-_MQTTConnectionHandler/#parameters_4","text":"conn: TCPConnection ref data: Array [ U8 val] iso times: USize val","title":"Parameters"},{"location":"mqtt-_MQTTConnectionHandler/#returns_4","text":"Bool val","title":"Returns"},{"location":"mqtt-_MQTTConnectionHandler/#auth_failed","text":"[Source] fun ref auth_failed( conn: TCPConnection ref) : None val","title":"auth_failed"},{"location":"mqtt-_MQTTConnectionHandler/#parameters_5","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"mqtt-_MQTTConnectionHandler/#returns_5","text":"None val","title":"Returns"},{"location":"mqtt-_MQTTConnectionHandler/#throttled","text":"[Source] fun ref throttled( conn: TCPConnection ref) : None val","title":"throttled"},{"location":"mqtt-_MQTTConnectionHandler/#parameters_6","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"mqtt-_MQTTConnectionHandler/#returns_6","text":"None val","title":"Returns"},{"location":"mqtt-_MQTTConnectionHandler/#unthrottled","text":"[Source] fun ref unthrottled( conn: TCPConnection ref) : None val","title":"unthrottled"},{"location":"mqtt-_MQTTConnectionHandler/#parameters_7","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"mqtt-_MQTTConnectionHandler/#returns_7","text":"None val","title":"Returns"},{"location":"mqtt-_MQTTConnectionHandler/#accepted","text":"fun ref accepted( conn: TCPConnection ref) : None val","title":"accepted"},{"location":"mqtt-_MQTTConnectionHandler/#parameters_8","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"mqtt-_MQTTConnectionHandler/#returns_8","text":"None val","title":"Returns"},{"location":"mqtt-_MQTTConnectionHandler/#proxy_via","text":"fun ref proxy_via( host: String val, service: String val) : (String val , String val)","title":"proxy_via"},{"location":"mqtt-_MQTTConnectionHandler/#parameters_9","text":"host: String val service: String val","title":"Parameters"},{"location":"mqtt-_MQTTConnectionHandler/#returns_9","text":"( String val , String val)","title":"Returns"},{"location":"mqtt-_MQTTConnectionHandler/#connecting","text":"fun ref connecting( conn: TCPConnection ref, count: U32 val) : None val","title":"connecting"},{"location":"mqtt-_MQTTConnectionHandler/#parameters_10","text":"conn: TCPConnection ref count: U32 val","title":"Parameters"},{"location":"mqtt-_MQTTConnectionHandler/#returns_10","text":"None val","title":"Returns"},{"location":"mqtt-_MQTTConnectionHandler/#sent","text":"fun ref sent( conn: TCPConnection ref, data: (String val | Array[U8 val] val)) : (String val | Array[U8 val] val)","title":"sent"},{"location":"mqtt-_MQTTConnectionHandler/#parameters_11","text":"conn: TCPConnection ref data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"mqtt-_MQTTConnectionHandler/#returns_11","text":"( String val | Array [ U8 val] val)","title":"Returns"},{"location":"mqtt-_MQTTConnectionHandler/#sentv","text":"fun ref sentv( conn: TCPConnection ref, data: ByteSeqIter val) : ByteSeqIter val","title":"sentv"},{"location":"mqtt-_MQTTConnectionHandler/#parameters_12","text":"conn: TCPConnection ref data: ByteSeqIter val","title":"Parameters"},{"location":"mqtt-_MQTTConnectionHandler/#returns_12","text":"ByteSeqIter val","title":"Returns"},{"location":"mqtt-_MQTTConnectionHandler/#expect","text":"fun ref expect( conn: TCPConnection ref, qty: USize val) : USize val","title":"expect"},{"location":"mqtt-_MQTTConnectionHandler/#parameters_13","text":"conn: TCPConnection ref qty: USize val","title":"Parameters"},{"location":"mqtt-_MQTTConnectionHandler/#returns_13","text":"USize val","title":"Returns"},{"location":"mqtt-_MQTTPingTimer/","text":"_MQTTPingTimer[optional A: Any iso, optional B: ( None val | _SSLContext [A] val), optional C: ( None val | _SSLConnection [A])] \u00b6 [Source] Timer to send PINGREQ messages to the server periodically. Currently, it fires at 75% of the keepalive time (i.e. if keepalive is set to 10 seconds, it fires every 7.5 seconds). If keepalive is set to 0 , it will fire every 30 seconds. class ref _MQTTPingTimer[optional A: Any iso, optional B: (None val | _SSLContext[A] val), optional C: (None val | _SSLConnection[A])] is TimerNotify ref Implements \u00b6 TimerNotify ref Constructors \u00b6 create \u00b6 [Source] new iso create( conn: MQTTConnection[A, B, C] tag) : _MQTTPingTimer[A, B, C] iso^ Parameters \u00b6 conn: MQTTConnection [A, B, C] tag Returns \u00b6 _MQTTPingTimer [A, B, C] iso^ Public Functions \u00b6 apply \u00b6 [Source] fun ref apply( timer: Timer ref, count: U64 val) : Bool val Parameters \u00b6 timer: Timer ref count: U64 val Returns \u00b6 Bool val cancel \u00b6 fun ref cancel( timer: Timer ref) : None val Parameters \u00b6 timer: Timer ref Returns \u00b6 None val","title":"class _MQTTPingTimer"},{"location":"mqtt-_MQTTPingTimer/#_mqttpingtimer91optional-a-any-iso-optional-b-none-val-_sslcontext91a93-val-optional-c-none-val-_sslconnection91a9393","text":"[Source] Timer to send PINGREQ messages to the server periodically. Currently, it fires at 75% of the keepalive time (i.e. if keepalive is set to 10 seconds, it fires every 7.5 seconds). If keepalive is set to 0 , it will fire every 30 seconds. class ref _MQTTPingTimer[optional A: Any iso, optional B: (None val | _SSLContext[A] val), optional C: (None val | _SSLConnection[A])] is TimerNotify ref","title":"_MQTTPingTimer[optional A: Any iso, optional B: (None val | _SSLContext[A] val), optional C: (None val | _SSLConnection[A])]"},{"location":"mqtt-_MQTTPingTimer/#implements","text":"TimerNotify ref","title":"Implements"},{"location":"mqtt-_MQTTPingTimer/#constructors","text":"","title":"Constructors"},{"location":"mqtt-_MQTTPingTimer/#create","text":"[Source] new iso create( conn: MQTTConnection[A, B, C] tag) : _MQTTPingTimer[A, B, C] iso^","title":"create"},{"location":"mqtt-_MQTTPingTimer/#parameters","text":"conn: MQTTConnection [A, B, C] tag","title":"Parameters"},{"location":"mqtt-_MQTTPingTimer/#returns","text":"_MQTTPingTimer [A, B, C] iso^","title":"Returns"},{"location":"mqtt-_MQTTPingTimer/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-_MQTTPingTimer/#apply","text":"[Source] fun ref apply( timer: Timer ref, count: U64 val) : Bool val","title":"apply"},{"location":"mqtt-_MQTTPingTimer/#parameters_1","text":"timer: Timer ref count: U64 val","title":"Parameters"},{"location":"mqtt-_MQTTPingTimer/#returns_1","text":"Bool val","title":"Returns"},{"location":"mqtt-_MQTTPingTimer/#cancel","text":"fun ref cancel( timer: Timer ref) : None val","title":"cancel"},{"location":"mqtt-_MQTTPingTimer/#parameters_2","text":"timer: Timer ref","title":"Parameters"},{"location":"mqtt-_MQTTPingTimer/#returns_2","text":"None val","title":"Returns"},{"location":"mqtt-_MQTTReconnectTimer/","text":"_MQTTReconnectTimer[optional A: Any iso, optional B: ( None val | _SSLContext [A] val), optional C: ( None val | _SSLConnection [A])] \u00b6 [Source] Timer to handle lost connections, when reconnect_time' is set to a value greater than 0. Fires at the specified interval in seconds. class ref _MQTTReconnectTimer[optional A: Any iso, optional B: (None val | _SSLContext[A] val), optional C: (None val | _SSLConnection[A])] is TimerNotify ref Implements \u00b6 TimerNotify ref Constructors \u00b6 create \u00b6 [Source] new iso create( conn: MQTTConnection[A, B, C] tag) : _MQTTReconnectTimer[A, B, C] iso^ Parameters \u00b6 conn: MQTTConnection [A, B, C] tag Returns \u00b6 _MQTTReconnectTimer [A, B, C] iso^ Public Functions \u00b6 apply \u00b6 [Source] fun ref apply( timer: Timer ref, count: U64 val) : Bool val Parameters \u00b6 timer: Timer ref count: U64 val Returns \u00b6 Bool val cancel \u00b6 fun ref cancel( timer: Timer ref) : None val Parameters \u00b6 timer: Timer ref Returns \u00b6 None val","title":"class _MQTTReconnectTimer"},{"location":"mqtt-_MQTTReconnectTimer/#_mqttreconnecttimer91optional-a-any-iso-optional-b-none-val-_sslcontext91a93-val-optional-c-none-val-_sslconnection91a9393","text":"[Source] Timer to handle lost connections, when reconnect_time' is set to a value greater than 0. Fires at the specified interval in seconds. class ref _MQTTReconnectTimer[optional A: Any iso, optional B: (None val | _SSLContext[A] val), optional C: (None val | _SSLConnection[A])] is TimerNotify ref","title":"_MQTTReconnectTimer[optional A: Any iso, optional B: (None val | _SSLContext[A] val), optional C: (None val | _SSLConnection[A])]"},{"location":"mqtt-_MQTTReconnectTimer/#implements","text":"TimerNotify ref","title":"Implements"},{"location":"mqtt-_MQTTReconnectTimer/#constructors","text":"","title":"Constructors"},{"location":"mqtt-_MQTTReconnectTimer/#create","text":"[Source] new iso create( conn: MQTTConnection[A, B, C] tag) : _MQTTReconnectTimer[A, B, C] iso^","title":"create"},{"location":"mqtt-_MQTTReconnectTimer/#parameters","text":"conn: MQTTConnection [A, B, C] tag","title":"Parameters"},{"location":"mqtt-_MQTTReconnectTimer/#returns","text":"_MQTTReconnectTimer [A, B, C] iso^","title":"Returns"},{"location":"mqtt-_MQTTReconnectTimer/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-_MQTTReconnectTimer/#apply","text":"[Source] fun ref apply( timer: Timer ref, count: U64 val) : Bool val","title":"apply"},{"location":"mqtt-_MQTTReconnectTimer/#parameters_1","text":"timer: Timer ref count: U64 val","title":"Parameters"},{"location":"mqtt-_MQTTReconnectTimer/#returns_1","text":"Bool val","title":"Returns"},{"location":"mqtt-_MQTTReconnectTimer/#cancel","text":"fun ref cancel( timer: Timer ref) : None val","title":"cancel"},{"location":"mqtt-_MQTTReconnectTimer/#parameters_2","text":"timer: Timer ref","title":"Parameters"},{"location":"mqtt-_MQTTReconnectTimer/#returns_2","text":"None val","title":"Returns"},{"location":"mqtt-_MQTTResendTimer/","text":"_MQTTResendTimer[optional A: Any iso, optional B: ( None val | _SSLContext [A] val), optional C: ( None val | _SSLConnection [A])] \u00b6 [Source] Timer to handle QoS, re-firing unacknowledged PUBLISH and SUBSCRIBE requests with the appropriate DUP flag. Currently, it always fires every second. class ref _MQTTResendTimer[optional A: Any iso, optional B: (None val | _SSLContext[A] val), optional C: (None val | _SSLConnection[A])] is TimerNotify ref Implements \u00b6 TimerNotify ref Constructors \u00b6 create \u00b6 [Source] new iso create( conn: MQTTConnection[A, B, C] tag) : _MQTTResendTimer[A, B, C] iso^ Parameters \u00b6 conn: MQTTConnection [A, B, C] tag Returns \u00b6 _MQTTResendTimer [A, B, C] iso^ Public Functions \u00b6 apply \u00b6 [Source] fun ref apply( timer: Timer ref, count: U64 val) : Bool val Parameters \u00b6 timer: Timer ref count: U64 val Returns \u00b6 Bool val cancel \u00b6 fun ref cancel( timer: Timer ref) : None val Parameters \u00b6 timer: Timer ref Returns \u00b6 None val","title":"class _MQTTResendTimer"},{"location":"mqtt-_MQTTResendTimer/#_mqttresendtimer91optional-a-any-iso-optional-b-none-val-_sslcontext91a93-val-optional-c-none-val-_sslconnection91a9393","text":"[Source] Timer to handle QoS, re-firing unacknowledged PUBLISH and SUBSCRIBE requests with the appropriate DUP flag. Currently, it always fires every second. class ref _MQTTResendTimer[optional A: Any iso, optional B: (None val | _SSLContext[A] val), optional C: (None val | _SSLConnection[A])] is TimerNotify ref","title":"_MQTTResendTimer[optional A: Any iso, optional B: (None val | _SSLContext[A] val), optional C: (None val | _SSLConnection[A])]"},{"location":"mqtt-_MQTTResendTimer/#implements","text":"TimerNotify ref","title":"Implements"},{"location":"mqtt-_MQTTResendTimer/#constructors","text":"","title":"Constructors"},{"location":"mqtt-_MQTTResendTimer/#create","text":"[Source] new iso create( conn: MQTTConnection[A, B, C] tag) : _MQTTResendTimer[A, B, C] iso^","title":"create"},{"location":"mqtt-_MQTTResendTimer/#parameters","text":"conn: MQTTConnection [A, B, C] tag","title":"Parameters"},{"location":"mqtt-_MQTTResendTimer/#returns","text":"_MQTTResendTimer [A, B, C] iso^","title":"Returns"},{"location":"mqtt-_MQTTResendTimer/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-_MQTTResendTimer/#apply","text":"[Source] fun ref apply( timer: Timer ref, count: U64 val) : Bool val","title":"apply"},{"location":"mqtt-_MQTTResendTimer/#parameters_1","text":"timer: Timer ref count: U64 val","title":"Parameters"},{"location":"mqtt-_MQTTResendTimer/#returns_1","text":"Bool val","title":"Returns"},{"location":"mqtt-_MQTTResendTimer/#cancel","text":"fun ref cancel( timer: Timer ref) : None val","title":"cancel"},{"location":"mqtt-_MQTTResendTimer/#parameters_2","text":"timer: Timer ref","title":"Parameters"},{"location":"mqtt-_MQTTResendTimer/#returns_2","text":"None val","title":"Returns"},{"location":"mqtt-_MQTTVersionDowngradable/","text":"_MQTTVersionDowngradable \u00b6 [Source] Private interface to determine that an MQTT version can be downgraded to a previous version of the protocol. interface val _MQTTVersionDowngradable Public Functions \u00b6 downgrade \u00b6 [Source] Returns the previous version of the MQTT protocol. fun box downgrade() : (MQTTv31 val | MQTTv311 val) Returns \u00b6 ( MQTTv31 val | MQTTv311 val)","title":"interface _MQTTVersionDowngradable"},{"location":"mqtt-_MQTTVersionDowngradable/#_mqttversiondowngradable","text":"[Source] Private interface to determine that an MQTT version can be downgraded to a previous version of the protocol. interface val _MQTTVersionDowngradable","title":"_MQTTVersionDowngradable"},{"location":"mqtt-_MQTTVersionDowngradable/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-_MQTTVersionDowngradable/#downgrade","text":"[Source] Returns the previous version of the MQTT protocol. fun box downgrade() : (MQTTv31 val | MQTTv311 val)","title":"downgrade"},{"location":"mqtt-_MQTTVersionDowngradable/#returns","text":"( MQTTv31 val | MQTTv311 val)","title":"Returns"},{"location":"mqtt-_SSLConnection/","text":"_SSLConnection[A: Any iso] \u00b6 [Source] interface ref _SSLConnection[A: Any iso] is TCPConnectionNotify ref Implements \u00b6 TCPConnectionNotify ref Constructors \u00b6 create \u00b6 [Source] new iso create( notify: TCPConnectionNotify iso, ssl: A) : _SSLConnection[A] iso^ Parameters \u00b6 notify: TCPConnectionNotify iso ssl: A Returns \u00b6 _SSLConnection [A] iso^ Public Functions \u00b6 accepted \u00b6 fun ref accepted( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val proxy_via \u00b6 fun ref proxy_via( host: String val, service: String val) : (String val , String val) Parameters \u00b6 host: String val service: String val Returns \u00b6 ( String val , String val) connecting \u00b6 fun ref connecting( conn: TCPConnection ref, count: U32 val) : None val Parameters \u00b6 conn: TCPConnection ref count: U32 val Returns \u00b6 None val connected \u00b6 fun ref connected( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val connect_failed \u00b6 fun ref connect_failed( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val auth_failed \u00b6 fun ref auth_failed( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val sent \u00b6 fun ref sent( conn: TCPConnection ref, data: (String val | Array[U8 val] val)) : (String val | Array[U8 val] val) Parameters \u00b6 conn: TCPConnection ref data: ( String val | Array [ U8 val] val) Returns \u00b6 ( String val | Array [ U8 val] val) sentv \u00b6 fun ref sentv( conn: TCPConnection ref, data: ByteSeqIter val) : ByteSeqIter val Parameters \u00b6 conn: TCPConnection ref data: ByteSeqIter val Returns \u00b6 ByteSeqIter val received \u00b6 fun ref received( conn: TCPConnection ref, data: Array[U8 val] iso, times: USize val) : Bool val Parameters \u00b6 conn: TCPConnection ref data: Array [ U8 val] iso times: USize val Returns \u00b6 Bool val expect \u00b6 fun ref expect( conn: TCPConnection ref, qty: USize val) : USize val Parameters \u00b6 conn: TCPConnection ref qty: USize val Returns \u00b6 USize val closed \u00b6 fun ref closed( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val throttled \u00b6 fun ref throttled( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val unthrottled \u00b6 fun ref unthrottled( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val","title":"interface _SSLConnection"},{"location":"mqtt-_SSLConnection/#_sslconnection91a-any-iso93","text":"[Source] interface ref _SSLConnection[A: Any iso] is TCPConnectionNotify ref","title":"_SSLConnection[A: Any iso]"},{"location":"mqtt-_SSLConnection/#implements","text":"TCPConnectionNotify ref","title":"Implements"},{"location":"mqtt-_SSLConnection/#constructors","text":"","title":"Constructors"},{"location":"mqtt-_SSLConnection/#create","text":"[Source] new iso create( notify: TCPConnectionNotify iso, ssl: A) : _SSLConnection[A] iso^","title":"create"},{"location":"mqtt-_SSLConnection/#parameters","text":"notify: TCPConnectionNotify iso ssl: A","title":"Parameters"},{"location":"mqtt-_SSLConnection/#returns","text":"_SSLConnection [A] iso^","title":"Returns"},{"location":"mqtt-_SSLConnection/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-_SSLConnection/#accepted","text":"fun ref accepted( conn: TCPConnection ref) : None val","title":"accepted"},{"location":"mqtt-_SSLConnection/#parameters_1","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"mqtt-_SSLConnection/#returns_1","text":"None val","title":"Returns"},{"location":"mqtt-_SSLConnection/#proxy_via","text":"fun ref proxy_via( host: String val, service: String val) : (String val , String val)","title":"proxy_via"},{"location":"mqtt-_SSLConnection/#parameters_2","text":"host: String val service: String val","title":"Parameters"},{"location":"mqtt-_SSLConnection/#returns_2","text":"( String val , String val)","title":"Returns"},{"location":"mqtt-_SSLConnection/#connecting","text":"fun ref connecting( conn: TCPConnection ref, count: U32 val) : None val","title":"connecting"},{"location":"mqtt-_SSLConnection/#parameters_3","text":"conn: TCPConnection ref count: U32 val","title":"Parameters"},{"location":"mqtt-_SSLConnection/#returns_3","text":"None val","title":"Returns"},{"location":"mqtt-_SSLConnection/#connected","text":"fun ref connected( conn: TCPConnection ref) : None val","title":"connected"},{"location":"mqtt-_SSLConnection/#parameters_4","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"mqtt-_SSLConnection/#returns_4","text":"None val","title":"Returns"},{"location":"mqtt-_SSLConnection/#connect_failed","text":"fun ref connect_failed( conn: TCPConnection ref) : None val","title":"connect_failed"},{"location":"mqtt-_SSLConnection/#parameters_5","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"mqtt-_SSLConnection/#returns_5","text":"None val","title":"Returns"},{"location":"mqtt-_SSLConnection/#auth_failed","text":"fun ref auth_failed( conn: TCPConnection ref) : None val","title":"auth_failed"},{"location":"mqtt-_SSLConnection/#parameters_6","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"mqtt-_SSLConnection/#returns_6","text":"None val","title":"Returns"},{"location":"mqtt-_SSLConnection/#sent","text":"fun ref sent( conn: TCPConnection ref, data: (String val | Array[U8 val] val)) : (String val | Array[U8 val] val)","title":"sent"},{"location":"mqtt-_SSLConnection/#parameters_7","text":"conn: TCPConnection ref data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"mqtt-_SSLConnection/#returns_7","text":"( String val | Array [ U8 val] val)","title":"Returns"},{"location":"mqtt-_SSLConnection/#sentv","text":"fun ref sentv( conn: TCPConnection ref, data: ByteSeqIter val) : ByteSeqIter val","title":"sentv"},{"location":"mqtt-_SSLConnection/#parameters_8","text":"conn: TCPConnection ref data: ByteSeqIter val","title":"Parameters"},{"location":"mqtt-_SSLConnection/#returns_8","text":"ByteSeqIter val","title":"Returns"},{"location":"mqtt-_SSLConnection/#received","text":"fun ref received( conn: TCPConnection ref, data: Array[U8 val] iso, times: USize val) : Bool val","title":"received"},{"location":"mqtt-_SSLConnection/#parameters_9","text":"conn: TCPConnection ref data: Array [ U8 val] iso times: USize val","title":"Parameters"},{"location":"mqtt-_SSLConnection/#returns_9","text":"Bool val","title":"Returns"},{"location":"mqtt-_SSLConnection/#expect","text":"fun ref expect( conn: TCPConnection ref, qty: USize val) : USize val","title":"expect"},{"location":"mqtt-_SSLConnection/#parameters_10","text":"conn: TCPConnection ref qty: USize val","title":"Parameters"},{"location":"mqtt-_SSLConnection/#returns_10","text":"USize val","title":"Returns"},{"location":"mqtt-_SSLConnection/#closed","text":"fun ref closed( conn: TCPConnection ref) : None val","title":"closed"},{"location":"mqtt-_SSLConnection/#parameters_11","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"mqtt-_SSLConnection/#returns_11","text":"None val","title":"Returns"},{"location":"mqtt-_SSLConnection/#throttled","text":"fun ref throttled( conn: TCPConnection ref) : None val","title":"throttled"},{"location":"mqtt-_SSLConnection/#parameters_12","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"mqtt-_SSLConnection/#returns_12","text":"None val","title":"Returns"},{"location":"mqtt-_SSLConnection/#unthrottled","text":"fun ref unthrottled( conn: TCPConnection ref) : None val","title":"unthrottled"},{"location":"mqtt-_SSLConnection/#parameters_13","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"mqtt-_SSLConnection/#returns_13","text":"None val","title":"Returns"},{"location":"mqtt-_SSLContext/","text":"_SSLContext[A: Any iso] \u00b6 [Source] interface val _SSLContext[A: Any iso] Public Functions \u00b6 client \u00b6 [Source] fun box client( hostname: String val) : A^ ? Parameters \u00b6 hostname: String val Returns \u00b6 A^ ?","title":"interface _SSLContext"},{"location":"mqtt-_SSLContext/#_sslcontext91a-any-iso93","text":"[Source] interface val _SSLContext[A: Any iso]","title":"_SSLContext[A: Any iso]"},{"location":"mqtt-_SSLContext/#public-functions","text":"","title":"Public Functions"},{"location":"mqtt-_SSLContext/#client","text":"[Source] fun box client( hostname: String val) : A^ ?","title":"client"},{"location":"mqtt-_SSLContext/#parameters","text":"hostname: String val","title":"Parameters"},{"location":"mqtt-_SSLContext/#returns","text":"A^ ?","title":"Returns"},{"location":"src/mqtt/_connection_handler/","text":"use \"backpressure\" use \"buffered\" use \"net\" class _MQTTConnectionHandler[ A: Any iso = None iso, B: (None | _SSLContext[A] val) = None, C: (None | _SSLConnection[A]) = None] is TCPConnectionNotify \"\"\" A TCPConnectionNotify class that handles and redirects all TCP events and messages to an MQTTConnection actor. \"\"\" let _connection: MQTTConnection[A, B, C] let _auth: BackpressureAuth let _data_buffer: Reader = Reader new iso create(connection: MQTTConnection[A, B, C], auth: BackpressureAuth) => _connection = connection _auth = auth fun ref connected(conn: TCPConnection ref) => _connection._connected(conn, conn.local_address(), conn.remote_address()) fun ref connect_failed(conn: TCPConnection ref) => _connection._connect_failed(conn) fun ref closed(conn: TCPConnection ref) => _data_buffer.clear() _connection._closed(conn) fun ref received(conn: TCPConnection ref, data: Array[U8] iso, times: USize): Bool => \"\"\" Combines and breaks received data into control packets, based on the Remaining Length field from MQTT control packets. Once the size has been fixed in this function through the use of an internal buffer, the data is sent to the MQTTConnection actor through the `_parse_packet()` behaviour. \"\"\" let full_data: Array[U8] val = consume data _data_buffer.append(full_data) let buffer = Writer try while _data_buffer.size() > 0 do buffer.u8(_data_buffer.u8()?) var remaining_length: USize = 0 var shift_amount: USize = 0 var temp: U8 = 0x80 repeat temp = _data_buffer.u8()? remaining_length = remaining_length + ((temp and 0x7F).usize() << shift_amount) shift_amount = shift_amount + 7 buffer.u8(temp) until (temp and 0x80) == 0x0 end if remaining_length <= _data_buffer.size() then buffer.write(_data_buffer.block(remaining_length)?) let packet_data = recover iso Array[U8] end for chunk in buffer.done().values() do packet_data.append(chunk) end _connection._parse_packet(conn, consume packet_data) else error end end else try buffer.write(_data_buffer.block(_data_buffer.size())?) end for chunk in buffer.done().values() do _data_buffer.append(chunk) end end true fun ref auth_failed(conn: TCPConnection ref) => _connection._auth_failed(conn) fun ref throttled(conn: TCPConnection ref) => Backpressure.apply(_auth) fun ref unthrottled(conn: TCPConnection ref) => Backpressure.release(_auth)","title":"_connection_handler.pony"},{"location":"src/mqtt/_ssl/","text":"use \"net\" interface val _SSLContext[A: Any iso] fun client(hostname: String): A^ ? interface _SSLConnection[A: Any iso] is TCPConnectionNotify new iso create(notify: TCPConnectionNotify iso, ssl: A)","title":"_ssl.pony"},{"location":"src/mqtt/_timer/","text":"use \"time\" class _MQTTPingTimer[A: Any iso = None iso, B: (None | _SSLContext[A] val) = None, C: (None | _SSLConnection[A]) = None] is TimerNotify \"\"\" Timer to send PINGREQ messages to the server periodically. Currently, it fires at 75% of the keepalive time (i.e. if keepalive is set to 10 seconds, it fires every 7.5 seconds). If keepalive is set to `0`, it will fire every 30 seconds. \"\"\" let _conn: MQTTConnection[A, B, C] new iso create(conn: MQTTConnection[A, B, C]) => _conn = conn fun ref apply(timer: Timer, count: U64): Bool => _conn._send_ping() true class _MQTTResendTimer[A: Any iso = None iso, B: (None | _SSLContext[A] val) = None, C: (None | _SSLConnection[A]) = None] is TimerNotify \"\"\" Timer to handle QoS, re-firing unacknowledged PUBLISH and SUBSCRIBE requests with the appropriate DUP flag. Currently, it always fires every second. \"\"\" let _conn: MQTTConnection[A, B, C] new iso create(conn: MQTTConnection[A, B, C]) => _conn = conn fun ref apply(timer: Timer, count: U64): Bool => _conn._resend_packets() true class _MQTTReconnectTimer[A: Any iso = None iso, B: (None | _SSLContext[A] val) = None, C: (None | _SSLConnection[A]) = None] is TimerNotify \"\"\" Timer to handle lost connections, when `reconnect_time'` is set to a value greater than 0. Fires at the specified interval in seconds. \"\"\" let _conn: MQTTConnection[A, B, C] new iso create(conn: MQTTConnection[A, B, C]) => _conn = conn fun ref apply(timer: Timer, count: U64): Bool => _conn._new_connection() true","title":"_timer.pony"},{"location":"src/mqtt/connection/","text":"use \"buffered\" use \"collections\" use \"net\" use \"time\" // actor MQTTConnection[A: (None | _SSL) = None, B: (None | _SSLContext[A]) = None, C: (None | _SSLConnection[A]) = None] actor MQTTConnection[ A: Any iso = None iso, B: (None | _SSLContext[A] val) = None, C: (None | _SSLConnection[A]) = None] is MQTTConnectionInterface \"\"\" An actor that handles the connection to the MQTT server in the background. When created, it establishes a TCP connection to the specified broker and exchanges messages according to the protocol version. Afterwards, it can be called by the user to execute actions such as publishing messages or subscribing to topics, and triggers events in an MQTTConnectionNotify class when receiving a request from the server or when encountering an error. It creates a TCPConnectionNotify object of its own, to interface with a TCP connection only through it. It also creates three different timers to organize its workflow. he user can also specify reconnection, making this class dispose of all current state and attempt to establish a new connection. During execution, it may also raise one of many errors to the notify class. In order to use the [`net-ssl`](https://github.com/ponylang/net-ssl) package, declare this actor with the following type parameters: ```pony use \"net_ssl\" ... conn = MQTTConnection[SSL iso, SSLContext, SSLConnection](...) ``` \"\"\" let auth: AmbientAuth \"\"\" The connection authority used in the TCP backend. Usually, this value is a cast from `env.root`. \"\"\" let host: String \"\"\" The host where the MQTT broker is located, such as `localhost`, `37.187.106.16`, or `test.mosquitto.org`. \"\"\" let port: String \"\"\" The port for the MQTT service. By default, most brokers use port `1883` for unsecure connections. \"\"\" let _client: MQTTConnectionNotify let _keepalive: U16 let _user: (String | None) let _pass: (String | None) let _retry_connection: Bool \"\"\" Set to true if `_reconnect_time` is greater than zero. \"\"\" let _clean_session: Bool let _sslctx: (B | None) let _sslhost: String let _will_packet: (MQTTPacket | None) let _client_id: String let _ping_time: U64 let _resend_time: U64 let _reconnect_time: U64 \"\"\" When the connection has been established, but is lost later, this actor can restart a TCPConnection if defined by the user (i.e. if the `retry_connection'` parameter is greater than zero). This varies from the type of disconnection: * **Socket errors** (i.e. network has crashed, server was shut down etc.): The program simply creates a reconnect timer that periodically calls `_new_connection()`, which simply kickstarts a new TCPConnection with the same parameters. This timer can only be started upon calling `closed()`, if `_is_connected` was `true`. * **CONNACK errors** (i.e. wrong connection parameters): The program closes the connection from the client side, alters its parameters, and retries with `_new_connection()`. There are two different correctable errors and how the client attempts to fix them: 1. _Unnacceptable protocol version_: Try with an older protocol version (for example, 3.1 instead of 3.1.1). If already at the oldest protocol version, drop connection. 2. _Server unavailable_: Simply retry the connection. This can lead to infinite loops on poorly configured brokers or clients. \"\"\" let _timers: Timers = Timers let _unimplemented: Map[U8, String] = _unimplemented.create() let _sent_packets: Map[U16, MQTTPacket] = _sent_packets.create() let _received_packets: Map[U16, MQTTPacket] = _received_packets.create() let _confirmed_packets: Map[U16, MQTTPacket] = _confirmed_packets.create() let _sub_topics: Map[U16, (String, U8)] = _sub_topics.create() let _unsub_topics: Map[U16, String] = _unsub_topics.create() var _version: MQTTVersion var _is_connected: Bool = false var _conn: (TCPConnection | None) = None var _packet_id: U16 = 0 var _ping_timer: (Timer tag | None) = None var _resend_timer: (Timer tag | None) = None var _reconnect_timer: (Timer tag | None) = None var _local_address: (NetAddress | None) = None var _remote_address: (NetAddress | None) = None new create( auth': AmbientAuth, notify': MQTTConnectionNotify iso, host': String, port': String = \"1883\", keepalive': U16 = 15, version': MQTTVersion = MQTTv311, retry_connection': U64 = 0, clean_session': Bool = true, sslctx': (B | None) = None, sslhost': String = \"\", will_packet': (MQTTPacket | None) = None, client_id': String = \"\", user': (String | None) = None, pass': (String | None) = None) => \"\"\" Creates a connection to the MQTT server, interfacing the TCP connection with a user-defined MQTT notify class, by handling incoming and outgoing requests. The arguments are: * `auth'`: **(required)** The connection authority used in the TCP backend. Usually, this value is a cast from `env.root`. * `notify'`: **(required)** The `MQTTConnectionNotify` implemented by the user which will receive messages and interact with the MQTT client. * `host'`: **(required)** The host where the MQTT broker is located, such as `localhost`, `37.187.106.16`, or `test.mosquitto.org`. * `port'`: The port for the MQTT service. By default, most brokers use port `1883`. * `keepalive'`: Duration in seconds for the keepalive mechanism. If set to `0`, the keepalive mechanism is disabled, but ping messages will still be sent once in a while to avoid inactivity. Default is `15`. * `version'`: The version of the communication protocol. By default, it uses the fourth release of the protocol, version 3.1.1. * `retry_connection'`: When the connection is closed by the server or due to a client error, attempt to reconnect at the specified interval in seconds. A value of zero means no attempt to reconnect will be made. Default is `0`. * `clean_session'`: Controls whether the broker should not store [a persistent session](https://www.hivemq.com/blog/mqtt-essentials-part-7-persistent-session-queuing-messages) for this connection. Sessions for a same client are identified by the `client_id'` parameter. Default is `true`. * `sslctx'`: An SSLContext object, with client and certificate authority set appropriately, used when connecting to a TLS port in a broker. A value of `None` means no security will be implemented over the socket. Default is `None`. * `sslhost'`: A String representing a host for signed certificates. If the hostname isn't part of the certificate, leave it blank. Default is `\"\"`. * `will_packet'`: MQTT allows the client to send a [will message](http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Will_Flag) when the connection with the server is unexpectedly lost. If this field is an MQTTPacket with a valid topic, then the specified package will be sent unless the client gracefully disconnects with the `disconnect()` behaviour without providing the will parameter. * `client_id'`: A string that will be used as the client ID to the broker for this session. By default, it will generate a random string with 8 hexadecimal characters. * `user'`: A string with the username to authenticate to the broker. If `None` or empty, no authentication will be made. Default is `None`. * `pass'`: A string with the password to authenticate to the broker. If `None` or empty, an empty password will be used if `user'` is not `None`. Default is `None`. \"\"\" auth = auth' host = host' port = port' _client = consume notify' _keepalive = keepalive' _version = version' _user = try if (user' as String).size() > 0 then user' else None end else None end _pass = try if (pass' as String).size() > 0 then pass' else None end else None end if retry_connection' > 0 then _retry_connection = true _reconnect_time = 1_000_000_000 * retry_connection' else _retry_connection = false _reconnect_time = 0 end _clean_session = clean_session' _sslctx = sslctx' _sslhost = sslhost' _will_packet = try let wp = will_packet' as MQTTPacket if not MQTTTopic.validate_publish(wp.topic) then None else wp end else None end _client_id = if client_id'.size() >= 6 then client_id' else MQTTUtils.random_string() end _ping_time = if _keepalive > 0 then 750_000_000 * _keepalive.u64() else 30_000_000_000 end _resend_time = 1_000_000_000 _update_version(version') _new_connection() be _connected( conn: TCPConnection, local_address': NetAddress, remote_address': NetAddress) => _end_connection(false) _local_address = local_address' _remote_address = remote_address' try _timers.cancel(_reconnect_timer as Timer tag) end _reconnect_timer = None _conn = conn _connect() be _connect_failed( conn: TCPConnection) => if _is_connected and _retry_connection then _client.on_error(this, MQTTErrorConnectFailedRetry) let reconnect_timer = Timer( _MQTTReconnectTimer[A, B, C](this), _reconnect_time, _reconnect_time) _reconnect_timer = reconnect_timer _timers(consume reconnect_timer) else _end_connection() _client.on_error(this, MQTTErrorConnectFailed) end be _closed( conn: TCPConnection) => if _is_connected then if _retry_connection then _client.on_error(this, MQTTErrorSocketRetry) let reconnect_timer = Timer( _MQTTReconnectTimer[A, B, C](this), 0, _reconnect_time) _reconnect_timer = reconnect_timer _timers(consume reconnect_timer) else _end_connection() _client.on_error(this, MQTTErrorSocket) end else _end_connection() _client.on_disconnect(this) end be _auth_failed( conn: TCPConnection) => iftype B <: _SSLContext[A] then try _sslctx as B _client.on_error(this, MQTTErrorTLSAuthentication) _end_connection(true) end end be _parse_packet( conn: TCPConnection, data: Array[U8] val) => \"\"\" Parses and acts according to a single control packet. \"\"\" let buffer = Reader buffer.append(data) try if not(_is_connected) and (buffer.peek_u8(0)? != 0x20) then return end match buffer.peek_u8(0)? >> 4 | 0x2 => // CONNACK if buffer.peek_u8(0)? != 0x20 then error end if buffer.size() != 4 then error end match buffer.peek_u8(3)? // Return code | 0 => _is_connected = true // Create a package resender timer and a keepalive timer _clean_timers() let resend_timer = Timer( _MQTTPingTimer[A, B, C](this), _ping_time, _ping_time) _resend_timer = resend_timer _timers(consume resend_timer) let ping_timer = Timer( _MQTTResendTimer[A, B, C](this), _resend_time, _resend_time) _ping_timer = ping_timer _timers(consume ping_timer) _client.on_connect(this, buffer.peek_u8(2)? == 0x01) | 1 => try if not _retry_connection then error end let version' = _version as _MQTTVersionDowngradable _client.on_error(this, MQTTErrorConnectProtocolRetry) _update_version(version'.downgrade()) _new_connection() else _client.on_error(this, MQTTErrorConnectProtocol) end | 2 => _client.on_error(this, MQTTErrorConnectID) | 3 => if _retry_connection then _client.on_error(this, MQTTErrorConnectServerRetry) _new_connection() else _client.on_error(this, MQTTErrorConnectServer) end | 4 => _client.on_error(this, MQTTErrorConnectAuthentication) | 5 => _client.on_error(this, MQTTErrorConnectAuthorization) else error end | 0x3 => // PUBLISH let byte: U8 = buffer.peek_u8(0)? let qos: U8 = (byte and 0x06) >> 1 if qos == 0x03 then error end let retain: Bool = (byte and 0x01) != 0x00 let dup: Bool = (byte and 0x08) != 0x00 buffer.skip(1)? // Skip remaining length field var temp: U8 = 0x80 repeat temp = temp and buffer.u8()? until temp == 0x0 end let topic_size: U16 = buffer.u16_be()? let topic_block = buffer.block(topic_size.usize())? let topic: String = String.from_array(consume topic_block) let id: U16 = if qos != 0 then buffer.u16_be()? else 0 end let message: Array[U8] val = buffer.block(buffer.size())? let packet = MQTTPacket(topic, message, retain, qos, id) // QoS match qos | 0x1 => _puback(packet) | 0x2 => _pubrec(packet) end _client.on_message(this, packet) | 0x4 => // PUBACK if buffer.peek_u8(0)? != 0x40 then error end if buffer.size() != 4 then error end buffer.skip(2)? _client.on_publish(this, _sent_packets.remove( buffer.u16_be()?)?._2) | 0x5 => // PUBREC if buffer.peek_u8(0)? != 0x50 then error end if buffer.size() != 4 then error end buffer.skip(2)? _pubrel(_sent_packets.remove(buffer.u16_be()?)?._2) | 0x6 => // PUBREL if buffer.peek_u8(0)? != 0x62 then error end if buffer.size() != 4 then error end buffer.skip(2)? _pubcomp(_received_packets.remove( buffer.u16_be()?)?._2) | 0x7 => // PUBCOMP if buffer.peek_u8(0)? != 0x70 then error end if buffer.size() != 4 then error end buffer.skip(2)? _client.on_publish(this, _confirmed_packets.remove( buffer.u16_be()?)?._2) | 0x9 => // SUBACK if buffer.peek_u8(0)? != 0x90 then error end if buffer.size() != 5 then error end buffer.skip(2)? let topic_tuple = _sub_topics.remove(buffer.u16_be()?)?._2 let topic = topic_tuple._1 if (buffer.peek_u8(0)? and 0x80) == 0x00 then _client.on_subscribe(this, topic, buffer.u8()? and 0x03) else _client.on_error(this, MQTTErrorSubscribeFailure, topic.array()) end | 0xB => // UNSUBACK if buffer.peek_u8(0)? != 0xB0 then error end if buffer.size() != 4 then error end buffer.skip(2)? _client.on_unsubscribe(this, _unsub_topics.remove( buffer.u16_be()?)?._2) | 0xD => // PINGRESP if buffer.peek_u8(0)? != 0xD0 then error end if buffer.size() != 2 then error end _client.on_ping(this) else try _client.on_error( this, MQTTErrorServerCode, _unimplemented(buffer.peek_u8(0)?)?.array()) _disconnect(true) else let control_code = buffer.peek_u8(0)? _client.on_error(this, MQTTErrorUnknownCode, [ control_code ]) _disconnect(true) end end else let packet_data: Array[U8] val = try buffer.block(buffer.size())? else recover val Array[U8] end end _client.on_error(this, MQTTErrorUnexpectedFormat, packet_data) _disconnect(true) end fun ref _end_connection(clear_conn: Bool = true) => \"\"\" Clears data when the connection is ended. \"\"\" _is_connected = false if clear_conn then try (_conn as TCPConnection).dispose() end _conn = None end _packet_id = 0 _clean_timers() _sent_packets.clear() _received_packets.clear() _confirmed_packets.clear() _sub_topics.clear() _unsub_topics.clear() _local_address = None _remote_address = None fun ref _update_version(version: MQTTVersion) => _version = version _unimplemented.clear() _unimplemented.update(0x10, \"CONNECT\") _unimplemented.update(0x80, \"SUBSCRIBE\") _unimplemented.update(0xA0, \"UNSUBSCRIBE\") _unimplemented.update(0xC0, \"PINGREQ\") _unimplemented.update(0xE0, \"DISCONNECT\") be _new_connection() => _end_connection() iftype B <: _SSLContext[A] val then iftype C <: _SSLConnection[A] then if _sslctx isnt None then try let ssl = (_sslctx as B).client(_sslhost)? TCPConnection( auth, C( _MQTTConnectionHandler[A, B, C](this, auth), consume ssl), host, port) return else _client.on_error(this, MQTTErrorTLSConfiguration) return end else TCPConnection( auth, _MQTTConnectionHandler[A, B, C](this, auth), host, port) end else TCPConnection( auth, _MQTTConnectionHandler[A, B, C](this, auth), host, port) end else TCPConnection( auth, _MQTTConnectionHandler[A, B, C](this, auth), host, port) end fun ref _connect() => \"\"\" Sends a CONNECTION control packet to the server after establishing a TCP connection. \"\"\" if _is_connected then _client.on_error(this, MQTTErrorConnectConnected) return end if _conn is None then _client.on_error(this, MQTTErrorConnectSocket) return end let buffer = Writer // -- Variable header -- // Version buffer.write( match _version | MQTTv311 => [ 0x00; 0x04; 'M'; 'Q'; 'T'; 'T'; 0x04 ] | MQTTv31 => [ 0x00; 0x06; 'M'; 'Q'; 'I'; 's'; 'd'; 'p'; 0x03 ] end ) // Flags buffer.u8( if _clean_session then 0x02 else 0x00 end or try let user = _user as String 0x80 or try let pass = _pass as String 0x40 else 0x00 end else 0x00 end or try let will: MQTTPacket = _will_packet as MQTTPacket if will.retain then 0x24 else 0x04 end or (will.qos << 3) else 0x00 end ) // Keepalive buffer.u16_be(_keepalive) // -- Payload -- // ID buffer.u16_be(_client_id.size().u16()) buffer.write(_client_id) // Will try let will: MQTTPacket = _will_packet as MQTTPacket buffer.u16_be(will.topic.size().u16()) buffer.write(will.topic) buffer.u16_be(will.message.size().u16()) buffer.write(will.message) end // Authentication try let user = _user as String buffer.u16_be(user.size().u16()) buffer.write(user) try let pass = _pass as String buffer.u16_be(pass.size().u16()) buffer.write(pass) end end // -- Fixed header -- let msg_buffer = Writer msg_buffer.u8(0x10) msg_buffer.write(MQTTUtils.remaining_length(buffer.size())) msg_buffer.writev(buffer.done()) try (_conn as TCPConnection).writev(msg_buffer.done()) end fun ref _clean_timers() => try _timers.cancel(_ping_timer as Timer tag) end try _timers.cancel(_resend_timer as Timer tag) end _ping_timer = None _resend_timer = None fun ref _disconnect(send_will: Bool = false) => if not(_is_connected) then _client.on_error(this, MQTTErrorDisconnectDisconnected) return end if send_will then try _publish(_will_packet as MQTTPacket) end end let buffer = Writer buffer.u16_le(0xE0) try (_conn as TCPConnection).writev(buffer.done()) (_conn as TCPConnection).dispose() _end_connection() end fun ref _subscribe(topic: String, qos: U8 = 0, id: U16 = 0) => if not(MQTTTopic.validate_subscribe(topic)) then _client.on_error(this, MQTTErrorSubscribeTopic) return end if qos > 2 then _client.on_error(this, MQTTErrorSubscribeQoS) return end if not(_is_connected) then _client.on_error(this, MQTTErrorSubscribeConnected) return end let buffer = Writer // -- Variable header -- if id == 0 then _packet_id = _packet_id + 1 buffer.u16_be(_packet_id) else buffer.u16_be(id) end // -- Payload -- buffer.u16_be(topic.size().u16()) buffer.write(topic) buffer.u8(qos) // -- Fixed header -- let msg_buffer = Writer msg_buffer.u8(0x82) msg_buffer.write(MQTTUtils.remaining_length(buffer.size())) msg_buffer.writev(buffer.done()) _sub_topics.update(if id == 0 then _packet_id else id end, (topic, qos)) try (_conn as TCPConnection).writev(msg_buffer.done()) end fun ref _unsubscribe(topic: String, id: U16 = 0) => if not(MQTTTopic.validate_subscribe(topic)) then _client.on_error(this, MQTTErrorUnsubscribeTopic) return end if not(_is_connected) then _client.on_error(this, MQTTErrorUnsubscribeConnected) return end let buffer = Writer // -- Variable header -- if id == 0 then _packet_id = _packet_id + 1 buffer.u16_be(_packet_id) else buffer.u16_be(id) end // -- Payload -- buffer.u16_be(topic.size().u16()) buffer.write(topic) // -- Fixed header -- let msg_buffer = Writer msg_buffer.u8(0xA2) msg_buffer.write(MQTTUtils.remaining_length(buffer.size())) msg_buffer.writev(buffer.done()) _unsub_topics.update(if id == 0 then _packet_id else id end, topic) try (_conn as TCPConnection).writev(msg_buffer.done()) end fun ref _publish(packet: MQTTPacket) => if not(MQTTTopic.validate_publish(packet.topic)) then _client.on_error(this, MQTTErrorPublishTopic) return end if not(_is_connected) then _client.on_error(this, MQTTErrorPublishConnected) return end let buffer = Writer // -- Variable header -- buffer.u16_be(packet.topic.size().u16()) buffer.write(packet.topic) if packet.qos != 0 then let id' = if packet.id == 0 then _packet_id = _packet_id + 1 _packet_id else packet.id end buffer.u16_be(id') _sent_packets.update(id', MQTTPacket( packet.topic, packet.message, packet.retain, packet.qos, id')) end // -- Payload -- buffer.write(packet.message) // -- Fixed header -- let msg_buffer = Writer msg_buffer.u8( 0x30 or (if (_sent_packets.contains(packet.id)) then 0x08 else 0x00 end) or (packet.qos << 1) or (if packet.retain then 0x01 else 0x00 end)) msg_buffer.write(MQTTUtils.remaining_length(buffer.size())) msg_buffer.writev(buffer.done()) try (_conn as TCPConnection).writev(msg_buffer.done()) end if (packet.qos == 0) then _client.on_publish(this, packet) end fun ref _puback(packet: MQTTPacket) => \"\"\" Acknowledges a QoS 1 publish from the server. \"\"\" let buffer = Writer buffer.u16_be(0x4002) buffer.u16_be(packet.id) try (_conn as TCPConnection).writev(buffer.done()) end fun ref _pubrec(packet: MQTTPacket) => \"\"\" Acknowledges a QoS 2 publish from the server. \"\"\" let buffer = Writer buffer.u16_be(0x5002) buffer.u16_be(packet.id) _received_packets.update(packet.id, packet) try (_conn as TCPConnection).writev(buffer.done()) end fun ref _pubrel(packet: MQTTPacket) => \"\"\" Finalizes a QoS 2 publish from the client. \"\"\" let buffer = Writer buffer.u16_be(0x6202) buffer.u16_be(packet.id) _confirmed_packets.update(packet.id, packet) try (_conn as TCPConnection).writev(buffer.done()) end fun ref _pubcomp(packet: MQTTPacket) => \"\"\" Finalizes a QoS 2 publish from the server. \"\"\" let buffer = Writer buffer.u16_be(0x7002) buffer.u16_be(packet.id) try (_conn as TCPConnection).writev(buffer.done()) end fun ref _ping() => \"\"\" Pings the server in order to keep the connection alive. \"\"\" if not(_is_connected) then return end let buffer = Writer buffer.u16_le(0xC0) try (_conn as TCPConnection).writev(buffer.done()) end be _send_ping() => \"\"\" Timer-callable ping. \"\"\" _ping() be _resend_packets() => \"\"\" Handles any unconfirmed QoS 1 or 2 publish packets by redoing its action. \"\"\" if _is_connected then for packet in _sent_packets.values() do _publish(packet) end for packet in _received_packets.values() do _pubrel(packet) end for packet in _confirmed_packets.values() do _pubcomp(packet) end for (id, topic_tuple) in _sub_topics.pairs() do _subscribe(topic_tuple._1, topic_tuple._2, id) end for (id, topic) in _unsub_topics.pairs() do _unsubscribe(topic, id) end end be disconnect(send_will: Bool = false) => \"\"\" Sends a DISCONNECT request to the broker, and gracefully ends the MQTT and TCP connections. If send_will is true, the will packet will be sent before disconnecting. \"\"\" _disconnect(send_will) be subscribe(topic: String, qos: U8 = 0) => \"\"\" Sends a SUBSCRIBE request to the broker for the associated topic filter, with the specified QoS level. \"\"\" _subscribe(topic, qos) be unsubscribe(topic: String) => \"\"\" Sends an UNSUBSCRIBE request to the broker from the associated topic filter. \"\"\" _unsubscribe(topic) be publish(packet: MQTTPacket) => \"\"\" Sends a PUBLISH request for the provided packet message, along with desired topic, QoS, and retain flag. This behaviour will strip any package control ID. \"\"\" _publish(MQTTPacket( packet.topic, packet.message, packet.retain, packet.qos, if _sent_packets.contains(packet.id) then 0 else packet.id end)) be dispose() => \"\"\" Disposes of this connection. \"\"\" _end_connection(true) fun local_address(): NetAddress ? => \"\"\" Returns the network address of this client. The result is the same of `TCPConnection.local_address()?`. \"\"\" _local_address as NetAddress fun remote_address(): NetAddress ? => \"\"\" Returns the network address of the broker. The result is the same of `TCPConnection.remote_address()?`. \"\"\" _remote_address as NetAddress","title":"connection.pony"},{"location":"src/mqtt/connection_interface/","text":"use \"net\" interface tag MQTTConnectionInterface be disconnect(send_will: Bool = false) \"\"\" Sends a DISCONNECT request to the broker, and gracefully ends the MQTT and TCP connections. If send_will is true, the will packet will be sent before disconnecting. \"\"\" be subscribe(topic: String, qos: U8 = 0) \"\"\" Sends a SUBSCRIBE request to the broker for the associated topic filter, with the specified QoS level. \"\"\" be unsubscribe(topic: String) \"\"\" Sends an UNSUBSCRIBE request to the broker from the associated topic filter. \"\"\" be publish(packet: MQTTPacket) \"\"\" Sends a PUBLISH request for the provided packet message, along with desired topic, QoS, and retain flag. This behaviour will strip any package control ID. \"\"\" be dispose() \"\"\" Disposes of this connection. \"\"\" fun local_address(): NetAddress ? \"\"\" Returns the network address of this client. The result is the same of `TCPConnection.local_address()?`. \"\"\" fun remote_address(): NetAddress ? \"\"\" Returns the network address of the broker. The result is the same of `TCPConnection.remote_address()?`. \"\"\"","title":"connection_interface.pony"},{"location":"src/mqtt/connection_notify/","text":"interface MQTTConnectionNotify \"\"\" A notify interface to create an event-based client class for your MQTT connections. At the very least, it must implement the `on_connect()` method. \"\"\" fun ref on_connect(conn: MQTTConnectionInterface ref, session_present: Bool) \"\"\" Called after successfully connecting to an MQTT broker. Receives the connection and if [a session](https://www.hivemq.com/blog/mqtt-essentials-part-7-persistent-session-queuing-messages) is available in the broker. This method must be implemented. \"\"\" fun ref on_message(conn: MQTTConnectionInterface ref, packet: MQTTPacket) => \"\"\" Called upon receiving a PUBLISH message from the broker. Receives the connection and said message. \"\"\" None fun ref on_publish(conn: MQTTConnectionInterface ref, packet: MQTTPacket) => \"\"\" Called after succesfully publishing a message to the broker. Receives the connection and said message. \"\"\" None fun ref on_subscribe( conn: MQTTConnectionInterface ref, topic: String, qos: U8) => \"\"\" Called after successfully subscribing to a topic. Receives the connection, said topic, and the associated QoS level of the subscription (from 0 to 2). \"\"\" None fun ref on_unsubscribe(conn: MQTTConnectionInterface ref, topic: String) => \"\"\" Called after successfully unsubscribing from a topic. Receives the connection and said topic. \"\"\" None fun ref on_ping(conn: MQTTConnectionInterface ref) => \"\"\" Called after a ping request is replied by the server. Receives the connection. \"\"\" None fun ref on_disconnect(conn: MQTTConnectionInterface ref) => \"\"\" Called after the connection to the broker is closed by the user. Receives the connection. When disconnected, packets and subscriptions should no longer be sent, and session data may be lost unless reconnection is set and `clean_session'` is `false`. \"\"\" None fun ref on_error( conn: MQTTConnectionInterface ref, err: MQTTError, info: Array[U8] val = recover val Array[U8] end) => \"\"\" Called when an error occurs. Receives the connection, the error code, and any additional byte array info if applicable. Some errors may result in the connection to the server being closed afterwards. \"\"\" None","title":"connection_notify.pony"},{"location":"src/mqtt/error/","text":"primitive MQTTErrorConnectConnected \"\"\" This error is triggered when a connection is attempted when already connected. \"\"\" fun string(): String => \"Cannot connect: Already connected\" primitive MQTTErrorConnectSocket \"\"\" This error is triggered when a connection is attempted without a previous TCP connection. \"\"\" fun string(): String => \"Cannot connect: No connection established\" primitive MQTTErrorDisconnectDisconnected \"\"\" This error is triggered when a disconnection is attempted without a previous TCP connection. \"\"\" fun string(): String => \"Cannot disconnect: Already disconnected\" primitive MQTTErrorSubscribeTopic \"\"\" This error is triggered when subscribing with an invalid topic filter. \"\"\" fun string(): String => \"Cannot subscribe: Invalid topic\" primitive MQTTErrorSubscribeQoS \"\"\" This error is triggered when subscribing with an invalid QoS value. \"\"\" fun string(): String => \"Cannot subscribe: Invalid QoS\" primitive MQTTErrorSubscribeConnected \"\"\" This error is triggered when subscribing without a previous TCP connection. \"\"\" fun string(): String => \"Cannot subscribe: Not connected\" primitive MQTTErrorUnsubscribeTopic \"\"\" This error is triggered when unsubscribing with an invalid topic filter. \"\"\" fun string(): String => \"Cannot unsubscribe: Invalid topic\" primitive MQTTErrorUnsubscribeConnected \"\"\" This error is triggered when unsubscribing without a previous TCP connection. \"\"\" fun string(): String => \"Cannot unsubscribe: Not connected\" primitive MQTTErrorPublishTopic \"\"\" This error is triggered when publishing with an invalid topic filter. \"\"\" fun string(): String => \"Cannot publish: Invalid topic\" primitive MQTTErrorPublishConnected \"\"\" This error is triggered when publishing without a previous TCP connection. \"\"\" fun string(): String => \"Cannot publish: Not connected\" primitive MQTTErrorConnectFailedRetry \"\"\" This error is triggered when there was a TCP connection error. The connection actor will automatically try to reconnect. \"\"\" fun string(): String => \"[CONNECT] Could not establish a connection; retrying\" primitive MQTTErrorConnectFailed \"\"\" This error is triggered when there was a TCP connection error. The connection actor will automatically end execution. \"\"\" fun string(): String => \"[CONNECT] Could not establish a connection\" primitive MQTTErrorSocketRetry \"\"\" This error is triggered when the TCP connection was closed by the remote server. The connection actor will automatically try to reconnect. \"\"\" fun string(): String => \"Connection closed by remote server; retrying\" primitive MQTTErrorSocket \"\"\" This error is triggered when the TCP connection was closed by the remote server. The connection actor will automatically end execution. \"\"\" fun string(): String => \"Connection closed by remote server\" primitive MQTTErrorTLSConfiguration \"\"\" This error is triggered when an SSL client could not be created due to bad configuration. The connection actor will automatically end execution. \"\"\" fun string(): String => \"Invalid TLS configuration\" primitive MQTTErrorTLSAuthentication \"\"\" This error is triggered when the SSL credentials for authentication are invalid. The connection actor will automatically end execution. \"\"\" fun string(): String => \"TLS authentication error\" primitive MQTTErrorConnectProtocolRetry \"\"\" This error is triggered when the broker does not accept the current protocol version. The connection actor will automatically downgrade to a lower protocol version and try to reconnect. \"\"\" fun string(): String => \"[CONNACK] Unnacceptable protocol version; retrying\" primitive MQTTErrorConnectProtocol \"\"\" This error is triggered when the broker does not accept the current protocol version. The connection actor will automatically end execution. \"\"\" fun string(): String => \"[CONNACK] Unnacceptable protocol version\" primitive MQTTErrorConnectID \"\"\" This error is triggered when the client ID is invalid. The connection actor will automatically end execution. \"\"\" fun string(): String => \"[CONNACK] Connection ID rejected\" primitive MQTTErrorConnectServerRetry \"\"\" This error is triggered when the MQTT server is currently unavailable. The connection actor will automatically try to reconnect. \"\"\" fun string(): String => \"[CONNACK] Server unavailable; retrying\" primitive MQTTErrorConnectServer \"\"\" This error is triggered when the MQTT server is currently unavailable. The connection actor will automatically end execution. \"\"\" fun string(): String => \"[CONNACK] Server unavailable\" primitive MQTTErrorConnectAuthentication \"\"\" This error is triggered when either the username or the password for the MQTT connection are invalid. The connection actor will automatically end execution. \"\"\" fun string(): String => \"[CONNACK] Bad user name or password\" primitive MQTTErrorConnectAuthorization \"\"\" This error is triggered when either the client is unauthorized by the broker. The connection actor will automatically end execution. \"\"\" fun string(): String => \"[CONNACK] Unauthorized client\" primitive MQTTErrorSubscribeFailure \"\"\" This error is triggered when the subscription to a certain topic filter is denied by the server. The additional info array will contain the failed subscription topic. \"\"\" fun string(): String => \"[SUBACK] Could not subscribe to topic\" primitive MQTTErrorServerCode \"\"\" This error is triggered when a server control code (such as CONNECT or SUBSCRIBE) is sent to the client. The connection actor will automatically end execution. The additional info array will contain the control code string bytes. \"\"\" fun string(): String => \"Unexpected server control code; disconnecting\" primitive MQTTErrorUnknownCode \"\"\" This error is triggered when an unknown control code is sent to the client. The connection actor will automatically end execution. The additional info array will contain the control code byte. \"\"\" fun string(): String => \"Unknown control code; disconnecting\" primitive MQTTErrorUnexpectedFormat \"\"\" This error is triggered when there is an error when parsing a packet. The connection actor will automatically end execution. The additional info array will contain the bytes of the failed parsed packet. \"\"\" fun string(): String => \"Unexpected format when processing packet; disconnecting\" type MQTTError is ( MQTTErrorConnectConnected | MQTTErrorConnectSocket | MQTTErrorDisconnectDisconnected | MQTTErrorSubscribeTopic | MQTTErrorSubscribeQoS | MQTTErrorSubscribeConnected | MQTTErrorUnsubscribeTopic | MQTTErrorUnsubscribeConnected | MQTTErrorPublishTopic | MQTTErrorPublishConnected | MQTTErrorConnectFailedRetry | MQTTErrorConnectFailed | MQTTErrorSocketRetry | MQTTErrorSocket | MQTTErrorTLSConfiguration | MQTTErrorTLSAuthentication | MQTTErrorConnectProtocolRetry | MQTTErrorConnectProtocol | MQTTErrorConnectID | MQTTErrorConnectServerRetry | MQTTErrorConnectServer | MQTTErrorConnectAuthentication | MQTTErrorConnectAuthorization | MQTTErrorSubscribeFailure | MQTTErrorServerCode | MQTTErrorUnknownCode | MQTTErrorUnexpectedFormat) \"\"\" A type for all the possible errors raised by the connection to the notify class. Depending on the type of error, the user may choose to handle or ignore them. \"\"\"","title":"error.pony"},{"location":"src/mqtt/packet/","text":"class val MQTTPacket \"\"\" An immutable, sendable packet, which can be published by the client or received from the server in PUBLISH messages, and if a Will is set upon connection. \"\"\" let topic: String \"\"\" The topic the packet is associated with. Be aware that user-defined topics may not follow the topic name rules of the protocol. \"\"\" let message: Array[U8] val \"\"\" The packet's payload. \"\"\" let retain: Bool \"\"\" The RETAIN flag in packets. If set to `true`, the server must retain the packet, sending it to late client subscriptions to the corresponding topic. \"\"\" let qos: U8 \"\"\" The QoS of the packet, i.e. how the protocol guarantees dispatching. There are three possible values: * 0 \\(at most once\\): The packet is sent only one time, and may be lost. * 1 \\(at least once\\): The package is sent repeatedly until the receiver successfully acknowledges it. * 2 \\(exactly once\\): The packet will reach its destination thanks to an MQTT handshake, without loss or duplication. Invalid values will be automatically set to 0. \"\"\" let id: U16 \"\"\" The packet identifier, used for control between the client and the server. It should not be set by the user when sending a packet, since the value will be overwritten before being sent to the broker. \"\"\" new val create( topic': String, message': Array[U8] val, retain': Bool = false, qos': U8 = 0, id': U16 = 0) => \"\"\" Creates a packet. \"\"\" topic = topic' message = message' retain = retain' qos = if qos' <= 2 then qos' else 0 end id = id'","title":"packet.pony"},{"location":"src/mqtt/topic/","text":"primitive MQTTTopic \"\"\" An utility to validate topics upon publishing or subscribing. \"\"\" fun tag validate_publish(topic: String): Bool => \"\"\" Validates a PUBLISH topic, by verifying if it has no wildcard (`#` or `+`) or null characters. Returns `true` if the topic is valid and `false` otherwise. \"\"\" if (topic.size() < 1) or (topic.size() > 65535) then return false end not(topic.contains(\"#\")) and not(topic.contains(\"+\")) and not(topic.contains(String.from_array([0x00]))) fun tag validate_subscribe(topic: String): Bool => \"\"\" Validates a SUBSCRIBE/UNSUBSCRIBE filter, by verifying if it has wildcards properly positioned between dashes (`#` or `+`) and no null characters. Returns `true` if the topic is valid and `false` otherwise. \"\"\" if (topic.size() < 1) or (topic.size() > 65535) then return false end if topic.contains(String.from_array([0x00])) then return false end var was_slash: Bool = true var was_plus: Bool = false var was_hash: Bool = false for byte in topic.values() do if was_hash or (was_plus and (byte != '/')) then return false elseif byte == '/' then was_slash = true was_plus = false elseif byte == '+' then if not was_slash then return false end was_slash = false was_plus = true elseif byte == '#' then if not was_slash then return false end was_hash = true else was_slash = false end end true fun tag match_topic(topic: String, filter: String): Bool => \"\"\" Checks if the provided PUBLISH topic in `name` matches the provided SUBSCRIBE/UNSUBSCRIBE filter in `filter` and if they are both valid. Returns `true` if the topic matches the filter and `false` otherwise. \"\"\" if validate_publish(topic) and validate_subscribe(filter) then let topic_array: Array[String] val = topic.split_by(\"/\") let filter_array: Array[String] val = filter.split_by(\"/\") if topic_array.size() < filter_array.size() then return false elseif topic_array.size() > filter_array.size() then try if filter_array(filter_array.size() - 1)? != \"#\" then return false end end end for i in filter_array.keys() do try let multi_wc = filter_array(i)? == \"#\" let single_wc = filter_array(i)? == \"+\" let equal_level = filter_array(i)? == topic_array(i)? if (i == 0) and (topic_array(0)?(0)? == '$') then if single_wc or multi_wc or not(equal_level) then return false end elseif multi_wc then return true elseif not(single_wc) and not(equal_level) then return false end else false end end true else false end","title":"topic.pony"},{"location":"src/mqtt/utils/","text":"use \"random\" use \"time\" primitive MQTTUtils \"\"\" An utility to generate intermediate values in MQTTConnection. \"\"\" fun random_string( length: USize = 8, letters: String = \"0123456789abcdef\"): String iso^ => \"\"\" Generates a random string of the specified length with the provided characters. \"\"\" recover let length': USize = if (length == 0) or (length > 23) then 8 else length end var string = String(length') let rand: Rand = Rand(Time.nanos()) var n: USize = 0 while n < length' do try let char = rand.int(letters.size().u64()).usize() string.push(letters(char)?) end n = n + 1 end string end fun remaining_length(length: USize): Array[U8] val => \"\"\" Generates an array of bytes in the format specified by the MQTT protocol for the \"Remaining Length\" field, encoding the provided integer. \"\"\" let buffer = recover Array[U8] end var length' = length repeat let byte: U8 = if length' >= 128 then (length'.u8() and 0x7F) or 0x80 else (length'.u8() and 0x7F) end length' = length' >> 7 buffer.push(byte) until length' == 0 end buffer","title":"utils.pony"},{"location":"src/mqtt/version/","text":"primitive MQTTv31 \"\"\" Third version of the MQTT protocol. \"\"\" primitive MQTTv311 \"\"\" Fourth version of the MQTT protocol. It is also the default version. \"\"\" fun downgrade(): MQTTVersion => \"\"\" If this version is unsupported by the broker, try the third version of the protocol. \"\"\" MQTTv31 type MQTTVersion is (MQTTv31 | MQTTv311) \"\"\" A type with all implemented versions of the MQTT protocol as primitives. It can be set by the user when creating a connection with MQTTConnection. Upon receiving an \"invalid version\" CONNACK error from the server with the `retry_connection` flag set, the connection will automatically try reconnection with an older version. If already at the oldest version (currently, MQTTv31), it will stop reconnection. \"\"\" interface val _MQTTVersionDowngradable \"\"\" Private interface to determine that an MQTT version can be downgraded to a previous version of the protocol. \"\"\" fun downgrade(): MQTTVersion \"\"\" Returns the previous version of the MQTT protocol. \"\"\"","title":"version.pony"}]}